/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import dominio.d_alquileres_info;
import dominio.d_gastos_inq;
import dominio.d_grupoirpf;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_parametroscfe;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaPing;
import presentacion.paneles.listadoinqatrasados;
import presentacion.paneles.listadomovinq;
import presentacion.paneles.listadomovprop;
import presentacion.paneles.listadosaldos;
import presentacion.paneles.listadosobregiros;
import presentacion.paneles.p_cambioclave;
import presentacion.paneles.p_configuracion;
import presentacion.paneles.p_control;
import presentacion.paneles.p_ejecutar_funcion_mensual;
import presentacion.paneles.p_emitir_factura;
import presentacion.paneles.p_emitir_factura_dolares;
import presentacion.paneles.p_fichapropietario;
import presentacion.paneles.p_fichainquilino;
import presentacion.paneles.p_listado_facturas_emitidas;
import presentacion.paneles.p_listadosmov;
import presentacion.paneles.p_listadosmovnocfe;
import presentacion.paneles.p_notascredito;
import presentacion.paneles.p_resguardo;

/**
 *
 * @author MGiordano
 */
public final class menu extends javax.swing.JFrame {

    Integer cant = 0;
    List<d_grupoirpf> listagruposirpf = new ArrayList<d_grupoirpf>();
    String inquilinosparaactualizar = "";

    /**
     * Creates new form NewJFrame
     */
    public menu() {
        initComponents();
        setLocationRelativeTo(null);
        //obtenerestadodgi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lbldgi = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu13 = new javax.swing.JMenu();
        jMenu14 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu15 = new javax.swing.JMenu();
        jMenu16 = new javax.swing.JMenu();
        jMenu17 = new javax.swing.JMenu();
        jMenu18 = new javax.swing.JMenu();
        jMenu19 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu21 = new javax.swing.JMenu();
        jMenu24 = new javax.swing.JMenu();
        jMenu23 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu22 = new javax.swing.JMenu();
        jMenu34 = new javax.swing.JMenu();
        jMenu26 = new javax.swing.JMenu();
        jMenu51 = new javax.swing.JMenu();
        jMenu52 = new javax.swing.JMenu();
        jMenu50 = new javax.swing.JMenu();
        jMenu82 = new javax.swing.JMenu();
        jMenu146 = new javax.swing.JMenu();
        jMenu530 = new javax.swing.JMenu();
        jMenu27 = new javax.swing.JMenu();
        jMenu30 = new javax.swing.JMenu();
        jMenu31 = new javax.swing.JMenu();
        jMenu36 = new javax.swing.JMenu();
        jMenu37 = new javax.swing.JMenu();
        jMenu33 = new javax.swing.JMenu();
        jMenu42 = new javax.swing.JMenu();
        jMenu32 = new javax.swing.JMenu();
        jMenu40 = new javax.swing.JMenu();
        jMenu41 = new javax.swing.JMenu();
        jMenu35 = new javax.swing.JMenu();
        jMenu39 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu12 = new javax.swing.JMenu();
        jMenu20 = new javax.swing.JMenu();
        jMenu28 = new javax.swing.JMenu();
        jMenu38 = new javax.swing.JMenu();
        jMenu29 = new javax.swing.JMenu();
        jMenu25 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MENU PRINCIPAL");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 255));
        jLabel1.setText("8.9");

        lbldgi.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbldgi.setForeground(java.awt.Color.red);
        lbldgi.setText("-");

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("VERSION");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("ALTAS");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenu9.setText("PROPIETARIO");
        jMenu9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu9MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu9);

        jMenu10.setText("INQUILINO");
        jMenu10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu10MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu10);

        jMenu2.setText("CONVENIO - REINTEGRO");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu2);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("ENTRADAS");

        jMenu13.setText("PROPIETARIO");
        jMenu13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu13MouseClicked(evt);
            }
        });
        jMenu3.add(jMenu13);

        jMenu14.setText("INQUILINO");
        jMenu14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu14MouseClicked(evt);
            }
        });
        jMenu3.add(jMenu14);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("SALIDAS");

        jMenu15.setText("INMOBILIARIA PAGA");

        jMenu16.setText("GASTOS");
        jMenu16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu16MouseClicked(evt);
            }
        });
        jMenu15.add(jMenu16);

        jMenu17.setText("GASTOS A DEBITAR A CUENTA PROPIETARIO");
        jMenu17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu17MouseClicked(evt);
            }
        });
        jMenu15.add(jMenu17);

        jMenu18.setText("GASTOS A DEBITAR A CUENTA INQUILINO");
        jMenu18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu18MouseClicked(evt);
            }
        });
        jMenu15.add(jMenu18);

        jMenu4.add(jMenu15);

        jMenu19.setText("INMOBILIARIA RETIRA");
        jMenu19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu19MouseClicked(evt);
            }
        });
        jMenu4.add(jMenu19);

        jMenuBar1.add(jMenu4);

        jMenu5.setText("CONSULTAS");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });

        jMenu21.setText("FICHAS");

        jMenu24.setText("INQUILINOS");
        jMenu24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu24MouseClicked(evt);
            }
        });
        jMenu21.add(jMenu24);

        jMenu23.setText("PROPIETARIOS");
        jMenu23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu23MouseClicked(evt);
            }
        });
        jMenu21.add(jMenu23);

        jMenu5.add(jMenu21);

        jMenu6.setText("LISTADOS");

        jMenu22.setText("ATRASOS DE INQUILINOS");
        jMenu22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu22MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu22);

        jMenu34.setText("SOBREGIROS");
        jMenu34.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu34MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu34);

        jMenu26.setText("DIARIO");
        jMenu26.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu26MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu26);

        jMenu51.setText("INQUILINOS");
        jMenu51.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu51MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu51);

        jMenu52.setText("PROPIETARIOS");
        jMenu52.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu52MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu52);

        jMenu50.setText("MOVIMIENTOS DE PROPIETARIOS");
        jMenu50.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu50MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu50);

        jMenu82.setText("MOVIMIENTOS DE INQUILINOS");
        jMenu82.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu82MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu82);

        jMenu146.setText("LISTADO DE SALDOS");
        jMenu146.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu146MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu146);

        jMenu530.setText("LISTADOS DE IRPF POR CI");
        jMenu530.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu530MouseClicked(evt);
            }
        });
        jMenu6.add(jMenu530);

        jMenu5.add(jMenu6);

        jMenu27.setText("FACTURACION");
        jMenu27.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu27MouseClicked(evt);
            }
        });

        jMenu30.setText("NOTAS DE CREDITO");
        jMenu30.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu30MouseClicked(evt);
            }
        });
        jMenu27.add(jMenu30);

        jMenu31.setText("MOVIMIENTOS SIN CFE");
        jMenu31.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu31MouseClicked(evt);
            }
        });
        jMenu27.add(jMenu31);

        jMenu36.setText("EMITIR DOCUMENTO");

        jMenu37.setText("EMITIR TICKET");
        jMenu37.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu37MouseClicked(evt);
            }
        });
        jMenu36.add(jMenu37);

        jMenu33.setText("EMITIR FACTURA");
        jMenu33.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu33MouseClicked(evt);
            }
        });
        jMenu36.add(jMenu33);

        jMenu42.setText("EMITIR FACTURA DOLARES");
        jMenu42.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu42MouseClicked(evt);
            }
        });
        jMenu42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu42ActionPerformed(evt);
            }
        });
        jMenu36.add(jMenu42);

        jMenu27.add(jMenu36);

        jMenu32.setText("RECIBO O RESGUARDO");
        jMenu32.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu32MouseClicked(evt);
            }
        });

        jMenu40.setText("EMITIR");
        jMenu40.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu40MouseClicked(evt);
            }
        });
        jMenu32.add(jMenu40);

        jMenu41.setText("LISTADO");
        jMenu41.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu41MouseClicked(evt);
            }
        });
        jMenu32.add(jMenu41);

        jMenu27.add(jMenu32);

        jMenu35.setText("DOCUMENTOS EMITIDOS");
        jMenu35.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu35MouseClicked(evt);
            }
        });
        jMenu27.add(jMenu35);

        jMenu39.setText("PROBAR CONEXION DGI");
        jMenu39.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu39MouseClicked(evt);
            }
        });
        jMenu27.add(jMenu39);

        jMenu5.add(jMenu27);

        jMenuBar1.add(jMenu5);

        jMenu8.setText("PARAMETROS");
        jMenu8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu8MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu8);

        jMenu11.setText("DEFINIR GRUPO IRPF");
        jMenu11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu11MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu11);

        jMenu7.setText("HERRAMIENTAS");
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu7MouseEntered(evt);
            }
        });

        jMenu12.setText("PROCESAR PAGOS DE ANDA");
        jMenu12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu12MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu12);

        jMenu20.setText("ACTUALIZAR REAJUSTES");
        jMenu20.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu20MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu20);

        jMenu28.setText("ACTUALIZAR SALDOS");
        jMenu28.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu28MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu28);

        jMenu38.setText("FUNCION MENSUAL");
        jMenu38.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu38MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu38);

        jMenu29.setText("CONFIGURACION");
        jMenu29.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu29MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu29);

        jMenu25.setText("CAMBIAR CLAVE");
        jMenu25.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu25MouseClicked(evt);
            }
        });
        jMenu7.add(jMenu25);

        jMenuBar1.add(jMenu7);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbldgi, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(214, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(lbldgi)))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu9MouseClicked
        p_fichapropietario pro = new p_fichapropietario(this, true);
        pro.setVisible(true);
    }//GEN-LAST:event_jMenu9MouseClicked

    private void jMenu10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu10MouseClicked
        p_fichainquilino inq = new p_fichainquilino(null, true);
        inq.setVisible(true);
    }//GEN-LAST:event_jMenu10MouseClicked

    private void jMenu13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu13MouseClicked
        p_proppaga propp = new p_proppaga();
        propp.setVisible(true);
    }//GEN-LAST:event_jMenu13MouseClicked

    private void jMenu14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu14MouseClicked
        p_inqpaga inqpaga = new p_inqpaga(null, true);
        inqpaga.setVisible(true);
    }//GEN-LAST:event_jMenu14MouseClicked

    private void jMenu8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu8MouseClicked
        p_parametros pa = new p_parametros();
        pa.setVisible(true);
    }//GEN-LAST:event_jMenu8MouseClicked

    private void jMenu23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu23MouseClicked
        p_fichapropietario lstpro = new p_fichapropietario(null, true);
        lstpro.setVisible(true);    }//GEN-LAST:event_jMenu23MouseClicked

    private void jMenu24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu24MouseClicked
        p_fichainquilino inq = new p_fichainquilino(null, true);
        inq.setVisible(true);
    }//GEN-LAST:event_jMenu24MouseClicked

    private void jMenu22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu22MouseClicked
        listadoinqatrasados mora1 = new listadoinqatrasados(null, true);
        mora1.setVisible(true);
    }//GEN-LAST:event_jMenu22MouseClicked

    private void jMenu34MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu34MouseClicked
        listadosobregiros lstsobregiro = new listadosobregiros(null, true);
        lstsobregiro.setVisible(true);
    }//GEN-LAST:event_jMenu34MouseClicked

    private void jMenu50MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu50MouseClicked
        listadomovprop lstmovprop = new listadomovprop(null, true);
        lstmovprop.setVisible(true);
    }//GEN-LAST:event_jMenu50MouseClicked

    private void jMenu82MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu82MouseClicked
        listadomovinq lstmovinq = new listadomovinq(null, true);
        lstmovinq.setVisible(true);
    }//GEN-LAST:event_jMenu82MouseClicked

    private void jMenu146MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu146MouseClicked
        listadosaldos lstsaldo = new listadosaldos(null, true);
        lstsaldo.setVisible(true);
    }//GEN-LAST:event_jMenu146MouseClicked

    private void jMenu530MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu530MouseClicked
        p_listargrupoirpf gru = new p_listargrupoirpf(null, true);
        gru.setVisible(true);
    }//GEN-LAST:event_jMenu530MouseClicked

    private void jMenu26MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu26MouseClicked
        p_listadosmov lstmov = new p_listadosmov(null, true);
        lstmov.setVisible(true);
    }//GEN-LAST:event_jMenu26MouseClicked

    private void jMenu19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu19MouseClicked
        p_propretira propret = new p_propretira();
        propret.setVisible(true);
    }//GEN-LAST:event_jMenu19MouseClicked

    private void jMenu16MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu16MouseClicked
        p_gastoinmo lstgas = new p_gastoinmo();
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu16MouseClicked

    private void jMenu17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu17MouseClicked
        p_gastocta lstgas = new p_gastocta();
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu17MouseClicked

    private void jMenu51MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu51MouseClicked
        p_lstinquilinos lstgas = new p_lstinquilinos();
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu51MouseClicked

    private void jMenu52MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu52MouseClicked
        p_lstpropietarios lstgas = new p_lstpropietarios();
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu52MouseClicked

    private void jMenu18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu18MouseClicked
        p_gastocta_inq lstgas = new p_gastocta_inq(null, true);
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu18MouseClicked

    private void jMenu11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu11MouseClicked
        p_mgrupoirpf gru = new p_mgrupoirpf(null, true);
        gru.setVisible(true);
    }//GEN-LAST:event_jMenu11MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        p_reintegroconvenio conv = new p_reintegroconvenio(null, true);
        conv.setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void jMenu20MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu20MouseClicked
        Integer cantidad = 0;
        try {
            cantidad = actualizarreajustes();
            if (cantidad > 0) {
                JOptionPane.showMessageDialog(this, cantidad + " FECHA/S DE REAJUSTE DE INQUILINO/S ACTUALIZADA/S CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "TODAS LAS FECHAS DE REAJUSTE DE INQUILINOS ESTAN ACTUALIZADAS CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jMenu20MouseClicked

    private void jMenu25MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu25MouseClicked
        p_cambioclave lstgas = new p_cambioclave(this, true);
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu25MouseClicked

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu7MouseEntered

    private void jMenu28MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu28MouseClicked
        p_actualizarsaldosinquilinos actsaldos = new p_actualizarsaldosinquilinos(this, true);
        actsaldos.setVisible(true);
    }//GEN-LAST:event_jMenu28MouseClicked

    void obtenerestadodgi() {
        p_control con = p_control.getInstancia();

        try {
            lbldgi.setText(con.devuelveestadodgi());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void actualizardeudamesactual() throws Exception {
        List<d_inquilino> listainquilinos = new ArrayList<d_inquilino>();
        float importealquiler = 0f;
        d_inquilino inq = new d_inquilino();

        listainquilinos = inq.listarinquilinoscompleto();
        //PRIMERO ACTUALIZAR IMPORTES PARA ESTE MES    

        for (d_inquilino aux : listainquilinos) {
            if (aux.getInq_impalq() == 0) {
                continue;
            }

            //importealquiler = actualizarprimerimportealquiler(aux);
            //aux.setInq_impalq_aux(importealquiler);
            //aux.actualizarimporteaux(aux.getProp_id(), aux.getInq_casa(), importealquiler); //es necesario?
            guardamesactualcomogasto(aux);
        }
    }

    void guardamesactualcomogasto(d_inquilino inq) throws Exception {
        d_movimiento aux = new d_movimiento();
        //float importe = 0f;
        int mqplistado = -1;
        int aqplistado = -1;

        //aux = new d_movimiento();
        aux.setProp_id(inq.getProp_id());
        aux.setInq_casa(inq.getInq_casa());
        aux.setMqp(devuelvemes(new Date()));
        aux.setAqp(devuelveanio(new Date()));
        mqplistado = aux.getMqp();
        aqplistado = aux.getAqp();

        String fecha = "01/" + mqplistado + "/" + aqplistado;
        Date fechad = parsefechadate(fecha);
        if (estafechaesantesdeempezarcontrato(fechad, inq)) {
            return;
        }

        aux = cuotapaga(aux, inq);
        if (aux != null) {
            return;
        }

        d_gastos_inq gas = estemestienesaldo(inq, mqplistado, aqplistado);
        if (gas != null) {
            return;
        }

        guardaralquilermesactual(inq, mqplistado, aqplistado);
        //obtenerlistadogastospendientesinq();
    }

    void guardaralquilermesactual(d_inquilino inq, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        d_gastos_inq aux = new d_gastos_inq();

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(mqp);
        gas.setAqp(aqp);
        gas.setEstado(0);
        gas.setDetalle("SALDO ALQUILER");
        gas.setImporte(inq.getInq_impalq_aux()); //09-07 cambio, estaba: Inq_impalq

        //chequearcuotapaga-revisar
        aux = aux.buscaralquilermes(gas);
        if (aux != null) {
            if (aux.getEstado().equals(1) && aux.getImporte().equals(inq.getInq_impalq())) {
                d_movimiento mov1 = new d_movimiento();
                mov1.setProp_id(inq.getProp_id());
                mov1.setInq_casa(inq.getInq_casa());
                mov1.setMqp(gas.getMqp());
                mov1.setAqp(gas.getAqp());
                mov1.actualizardetalle(mov1);
                //listamovimientos();
            } else {
                //CHEQUEAR QUE REAJUSTE ESTE MES
                aux.setImporte(inq.getInq_impalq());
                gas.setDetalle("ALQUILER");//22-11
                if (aux.getImporte() <= 0f) {
                    return;
                }
                gas.guardargastoinq(aux);
                cant += 1;
            }
        } else {
            //CHEQUEAR QUE REAJUSTE ESTE MES
            gas.setDetalle("ALQUILER");//22-11
            if (gas.getImporte() <= 0f) {
                return;
            }
            gas.guardargastoinq(gas);
            cant += 1;
        }
    }

    Boolean estafechaesantesdeempezarcontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaesantesdeempezarcontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(inq.getInq_fechaic());
        anioactual = devuelveanio(inq.getInq_fechaic());

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == -1) {
            return true;
        }
        return estafechaesantesdeempezarcontrato;
    }

    d_movimiento cuotapaga(d_movimiento mov, d_inquilino inq) throws Exception {
        d_movimiento mov1;
        d_gastos_inq gas;

        //mov1 = mov1.buscarcuotapaga(mov);
        mov1 = buscarmovenlistasoloalquiler(mov, "movimientos");
        //buscar en la lista de mov generada
        if (mov1 == null) {
            gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setDetalle("SALDO ALQUILER");
            gas.setAqp(mov.getAqp());
            gas.setMqp(mov.getMqp());
            gas = buscargasenlistagastos(gas);

            //buscar en la lista de gastos 
            if (gas != null) {
                if (gas.getEstado().equals(1)) {
                    //buscaralquilerpagadoconsaldo
                    //mov1 = new d_movimiento();
                    mov1 = buscaralquilerpagadoconsaldo(mov);
                    //mov1.setEntrada(gas.getImporte() + importealquilerpagadoacuenta(mov));
                    return mov1;
                    //esta pago el mes, ver la forma que devuelva el movimiento correspondiente
                    //esta devolviendo vacio, porque lo pago a traves de un saldo y no como alquiler comun
                } else {
                    return null;
                }
            }
        }
        return mov1;
    }

    d_movimiento buscaralquilerpagadoconsaldo(d_movimiento mov) throws Exception {
        return mov.buscarsaldoalquiler(mov);
    }

    d_movimiento buscarmovenlistasoloalquiler(d_movimiento mov, String tabla) throws Exception {
        return mov.buscaralquilermesoalquiler(mov, tabla);
    }

    d_gastos_inq buscargasenlistagastosalquilerdias(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilerdias(gas);
    }

    d_gastos_inq estemestienesaldo(d_inquilino inq, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        gas = buscargasenlistagastos(gas);

        if (gas != null) {
            if (gas.getEstado().equals(0)) {
                gas.setImporte(inq.getInq_impalq_aux() - (revisarentregassaldo(inq.getProp_id(), inq.getInq_casa(), mqp, aqp)));
                //BUSCAR SI NO TIENE ALGUN ENTREGA DE SALDO
                //OPCION -> AL NUEVO IMPORTE RESTARLE ENTREGAS A CUENTA ALQUILER

                gas.actualizarimporte(gas);
                return gas;

            }
        } else {
            //SI EMPIEZA ESTE MES EL CONTRATO Y TIENE UN ALQUILER DIAS, NO GENERAR SALDO ALQUILER
            if (estafechaempiezacontrato(parsefechadate("01/" + mqp + "/" + aqp), inq)) {
                gas = new d_gastos_inq();
                gas.setProp_id(inq.getProp_id());
                gas.setInq_casa(inq.getInq_casa());
                gas.setDetalle("ALQUILER DIAS");
                gas.setAqp(aqp);
                gas.setMqp(mqp);
                gas = buscargasenlistagastosalquilerdias(gas);
                if (gas != null) {
                    return gas;
                }
            }
        }
        return null;
    }

    Boolean estafechaempiezacontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaempiezacontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(inq.getInq_fechaic());
        anioactual = devuelveanio(inq.getInq_fechaic());

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == 0) {
            return true;
        }
        return estafechaempiezacontrato;
    }


    private void jMenu29MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu29MouseClicked
        p_configuracion lstgas = new p_configuracion(this, true);
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu29MouseClicked

    private void jMenu12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu12MouseClicked
        p_pruebaexcel lstgas = new p_pruebaexcel();
        lstgas.setVisible(true);
    }//GEN-LAST:event_jMenu12MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        obtenerestadodgi();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenu30MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu30MouseClicked
        p_notascredito not = new p_notascredito(null, true);
        not.setVisible(true);
    }//GEN-LAST:event_jMenu30MouseClicked

    private void jMenu31MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu31MouseClicked
        p_listadosmovnocfe mov = new p_listadosmovnocfe(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu31MouseClicked

    private void jMenu33MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu33MouseClicked
        p_emitir_factura mov = new p_emitir_factura(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu33MouseClicked

    private void jMenu35MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu35MouseClicked
        p_listado_facturas_emitidas mov = new p_listado_facturas_emitidas(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu35MouseClicked

    private void jMenu27MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu27MouseClicked
        //obtenerCierreDeCaja(java.lang.String nomusuario, java.lang.String clave, java.lang.String tenant, java.lang.String operador, java.lang.String puntoVenta, java.lang.Short sucursal, javax.xml.datatype.XMLGregorianCalendar fecha)
    }//GEN-LAST:event_jMenu27MouseClicked

    private void jMenu37MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu37MouseClicked
        p_resguardo mov = new p_resguardo(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu37MouseClicked

    private void jMenu38MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu38MouseClicked
        p_ejecutar_funcion_mensual mov = new p_ejecutar_funcion_mensual(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu38MouseClicked

    private void jMenu39MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu39MouseClicked
        SICFERespuestaPing obtenerPing = new SICFERespuestaPing();
        d_parametroscfe pcfe = new d_parametroscfe();
        
        try {
            pcfe = pcfe.buscarparametroscfe();
            if (pcfe == null) {
                throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
            }
            obtenerPing = pingSICFEEmisor(pcfe.getNomusuario(), pcfe.getClave(), pcfe.getTenant());
            if (obtenerPing.getCodigo() == 0) {
                JOptionPane.showMessageDialog(this, "CONEXION EXITOSA", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }else{
                throw new Exception("ERROR DE CONEXION: "+obtenerPing.getDescripcion());
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenu39MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu32MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu32MouseClicked
        
    }//GEN-LAST:event_jMenu32MouseClicked

    private void jMenu40MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu40MouseClicked
        p_recibo_resguardo mov = new p_recibo_resguardo(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu40MouseClicked

    private void jMenu41MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu41MouseClicked
        p_lstdocumentos mov = new p_lstdocumentos();
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu41MouseClicked

    private void jMenu42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu42ActionPerformed
        
    }//GEN-LAST:event_jMenu42ActionPerformed

    private void jMenu42MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu42MouseClicked
        p_emitir_factura_dolares mov = new p_emitir_factura_dolares(null, true);
        mov.setVisible(true);
    }//GEN-LAST:event_jMenu42MouseClicked

    void reiniciarimpalquiler() throws Exception {
        d_inquilino inq = new d_inquilino();

        inq.reiniciarimpalquilergeneral();
    }

    Boolean reajustaesteanio(d_inquilino inq) throws Exception {
        Date ajustereajustado;
        int anioactual = devuelveanio(new Date());
        int anioreajuste;

        ajustereajustado = (ajustarreajuste(inq.getArlmrl()));
        anioreajuste = devuelveanio(ajustereajustado);

        inq.setArlmrl(ajustereajustado);

        return anioreajuste == anioactual;
    }

    void actualizarimportealquilerhabitacion(d_inquilino inq) throws Exception {
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        int anioactual;
        int anioic;
        float axreajustediv = 0f;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Date fechareajustecomun = inq.getArlmrl();
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);
        Boolean importeingresado = false;

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            fechareajustecomun = fechareajusteanual;
        } //else {
        //ingresarimporteamano(inq);
        //}

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
        }

        if (mov == null && !importeingresado) {
            ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = total * par.getProcaumento() / 100;
                axreajustediv = axreajustediv / 3;
                total += (axreajustediv);
                fechareajustecomun = sumar4meses(fechareajustecomun);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
                total += (axreajustediv);
                fechareajustecomun = sumar4meses(fechareajustecomun);
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }

        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
            total += (axreajustediv);
        } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
            total += (axreajustediv);
        }

        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    void actualizarimportealquilerlocal(d_inquilino inq) throws Exception {
        int anioactual;
        int anioic;
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        float axreajustediv;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Boolean importeingresado = false;
        //if (inq.getProp_id() == 221 && inq.getInq_casa() == 17) {
        //float a = 5f;
        //}
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            //NUEVA FECHA REAJUSTE
            inq.setArlmrl(fechareajusteanual);
            //inq.setArlmrl(chequearreajusteanteriorafechaactualsololocales(inq.getArlmrl()));
            //fechareajusteanual = inq.getArlmrl();
        } //else {
        //ingresarimporteamano(inq);
        //}

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
        }

        if (mov == null && !importeingresado) {
            ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        //A VECES LLEGA fecharecorridadate >(MAYOR) fechaactualdate     
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = par.getProcaumento();
                total += (total * axreajustediv / 100);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }
        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = par.getProcaumento();
            total += (total * axreajustediv / 100);
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    void ingresarimporteamano(d_inquilino inq) throws Exception {
        //TENER EN CUENTA:
        //LOS NUEVOS QUE ENTRARON EL AÑO NO PASADO NO DEBERIAN ESTAR
        //IMPORTE ALQUILER 0 -> SI
        String fecharecorrida = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);
        fecharecorridadate = sumaraniosunafecha(fecharecorridadate, -1);

        if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecharecorridadate)) {
            return;
        }
        Date fecha;
        fecha = restar1mes(inq.getArlmrl());
        inquilinosparaactualizar = inquilinosparaactualizar + inq.getProp_id() + "-" + inq.getInq_casa() + " - " + inq.getInq_tipoalq() + " - " + "REVISAR PAGOS DE: " + mes(devuelvemes(fecha).toString()) + "\n";
    }

    String mes(String fecha) {
        String mes = "";

        if (fecha.equals("1")) {
            mes = "ENERO";
            return mes;
        }
        if (fecha.equals("2")) {
            mes = "FEBRERO";
            return mes;
        }
        if (fecha.equals("3")) {
            mes = "MARZO";
            return mes;
        }
        if (fecha.equals("4")) {
            mes = "ABRIL";
            return mes;
        }
        if (fecha.equals("5")) {
            mes = "MAYO";
            return mes;
        }
        if (fecha.equals("6")) {
            mes = "JUNIO";
            return mes;
        }
        if (fecha.equals("7")) {
            mes = "JULIO";
            return mes;
        }
        if (fecha.equals("8")) {
            mes = "AGOSTO";
            return mes;
        }
        if (fecha.equals("9")) {
            mes = "SETIEMBRE";
            return mes;
        }
        if (fecha.equals("10")) {
            mes = "OCTUBRE";
            return mes;
        }
        if (fecha.equals("11")) {
            mes = "NOVIEMBRE";
            return mes;
        }
        if (fecha.equals("12")) {
            mes = "DICIEMBRE";
            return mes;
        }

        return mes;
    }

    Date chequearreajusteanteriorafechaactualsololocales(Date fechareajusteactualizada) throws Exception {
        String fechastractual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechareaactual;

        fechareaactual = parsefechadate(fechastractual);

        int compara = fechareajusteactualizada.compareTo(fechareaactual);

        if (compara == -1) {
            fechareajusteactualizada = sumaraniosunafecha(fechareajusteactualizada, 1);
        }

        return fechareajusteactualizada;
    }

    d_movimiento buscarultimoimporteantesdelreajuste(d_inquilino inq) throws Exception {
        d_movimiento mov = null;
        Date fecha;
        int i = 0;
        //si es movimientosviejos buscar el año anterior (2019 y años anteriores)
        String tabla = "movimientosviejos";

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactuald = parsefechadate(fechaactual);

        fecha = restar1mes(inq.getArlmrl());

        //A VECES LA FECHA DE REAJUSTE ES MAYOR A LA FECHA ACTUAL
        //NOS ASEGURAMOS DE QUE BUSQUE MOVIMIENTOS PREVIOS A LA FECHA ACTUAL
        while (fecha.compareTo(fechaactuald) == 1) {
            fecha = sumaraniosunafecha(fecha, -1);
        }

        while (mov == null && i < 10) {
            //tabla = "movimientosviejos";//tabla = "movimientosviejos";
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                mov = null;
                break;
            }
            mov = new d_movimiento();
            mov.setProp_id(inq.getProp_id());
            mov.setInq_casa(inq.getInq_casa());
            int aqp = devuelveanio(fecha);
            if (aqp == 2020) {
                aqp = aqp - 1;
                fecha = sumaraniosunafecha(fecha, -1);
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    mov = null;
                    break;
                }
            }
            mov.setAqp(aqp);
            mov.setMqp(devuelvemes(fecha));
            mov = mov.buscaralquilermesoalquiler(mov, tabla);
            //buscarcuotapaga
            if (mov == null) {
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(aqp);
                mov.setMqp(devuelvemes(fecha));
                mov = cuotapaga(mov, inq);
            }
            fecha = sumaraniosunafecha(fecha, -1);
            i = i + 1;
        }

        fecha = restar1mes(inq.getArlmrl());

        while (fecha.compareTo(fechaactuald) == 1) {
            fecha = sumaraniosunafecha(fecha, -1);
        }

        if (mov == null) {
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                return null;
            }
            //fecha = restar1mes(inq.getArlmrl());
            tabla = "movimientos";//tabla = "movimientosviejos";
            while (mov == null && i < 10) {
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    return null;
                }
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(devuelveanio(fecha));
                mov.setMqp(devuelvemes(fecha));
                mov = mov.buscaralquilermesoalquiler(mov, tabla);
                //buscarcuotapaga
                if (mov == null) {
                    mov = new d_movimiento();
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    mov.setAqp(devuelveanio(fecha));
                    mov.setMqp(devuelvemes(fecha));
                    mov = cuotapaga(mov, inq);
                }
                fecha = sumaraniosunafecha(fecha, -1);
                i = i + 1;
            }
        }
        return mov;
    }

    Boolean fechaesanterioracomienzodecontrato(Date fechaic, Date fecha) {
        int i = fechaic.compareTo(fecha);
        if (i == -1) {
            return false;
        }
        return true;
    }

    Date ajustarreajuste(Date fechareajustevieja) throws Exception {
        String fechastrreajustenuevo = "";
        Date fechareajustenueva = null;
        //10 plazo vigente

        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(fechareajustevieja);

        if (anioactual < anioreajuste) {
            return fechareajustevieja;
        }

        fechastrreajustenuevo = "01/" + devuelvemes(fechareajustevieja) + "/" + devuelveanio(new Date());

        fechareajustenueva = parsefechadate(fechastrreajustenuevo);
        //guardaralquilermesactual();
        //fechareajustenueva = inq.sumar1anio(fechareajustenueva);

        return fechareajustenueva;
    }

    Boolean sonfechasiguales(Date fechar1, Date fecha2) throws Exception {
        int compara = fechar1.compareTo(fecha2);
        if (compara == 0) {
            return true;
        }
        return false;
    }

    Boolean fecharecorridaeslaactual(Date fecharecorrida, Date fechaactualdate) throws Exception {
        int compara = fecharecorrida.compareTo(fechaactualdate);
        if (compara == 0) {
            return true;
        }
        return false;
    }

    Date sumaraniosunafecha(Date fecha, int cantidad) {
        Date nuevafecha = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.YEAR, cantidad);
        nuevafecha = cal.getTime();
        return nuevafecha;
    }

    public Date sumar4meses(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 4);
        return calendario.getTime();
    }

    Date sumar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 1);
        return calendario.getTime();
    }

    Date restar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, -1);
        return calendario.getTime();
    }

    void corregirsaldoalquiler(float total, int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(prop_id);
        gas.setInq_casa(inq_casa);
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        if (mqp >= 5 && aqp == 2020) {
            gas = buscargasenlistagastos(gas);
            if (gas != null) {
                if (gas.getEstado().equals(0)) {
                    //revisar entregas
                    total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp));
                    gas.setImporte(total);
                    if (gas.getDetalle().equals("SALDO ALQUILER")) {
                        //revisar entregas
                        gas.actualizarimporte(gas);
                    }
                }
            }
        }
    }

    Float revisarentregassaldo(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_movimiento mov = new d_movimiento();
        float montoentregas = 0f;

        montoentregas = mov.totalentregassaldo(prop_id, inq_casa, mqp, aqp);

        return montoentregas;
    }

    d_gastos_inq buscargasenlistagastos(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilermes(gas);
    }

    Integer actualizarreajustes() throws Exception {
        List<d_inquilino> listainquilinos = new ArrayList<d_inquilino>();
        d_inquilino inq = new d_inquilino();
        d_inquilino inq1 = null;
        Date fechareajusteactualizada = null;
        Integer cantidad = 0;

        listainquilinos = inq.listarinquilinos();
        for (d_inquilino aux : listainquilinos) {
            if (aux.getInq_fechaic() != null) {
                inq1 = new d_inquilino();
                inq1 = aux;
                Date primerfechaic = aux.getInq_fechaic();
                Integer anio = devuelveanio(primerfechaic);
                Integer dia = devuelvedia(primerfechaic);
                if (dia > 1) {
                    aux.setInq_fechaic(aux.sumar1mes(primerfechaic));
                    Integer anio1 = devuelveanio(aux.getInq_fechaic());
                    if (!anio1.equals(anio)) {
                        anio = anio + 1;
                        String fechaicactualizadastr = dia + "/" + devuelvemes(aux.getInq_fechaic()) + "/" + anio;
                        Date fechaicactualizada = parsefechadate(fechaicactualizadastr);
                        aux.setInq_fechaic(fechaicactualizada);
                    }
                }

                anio = anio + 1;

                String fechareajusteactualizadastr = "01/" + devuelvemes(aux.getInq_fechaic()) + "/" + anio;
                fechareajusteactualizada = parsefechadate(fechareajusteactualizadastr);
                int compara = fechareajusteactualizada.compareTo(aux.getArlmrl());
                if (compara != 0) {
                    inq1.setArlmrl(fechareajusteactualizada);
                    inq1.actualizarfechareajuste(inq1.getProp_id(), inq1.getInq_casa(), fechareajusteactualizada);
                    cantidad = cantidad + 1;
                }
            }
        }
        return cantidad;
    }

    Integer actualizarformatoci() throws Exception {
        d_grupoirpf gru = new d_grupoirpf();
        Integer cantidad = 0;
        Integer filas = 0;

        listagruposirpf = null;

        listagruposirpf = gru.listargruposirpf();
        for (d_grupoirpf aux : listagruposirpf) {
            if (aux.getCigrupo().equals("")) {
                gru.eliminargrupoirpf(aux);
                continue;
            }
            String civieja = aux.getCigrupo();
            String replace = civieja.replace(".", "").replace("-", "");
            /*if (civieja.equals(replace)) {
                continue;
            }*/
            if (!replace.matches("[0-9]*")) {
                //NO ES UN NUMERO
                JOptionPane.showMessageDialog(this, "DEBE CORREGIR DATOS \nCI ENCONTRADA: " + civieja + "\nPERTENECE A PROPIETARIO: " + aux.getProp_id(), "AVISO", JOptionPane.INFORMATION_MESSAGE);
                //throw new Exception("DEBE CORREGIR DATOS \nCI ENCONTRADA: " + civieja + "\nPERTENECE A PROPIETARIO: " + aux.getProp_id());
            }
            aux.setCigrupo(replace);
            filas = aux.actualizarcigrupo(aux, civieja);
            if (filas > 0) {
                cantidad = cantidad + 1;
            }
        }
        return cantidad;
    }

    void coincidirnombreci() throws Exception {
        d_grupoirpf gru = new d_grupoirpf();
        int cantnomdistintos = 0;
        String nombre = "";

        listagruposirpf = null;

        listagruposirpf = gru.listarcidistintas();
        for (d_grupoirpf aux : listagruposirpf) {
            cantnomdistintos = 0;
            cantnomdistintos = aux.cantnomdistintos(aux.getCigrupo());
            if (cantnomdistintos > 1) {
                nombre = aux.nombredeci(aux.getCigrupo());
                aux.actualizarnombresdeci(nombre, aux.getCigrupo());
            }
        }
    }

    Integer devuelvedia(Date fecha) {
        String formato = "dd";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Date parsefechadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu146;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu17;
    private javax.swing.JMenu jMenu18;
    private javax.swing.JMenu jMenu19;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu20;
    private javax.swing.JMenu jMenu21;
    private javax.swing.JMenu jMenu22;
    private javax.swing.JMenu jMenu23;
    private javax.swing.JMenu jMenu24;
    private javax.swing.JMenu jMenu25;
    private javax.swing.JMenu jMenu26;
    private javax.swing.JMenu jMenu27;
    private javax.swing.JMenu jMenu28;
    private javax.swing.JMenu jMenu29;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu30;
    private javax.swing.JMenu jMenu31;
    private javax.swing.JMenu jMenu32;
    private javax.swing.JMenu jMenu33;
    private javax.swing.JMenu jMenu34;
    private javax.swing.JMenu jMenu35;
    private javax.swing.JMenu jMenu36;
    private javax.swing.JMenu jMenu37;
    private javax.swing.JMenu jMenu38;
    private javax.swing.JMenu jMenu39;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu40;
    private javax.swing.JMenu jMenu41;
    private javax.swing.JMenu jMenu42;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu50;
    private javax.swing.JMenu jMenu51;
    private javax.swing.JMenu jMenu52;
    private javax.swing.JMenu jMenu530;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu82;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lbldgi;
    // End of variables declaration//GEN-END:variables

    private static SICFERespuestaPing pingSICFEEmisor(java.lang.String nomusuario, java.lang.String clave, java.lang.String tenant) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        
        return port.pingSICFEEmisor(nomusuario, clave, tenant);
    }

}
