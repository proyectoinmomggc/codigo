/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import dominio.d_alquileres_anda;
import dominio.d_cfe;
import dominio.d_clave;
import dominio.d_configuracion;
import dominio.d_gastos_inq;
import dominio.d_generarcfe;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_parametroscfe;
import dominio.d_propietario;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDataFormatter;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaEnvioCFE;
import presentacion.paneles.p_control;

/**
 *
 * @author MGiordano
 */
public final class p_pruebaexcel extends javax.swing.JFrame {

    p_control con = p_control.getInstancia();
    String inquilinossindatosensistema = "";
    String inquilinossindatosenexcel = "";
    String movimientosnodgi = "";
    String movimientoinqbloq = "";
    String fecha = "";
    String fechamov = "";
    Float totalentrada = 0f;
    Float totalsalida = 0f;
    DefaultTableModel mdltabinq = new DefaultTableModel();
    List<d_alquileres_anda> listadoenbase = new ArrayList<>();
    List<d_alquileres_anda> listadoexcel = new ArrayList<>();
    List<d_movimiento> listadonodgi = new ArrayList<>();
    List<d_movimiento> listamovimientosparadgi = new ArrayList<>();
    TableRowSorter trs;

    //int MIN = 0;
    //int MAX = 100;
    //List<d_alquileres_anda> lista = null;
    /**
     * Creates new form propretira
     */
    public p_pruebaexcel() {
        initComponents();
        setLocationRelativeTo(null);
        tblinquilinos.setModel(mdltabinq);

        mdltabinq.addColumn("ID");
        mdltabinq.addColumn("ID PROP");
        mdltabinq.addColumn("ID INQ");
        mdltabinq.addColumn("ID ANDA");
        mdltabinq.addColumn("NOMBRE");
        mdltabinq.addColumn("ENTRADA");
        mdltabinq.addColumn("SALIDA");
        con.alinear_contenido_columna_izquierda(tblinquilinos, 5);
        con.alinear_contenido_columna_izquierda(tblinquilinos, 6);
        int[] columnas_invisibles = new int[]{0};
        columnas_modo_invisible(columnas_invisibles);//COLUMNA INVISIBLE
    }

    void columnas_modo_invisible(int[] columnas_invisibles) { //COLUMNAS INVISIBLES
        for (int i = 0; i < columnas_invisibles.length; i++) {
            tblinquilinos.getColumnModel().getColumn(columnas_invisibles[i]).setMinWidth(0);
            tblinquilinos.getColumnModel().getColumn(columnas_invisibles[i]).setMaxWidth(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnarch = new javax.swing.JButton();
        lblruta = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblinquilinos = tblinquilinos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        lbltotal = new javax.swing.JLabel();
        lblmes = new javax.swing.JLabel();
        btningresar = new javax.swing.JButton();
        lbldetalle = new javax.swing.JLabel();
        pb = new javax.swing.JProgressBar();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtfiltro = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PROCESAR PAGOS DE ANDA");
        getContentPane().setLayout(null);

        btnarch.setText("IMPORTAR ARCHIVO");
        btnarch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnarchActionPerformed(evt);
            }
        });
        getContentPane().add(btnarch);
        btnarch.setBounds(430, 10, 150, 30);

        lblruta.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblruta.setText("-");
        getContentPane().add(lblruta);
        lblruta.setBounds(10, 60, 570, 15);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("PROCESANDO MES:");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 40, 200, 17);

        tblinquilinos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tblinquilinos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblinquilinosMouseClicked(evt);
            }
        });
        tblinquilinos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblinquilinosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblinquilinos);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 150, 570, 230);

        lbltotal.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbltotal.setForeground(java.awt.Color.red);
        lbltotal.setText("-");
        getContentPane().add(lbltotal);
        lbltotal.setBounds(90, 390, 330, 17);

        lblmes.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblmes.setForeground(java.awt.Color.red);
        lblmes.setText("-");
        getContentPane().add(lblmes);
        lblmes.setBounds(230, 40, 350, 17);

        btningresar.setText("INGRESAR");
        btningresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btningresarActionPerformed(evt);
            }
        });
        getContentPane().add(btningresar);
        btningresar.setBounds(430, 390, 150, 30);

        lbldetalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbldetalle.setText("-");
        getContentPane().add(lbldetalle);
        lbldetalle.setBounds(10, 440, 570, 17);

        pb.setStringPainted(true);
        getContentPane().add(pb);
        pb.setBounds(10, 460, 570, 30);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("TOTAL ($):");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 390, 80, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("FILTRO");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 90, 260, 17);

        txtfiltro.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtfiltro.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                txtfiltroAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        txtfiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfiltroActionPerformed(evt);
            }
        });
        txtfiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtfiltroKeyTyped(evt);
            }
        });
        getContentPane().add(txtfiltro);
        txtfiltro.setBounds(10, 110, 270, 30);

        jMenu1.setText("OPCIONES");
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenu3.setText("AGREGAR NUEVO INQUILINO ANDA");
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu3);

        jMenu4.setText("LISTADO DE REGISTROS INGRESADOS ANDA");
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("AYUDA");
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 615, 557);
    }// </editor-fold>//GEN-END:initComponents

    private void btnarchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnarchActionPerformed
        // TODO add your handling code here:
        d_alquileres_anda inq = null;
        d_inquilino o = new d_inquilino();
        d_inquilino y = new d_inquilino();
        Vector v;

        lblruta.setText("-");
        lblmes.setText("-");
        lbltotal.setText("-");
        inquilinossindatosensistema = "";
        inquilinossindatosenexcel = "";
        fecha = "";
        totalentrada = 0f;
        totalsalida = 0f;
        listadoenbase = null;
        listadoexcel = null;
        listadoenbase = new ArrayList();
        listadoexcel = new ArrayList();
        int contador = 0;

        try {
            cleartable();
            llenarlistadoenbase();
            HSSFWorkbook wb = new HSSFWorkbook();
            String ruta = devuelveruta();
            if (ruta.isEmpty()) {
                return;
            }

            wb = new HSSFWorkbook(new FileInputStream(ruta));
            HSSFSheet sheet = wb.getSheetAt(0);

            int rows = sheet.getLastRowNum() + 1;
            for (int i = 0; i < rows; ++i) {
                HSSFRow row = sheet.getRow(i);

                HSSFCell nombreinq = row.getCell(1);//Columna nombre1
                HSSFCell id_anda = row.getCell(2);//Columna id_anda2
                //HSSFCell priceDetalle = row.getCell(1);//Columna nombre
                HSSFCell mesarchivo = row.getCell(3);//Columna FECHA3
                //HSSFCell priceCell = row.getCell(4); //Columna precio
                //HSSFCell linkCell = row.getCell(2);

                //JOptionPane.showMessageDialog(null, priceCell, "ERROR", JOptionPane.ERROR_MESSAGE);
                double fechaarchivo = mesarchivo.getNumericCellValue();
                int parsed = (int) fechaarchivo;
                String nombreinqstring = String.valueOf(parsed);
                if ((!nombreinqstring.isEmpty() && !nombreinqstring.equals("0"))) {
                    if (fecha.equals("")) {
                        obtenerfecha(nombreinqstring);
                        lblmes.setText(fecha);
                    }
                }
                inq = existeinq(getCellData(id_anda));
                if (inq != null) {

                    y = y.buscarinquilino(inq.getProp_id(), inq.getInq_casa());
                    if (y != null) {
                        if (y.inquilino_bloqueado(y.getProp_id(), y.getInq_casa())) {
                            agregar_inq_bloqueado(y.getProp_id(), y.getInq_casa(), y.getInq_nombre());
                            continue;
                        }
                    }

                    llenarlistadoexcel(inq);
                    Float entrada = 0f;
                    float salida = 0f;
                    boolean calculoiva = false;
                    boolean calculoprima = false;
                    boolean calculoentrada = false;
                    //System.out.printf("%s\n", nombreinq.getStringCellValue());
                    for (int x = i; i < rows; ++x) {
                        HSSFRow rowx = sheet.getRow(x);
                        String detallestring = rowx.getCell(1).getStringCellValue();
                        if (calculoiva && calculoprima && calculoentrada) {
                            break;
                        }
                        if (!detallestring.equals("ALQUILER")) {
                            if (detallestring.equals("IVA POR PRIMA DE ALQUILER") || detallestring.equals("PRIMA POR ALQUILER")) {
                                HSSFCell priceCellsalida = rowx.getCell(4);
                                String salidas = (priceCellsalida.getStringCellValue());
                                salida = salida - (Float.parseFloat(salidas));
                                if (detallestring.equals("IVA POR PRIMA DE ALQUILER")) {
                                    calculoiva = true;
                                } else {
                                    calculoprima = true;
                                }
                                if (calculoiva && calculoprima) {
                                    totalsalida = totalsalida + salida;
                                }
                            }
                        } else {
                            if (!calculoentrada) {
                                HSSFCell priceCell = rowx.getCell(4);
                                String precio = (priceCell.getStringCellValue());
                                if (precio.isEmpty()) {
                                    precio = "0";
                                }
                                entrada = Float.parseFloat(precio);
                                totalentrada = totalentrada + entrada;

                                //System.out.printf("%s\n", con.mostrarnumero(preciof));
                                //break;
                                calculoentrada = true;
                            }
                        }
                    }
                    v = new Vector();
                    v.add(contador);
                    v.add(inq.getProp_id());
                    v.add(inq.getInq_casa());
                    v.add(inq.getId_anda());
                    v.add(o.buscarnombreinquilino(inq.getProp_id(), inq.getInq_casa()));
                    v.add(con.mostrarnumero(entrada));
                    v.add(con.mostrarnumero(salida));
                    mdltabinq.addRow(v);
                    contador = contador + 1;
                } else {
                    if (!nombreinq.getStringCellValue().equals("ALQUILER")
                            && !nombreinq.getStringCellValue().equals("IVA POR PRIMA DE ALQUILER")
                            && !nombreinq.getStringCellValue().equals("PRIMA POR ALQUILER")
                            && !nombreinq.getStringCellValue().equals("RETENCION POR I.R.P.F.")
                            && !nombreinq.getStringCellValue().equals("TOTAL POR CONTRATO:")
                            && !nombreinq.getStringCellValue().substring(0, 9).equals("CONST. Nº")) {
                        inquilinossindatosensistema = inquilinossindatosensistema + nombreinq.getStringCellValue() + " | " + "ID ANDA: " + getCellData(id_anda) + "\n";
                    }
                }
            }
            //System.out.printf(con.mostrarnumero(totalsalida));
            totalentrada = totalentrada - totalsalida;
            lbltotal.setText(con.mostrarnumero(totalentrada));
            mostrarinquilinosnoingresadosensistema();
            mostrarinquilinosnoingresadosenexcel();
            mostrarinquilinosbloqueados();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnarchActionPerformed

    void agregar_inq_bloqueado(Integer prop_id, Integer inq_casa, String nombre) {
        //buscarnombreinquilino
        movimientoinqbloq = movimientoinqbloq + prop_id + " - " + inq_casa + " | " + nombre + " | NO SE INGRESO POR ESTAR BLOQUEADO";
    }

    void mostrarinquilinosbloqueados() {
        if (movimientoinqbloq.equals("")) {
            return;
        }
        JTextArea textArea = new JTextArea(movimientoinqbloq);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setEditable(false);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scrollPane, "REPORTE DE INQUILINOS BLOQUEADOS",
                JOptionPane.INFORMATION_MESSAGE);
    }
    
    void llenarlistadoenbase() throws Exception {
        d_alquileres_anda inq = new d_alquileres_anda();

        listadoenbase = inq.listar_alquileres_anda();
    }

    void llenarlistadoexcel(d_alquileres_anda inq) {
        listadoexcel.add(inq);
    }

    String getCellData(HSSFCell cell) {
        String value = null;
        if (cell == null) {
            return null;
        }
        switch (cell.getCellType()) {
            case HSSFCell.CELL_TYPE_STRING:
                value = cell.getStringCellValue();
                break;
            case HSSFCell.CELL_TYPE_FORMULA:
                value = cell.getCellFormula();
                break;
            case HSSFCell.CELL_TYPE_NUMERIC:
                HSSFDataFormatter dataFormatter = new HSSFDataFormatter();
                value = dataFormatter.formatCellValue(cell);
                value = value.replace(".0", "");
                //System.out.print(value+"\n");
                break;
            case HSSFCell.CELL_TYPE_BLANK:
                value = null;
                break;
            case HSSFCell.CELL_TYPE_ERROR:
                value = "#ERROR#";
                break;
        }
        return value;
    }

    void mostrarinquilinosnoingresadosensistema() {
        if (inquilinossindatosensistema.equals("")) {
            return;
        }
        JTextArea textArea = new JTextArea(inquilinossindatosensistema);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setEditable(false);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scrollPane, "REPORTE DE INQUILINOS DEL ARCHIVO EXCEL QUE NO ESTAN INGRESADOS EN EL SISTEMA",
                JOptionPane.INFORMATION_MESSAGE);
    }

    void mostrarinquilinosnoingresadosenexcel() throws Exception {
        //inquilinossindatosensistema = inquilinossindatosensistema + nombreinq.getStringCellValue() + "\n";

        for (d_alquileres_anda aux : listadoenbase) {
            d_alquileres_anda alq = existe(aux);
            if (alq == null) {
                d_inquilino o = new d_inquilino();
                inquilinossindatosenexcel = inquilinossindatosenexcel + aux.getProp_id() + " - " + aux.getInq_casa() + " | "
                        + o.buscarnombreinquilino(aux.getProp_id(), aux.getInq_casa()) + " | " + "ID ANDA: " + aux.getId_anda() + "\n";
            }
        }

        if (inquilinossindatosenexcel.equals("")) {
            return;
        }
        JTextArea textArea = new JTextArea(inquilinossindatosenexcel);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setEditable(false);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        JOptionPane.showMessageDialog(null, scrollPane, "REPORTE DE INQUILINOS DEL SISTEMA QUE NO ESTAN INGRESADOS EN EL ARCHIVO EXCEL DE ANDA",
                JOptionPane.INFORMATION_MESSAGE);
    }

    d_alquileres_anda existe(d_alquileres_anda alq) {
        for (d_alquileres_anda aux : listadoexcel) {
            if (aux.getId_anda().equals(alq.getId_anda())) {
                return aux;
            }
        }
        return null;
    }
    private void tblinquilinosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblinquilinosMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                //String mqps = dia + tblinquilinos.getValueAt(row, 3);
                //String aqps = dia + tblinquilinos.getValueAt(row, 3);
                int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea eliminar ingreso correspondiente a " + devuelve_nombre(tblinquilinos.getSelectedRow()) + "?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    //RECORRER TODA LA TABLA Y ACTUALIZAR ID, QUEDA FUERA DE RANGO LUEGO 
                    //DE ELIMINAR VARIOS
                    actualizar_totales(tblinquilinos.getSelectedRow());
                    eliminarfila(devuelve_fila_eliminar(tblinquilinos.getSelectedRow()));
                    lbltotal.setText(con.mostrarnumero(totalentrada));
                    actualizar_id_tabla();
                }
            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(p_pruebaexcel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tblinquilinosMouseClicked

    void actualizar_totales(int fila) throws Exception {
        Float entrada, salida;
        entrada = con.guardarnumero((String) tblinquilinos.getValueAt(fila, 5));
        salida = con.guardarnumero((String) tblinquilinos.getValueAt(fila, 6));

        totalentrada = totalentrada - (entrada - salida);
    }

    String devuelve_nombre(int fila) {
        return (String) tblinquilinos.getValueAt(fila, 4);
    }

    int devuelve_fila_eliminar(int fila) {
        return (int) tblinquilinos.getValueAt(fila, 0);
    }

    void cleartable() {
        for (int i = 0; i < tblinquilinos.getRowCount(); i++) {
            mdltabinq.removeRow(i);
            i -= 1;
        }
    }

    void eliminarfila(int i) {

        mdltabinq.removeRow(i);
        //mdltabinq.fireTableDataChanged();
    }

    void actualizar_id_tabla() {
        for (int i = 0; i < tblinquilinos.getRowCount(); i++) {
            //mdltabinq.removeRow(i);
            //i -= 1;
            mdltabinq.setValueAt(i, i, 0);
        }
    }

    private void tblinquilinosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblinquilinosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblinquilinosKeyPressed

    private void btningresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btningresarActionPerformed
        d_clave cla = new d_clave();
        try {
            JPasswordField pf = new JPasswordField();
            cla = cla.buscarclave();
            int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (ax == JOptionPane.OK_OPTION) {
                String password = new String(pf.getPassword());
                if (!password.equals(cla.getClave())) {
                    JOptionPane.showMessageDialog(null, toUpperCase("CLAVE INCORRECTA"), "ERROR", JOptionPane.ERROR_MESSAGE);
                    btningresar.setEnabled(true);
                    lbldetalle.setText("-");
                    return;
                }
            } else {
                btningresar.setEnabled(true);
                lbldetalle.setText("-");
                return;
            }

            avanzado avanzando = new avanzado();
            avanzando.setBar(pb);
            Thread hilo = new Thread(avanzando);
            hilo.start();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
            btningresar.setEnabled(true);
            lbldetalle.setText("-");
            pb.setValue(0);
        }
    }//GEN-LAST:event_btningresarActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        p_agregar_inq_anda lstmov = new p_agregar_inq_anda(null, true);
        lstmov.setVisible(true);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        p_listado_inq_anda lstmov = new p_listado_inq_anda(null, true);
        lstmov.setVisible(true);
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked

    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        p_ayuda_inq_anda lstmov = new p_ayuda_inq_anda(null, true);
        lstmov.setVisible(true);
    }//GEN-LAST:event_jMenu2MouseClicked

    private void txtfiltroAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_txtfiltroAncestorAdded
        txtfiltro.requestFocus();
    }//GEN-LAST:event_txtfiltroAncestorAdded

    private void txtfiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfiltroActionPerformed

    private void txtfiltroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtfiltroKeyTyped
        txtfiltro.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                super.keyReleased(e); //To change body of generated methods, choose Tools | Templates.
                trs.setRowFilter(RowFilter.regexFilter("^" + txtfiltro.getText().toUpperCase(), 4));
            }
        });
        trs = new TableRowSorter(mdltabinq);
        tblinquilinos.setRowSorter(trs);
        actualizar_id_tabla();
    }//GEN-LAST:event_txtfiltroKeyTyped

    Boolean abonapagoentrada(int prop_id, int inq_casa, float importeentrada, float importesalida, String tipopago) throws Exception {
        d_inquilino inq = new d_inquilino();
        d_movimiento mov = new d_movimiento();
        d_movimiento movdgi = new d_movimiento();
        Date fechadate;
        int id = 0;

        inq = inq.buscarinquilino(prop_id, inq_casa);
        if (inq == null) {
            throw new Exception("no se encuentra inquilino: " + prop_id + "/" + inq_casa);
        }

        mov.setProp_id(inq.getProp_id());
        mov.setInq_casa(inq.getInq_casa());
        fechadate = parsefechadate(fechamov);
        mov.setMqp(devuelvemes(fechadate));
        mov.setAqp(devuelveanio(fechadate));

        //BUSCAR CUOTA PAGA
        d_movimiento aux = cuotapaga(mov, inq);

        if (aux != null) {
            listamovimientosparadgi.add(aux);
            return false;
        }

        mov.setDetalle("ALQUILER");
        mov.setEntrada(importeentrada);
        mov.setSalida(0f);
        mov.setComision(devuelvecomision(importeentrada, inq.getInq_por()));
        mov.setIva(devuelveiva(mov.getComision()));
        mov.setTipo(inq.getInq_nombre());
        mov.setIrpftipo(inq.getInq_irpf());
        mov.setFecha(fechaactual());
        mov.setIrpf(devuelveirpf(importeentrada, fechadate, inq.getInq_irpf()));
        mov.setTipopago(tipopago);
        id = mov.guardarmovimientoinqpaga(mov);
        if (id == 0) {
            throw new Exception("error en el sistema al guardar alquiler, intente nuevamente");
        }
        movdgi = movdgi.buscarmovimiento(id);

        con.escribirfichero("ANDA - se ingresa movimiento entrada, id: " + movdgi.getId() + " -- " + "id prop.: " + movdgi.getProp_id() + " -- " + "id inq.: " + movdgi.getInq_casa() + " -- "
                + "mqp: " + movdgi.getMqp() + " -- " + "aqp: " + movdgi.getAqp() + " -- " + "detalle: " + movdgi.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(movdgi.getEntrada()) + " -- "
                + "salida: " + con.mostrarnumero(movdgi.getSalida()) + " -- " + "comision: " + con.mostrarnumero(movdgi.getComision()) + " -- " + "iva: " + con.mostrarnumero(movdgi.getIva()) + " -- " + "tipo: " + movdgi.getTipo() + " -- "
                + "fecha: " + parsefechastring(movdgi.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(movdgi.getIrpf()) + " -- " + "irpf tipo: " + movdgi.getIrpftipo());

        listamovimientosparadgi.add(movdgi);

        abonapagosalida(prop_id, inq_casa, importesalida, tipopago);
        //ACTUALIZAR SALDO
        d_gastos_inq gas = new d_gastos_inq();
        gas.setEstado(1);
        gas.setProp_id(prop_id);
        gas.setInq_casa(inq_casa);
        gas.setMqp(mov.getMqp());
        gas.setAqp(mov.getAqp());
        gas.actualizarestadosaldo(gas);
        return true;
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    void actualizarsaldoprop(int prop_id) {
        d_propietario pro1 = null;
        Float saldo = 0f;

        try {
            pro1 = new d_propietario();
            saldo = pro1.saldototalprop(prop_id);
            pro1.actualizarsaldoprop(prop_id, saldo);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void abonapagosalida(int prop_id, int inq_casa, float importe, String tipopago) throws Exception {
        d_inquilino inq = new d_inquilino();
        d_movimiento mov = new d_movimiento();
        Date fechadate;

        inq = inq.buscarinquilino(prop_id, inq_casa);
        if (inq == null) {
            throw new Exception("no se encuentra inquilino: " + prop_id + "/" + inq_casa);
        }

        mov.setProp_id(inq.getProp_id());
        mov.setInq_casa(0);
        fechadate = parsefechadate(fechamov);
        mov.setMqp(devuelvemes(fechadate));
        mov.setAqp(devuelveanio(fechadate));
        mov.setDetalle("ANDA");
        mov.setEntrada(0f);
        mov.setSalida(importe);
        mov.setComision(0f);
        mov.setIva(0f);
        mov.setTipo("");
        mov.setIrpftipo("");
        mov.setFecha(fechaactual());
        mov.setIrpf(0f);
        mov.setTipopago(tipopago);
        mov.guardarmovimientoinqpaga(mov);

        con.escribirfichero("ANDA - se ingresa movimiento salida, id prop.: " + mov.getProp_id() + " -- " + "id inq.: " + mov.getInq_casa() + " -- "
                + "mqp: " + mov.getMqp() + " -- " + "aqp: " + mov.getAqp() + " -- " + "detalle: " + mov.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(mov.getEntrada()) + " -- "
                + "salida: " + con.mostrarnumero(mov.getSalida()) + " -- " + "comision: " + con.mostrarnumero(mov.getComision()) + " -- " + "iva: " + con.mostrarnumero(mov.getIva()) + " -- " + "tipo: " + mov.getTipo() + " -- "
                + "fecha: " + parsefechastring(mov.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(mov.getIrpf()) + " -- " + "irpf tipo: " + mov.getIrpftipo());

    }

    d_movimiento cuotapaga(d_movimiento mov, d_inquilino inq) throws Exception {
        d_movimiento mov1;
        d_gastos_inq gas;

        //mov1 = mov1.buscarcuotapaga(mov);
        mov1 = buscarmovenlistasoloalquiler(mov, "movimientos");
        //buscar en la lista de mov generada
        if (mov1 == null) {
            gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setDetalle("SALDO ALQUILER");
            gas.setAqp(mov.getAqp());
            gas.setMqp(mov.getMqp());
            gas = buscargasenlistagastos(gas);

            //buscar en la lista de gastos 
            if (gas != null) {
                if (gas.getEstado().equals(1)) {
                    //buscaralquilerpagadoconsaldo
                    //mov1 = new d_movimiento();
                    mov1 = buscaralquilerpagadoconsaldo(mov);
                    //mov1.setEntrada(gas.getImporte() + importealquilerpagadoacuenta(mov));
                    return mov1;
                    //esta pago el mes, ver la forma que devuelva el movimiento correspondiente
                    //esta devolviendo vacio, porque lo pago a traves de un saldo y no como alquiler comun
                } else {
                    return null;
                }
            }
        }
        return mov1;
    }

    d_movimiento buscarmovenlistasoloalquiler(d_movimiento mov, String tabla) throws Exception {
        return mov.buscaralquilermesoalquiler(mov, tabla);
    }

    d_gastos_inq buscargasenlistagastos(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilermes(gas);
    }

    d_movimiento buscaralquilerpagadoconsaldo(d_movimiento mov) throws Exception {
        return mov.buscarsaldoalquiler(mov);
    }

    String devuelvetipopago() throws Exception {
        /*
        int seleccion = JOptionPane.showOptionDialog(null,
                "MEDIO DE PAGO",
                "SELECCIONE UNA OPCIÓN",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"CAJA", "BANCO"}, // null para YES, NO y CANCEL
                "opcion 1");

        if (seleccion == -1) {
            throw new Exception("DEBE SELECCIONAR UNA OPCION DE PAGO");
        }

        if (seleccion == 0) {
            return "CAJA";
        }
        if (seleccion == 1) {
            return "BANCO";
        }
         */
        return "BANCO";
    }

    Float devuelveirpf(Float importe, Date fecha, String irpftipo) throws Exception {
        d_parametro par = new d_parametro();
        Float irpf = 0F;

        par = par.buscarparametroporfecha(fecha);

        if (par == null) {
            throw new Exception("inquilino retiene irpf\nerror al cargar datos de irpf, no existen datos para la fecha de pago solicitada: " + devuelvemes(fecha) + "/" + devuelveanio(fecha));
        }

        if (irpftipo.equals("OTRO") || irpftipo.equals("SI")) {
            irpf = importe * par.getIrpf() / 100;
        }

        return irpf;
    }

    Float devuelvecomision(Float importe, Float porcentaje) throws Exception {
        Float comision;

        comision = importe * porcentaje / 100;

        return comision;
    }

    Float devuelveiva(Float comision) throws Exception {
        d_parametro par = new d_parametro();
        Float iva;

        par = par.buscarparametro();

        iva = comision * par.getIva() / 100;

        return iva;
    }

    public d_alquileres_anda existeinq(String nombre) throws Exception {
        d_alquileres_anda inq = new d_alquileres_anda();

        return inq.buscar_alquiler_anda_nombre(nombre);
    }

    public String devuelveruta() throws ParseException {
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos Excel", "xls");
        fc.setFileFilter(filter);

        int respuesta = fc.showOpenDialog(this);
        if (respuesta == JFileChooser.APPROVE_OPTION) {
            //File archivoElegido = fc.getSelectedFile();
            //Mostrar el nombre del archvivo en un campo de texto
            //String ruta=fc.getSelectedFile().getAbsolutePath();
            lblruta.setText(fc.getSelectedFile().getAbsolutePath());
            //return (archivoElegido.getName());
            return (fc.getSelectedFile().getAbsolutePath());
        } else {
            return "";
        }
    }

    String obtenerfecha(String parametro) throws Exception {
        String anio = parametro.substring(0, 4);
        String mesp = parametro.substring(4, 6);

        fechamov = "";
        fechamov = "01/" + mesp + "/" + anio;

        if (mesp.equals("01")) {
            mesp = "ENERO";
        }
        if (mesp.equals("02")) {
            mesp = "FEBRERO";
        }
        if (mesp.equals("03")) {
            mesp = "MARZO";
        }
        if (mesp.equals("04")) {
            mesp = "ABRIL";
        }
        if (mesp.equals("05")) {
            mesp = "MAYO";
        }
        if (mesp.equals("06")) {
            mesp = "JUNIO";
        }
        if (mesp.equals("07")) {
            mesp = "JULIO";
        }
        if (mesp.equals("08")) {
            mesp = "AGOSTO";
        }
        if (mesp.equals("09")) {
            mesp = "SETIEMBRE";
        }
        if (mesp.equals("10")) {
            mesp = "OCTUBRE";
        }
        if (mesp.equals("11")) {
            mesp = "NOVIEMBRE";
        }
        if (mesp.equals("12")) {
            mesp = "DICIEMBRE";
        }

        fecha = mesp + " " + anio;

        return fecha;
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Date parsefechadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    Date fechaactual() throws Exception {
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy", new Locale("es_ES"));
        String fechastr = (formateador.format(new Date()));

        return parsefechadate(fechastr);
    }

    Boolean generacfe(d_movimiento mov) throws Exception {
        d_propietario prop = new d_propietario();
        d_configuracion conf = new d_configuracion();

        //SI NO TIENE ENTRADA, NO TIENE COMISION
        if (mov.getEntrada() == 0f || mov.getComision() == 0f) {
            return false;
        }

        conf = conf.buscarconfiguracion();

        if (conf.getCfe().equals("NO")) {
            throw new Exception("no está habilitada la emision de CFE en configuracion");
        }
        prop = prop.buscarpropietario(mov.getProp_id());
        String limpiastring = prop.getProp_cirut().replace(".", "").replace("-", "");
        if (!limpiastring.equals(prop.getProp_cirut())) {
            prop.setProp_cirut(limpiastring);
            prop.guardarpropietario(prop);
        }
        if (limpiastring.length() == 8) {
            //es ci - genera e-ticket 
            return (CFEeticket(mov));
        } else {
            //es rut - genera e-factura
            return (CFEefactura(mov));
        }
        //return true;
    }

    Boolean CFEeticket(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            //throw new Exception("movimiento " + mov.getId() + " ya cuenta con factura electronica");
            return true;
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlticket(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        Integer id = (mov.getId());
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                return false;
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }

        return true;
    }

    Boolean CFEefactura(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            //throw new Exception("movimiento " + mov.getId() + " ya cuenta con factura electronica");
            return true;
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlfactura(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        //Integer id = (con.obtenerMayorNumDOCCFE(111) + 1);
        Integer id = mov.getId();
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();

        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                return false;
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }

        return true;
    }

    void guardarcfe(Integer idmov, String serie, Integer numero, String rucemisor, Integer tipo, Integer observado) throws Exception {

        d_cfe cfe = new d_cfe();

        cfe.setIdmov(idmov);
        cfe.setSerie(serie);
        cfe.setNumero(numero);
        cfe.setRucemisor(rucemisor);
        cfe.setTipo(tipo);
        cfe.setObservado(observado);

        cfe.guardarcfe(cfe);
        con.escribirfichero("se crea documento dgi, movimiento: " + idmov + " -- serie: " + serie + " -- numero: " + numero + " -- ruc emisor: " + rucemisor + " -- tipo: " + tipo + " -- observado: " + observado);
    }

    private static SICFERespuestaEnvioCFE envioCFE(java.lang.String nomusuario, java.lang.String clave,
            java.lang.String tenant, java.lang.String cliente, java.lang.String cfexml, java.lang.String referenciaERP,
            java.lang.String referenciaERP2, java.lang.Boolean devolverQR, java.lang.Integer sizeQR,
            java.lang.Integer imprime, java.lang.String recurso, java.lang.String template, java.lang.Boolean devolverXML,
            java.lang.Boolean erpPideValidacion, java.lang.String version) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.envioCFE(nomusuario, clave, tenant, cliente, cfexml, referenciaERP, referenciaERP2,
                devolverQR, sizeQR, imprime, recurso, template, devolverXML, erpPideValidacion, version);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_pruebaexcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_pruebaexcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_pruebaexcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_pruebaexcel.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new p_pruebaexcel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnarch;
    private javax.swing.JButton btningresar;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbldetalle;
    private javax.swing.JLabel lblmes;
    private javax.swing.JLabel lblruta;
    private javax.swing.JLabel lbltotal;
    private javax.swing.JProgressBar pb;
    private javax.swing.JTable tblinquilinos;
    private javax.swing.JTextField txtfiltro;
    // End of variables declaration//GEN-END:variables
class avanzado implements Runnable {

        JProgressBar bar;
        int num_bar = 1;

        @Override
        public void run() {
            try {
                listadonodgi = null;
                listadonodgi = new ArrayList();
                listamovimientosparadgi = null;
                listamovimientosparadgi = new ArrayList();
                btningresar.setEnabled(false);
                lbldetalle.setText("PROCESANDO PAGOS DE ALQUILERES");
                d_inquilino inq = new d_inquilino();

                int prop_id;
                int inq_casa;
                float importeentrada;
                float importesalida;
                int x = 0;

                String tipopago = devuelvetipopago();

                int valoractual = 0;
                int totalfilas = tblinquilinos.getRowCount();

                for (int i = 0; i < tblinquilinos.getRowCount(); i++) { //Thread.sleep(100);

                    prop_id = Integer.parseInt(tblinquilinos.getValueAt(i, 1).toString());//0
                    inq_casa = Integer.parseInt(tblinquilinos.getValueAt(i, 2).toString());//1

                    /*
                    inq = inq.buscarinquilino(prop_id, inq_casa);
                    if (inq != null) {
                        if (inq.inquilino_bloqueado(prop_id, inq_casa)) {
                            agregar_inq_bloqueado(inq.getProp_id(), inq.getInq_casa(), inq.getInq_nombre());
                            return;
                        }
                    }
                     */
                    importeentrada = con.guardarnumero(((String) tblinquilinos.getValueAt(i, 5)));//4
                    importesalida = con.guardarnumero(((String) tblinquilinos.getValueAt(i, 6)));//5

                    Boolean abonaentrada = abonapagoentrada(prop_id, inq_casa, importeentrada, importesalida, tipopago);
                    if (abonaentrada) {
                        x = x + 1;
                        valoractual = (x * 100) / totalfilas;
                        this.getBar().setValue(valoractual);
                    }
                    actualizarsaldoprop(prop_id);
                }
                this.getBar().setValue(0);
                lbldetalle.setText("PROCESANDO ENVIOS A DGI");

                int cantdgi = 0;
                if (listamovimientosparadgi.size() > 0) {
                    for (d_movimiento aux : listamovimientosparadgi) {
                        if (generacfe(aux)) {
                            valoractual = (cantdgi * 100) / listamovimientosparadgi.size();
                            this.getBar().setValue(valoractual);
                            cantdgi = cantdgi + 1;
                        } else {
                            listadonodgi.add(aux);
                        }
                    }
                }

                this.getBar().setValue(100);

                JOptionPane.showMessageDialog(null, "SE INGRESARON: " + x + " PAGOS COMO 'ALQUILER' PARA LA FECHA: " + fecha, "AVISO", JOptionPane.INFORMATION_MESSAGE);
                JOptionPane.showMessageDialog(null, "SE INGRESARON: " + cantdgi + " DOCUMENTOS DGI", "AVISO", JOptionPane.INFORMATION_MESSAGE);

                if (listadonodgi.size() > 0) {
                    this.getBar().setValue(0);
                    for (d_movimiento aux : listadonodgi) {
                        movimientosnodgi = movimientosnodgi + aux.getProp_id() + " - " + aux.getInq_casa() + " | " + "MOV ID: " + aux.getId() + " | ENTRADA: " + con.mostrarnumero(aux.getEntrada())
                                + " | COMISION: " + con.mostrarnumero(aux.getComision()) + " | IVA: " + con.mostrarnumero(aux.getIva()) + "\n";
                    }
                }
                mostrarmovimientosnodgi();

                btningresar.setEnabled(true);
                lbldetalle.setText("-");
                this.getBar().setValue(0);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
                btningresar.setEnabled(true);
                lbldetalle.setText("-");
                this.getBar().setValue(0);
            }
        }

        void mostrarmovimientosnodgi() throws Exception {
            if (movimientosnodgi.equals("")) {
                return;
            }

            //JOptionPane.showMessageDialog(null, scrollPane, "REPORTE DE INQUILINOS DEL SISTEMA QUE NO ESTAN INGRESADOS EN EL ARCHIVO EXCEL DE ANDA",
            //JOptionPane.INFORMATION_MESSAGE);
            int ax = JOptionPane.showConfirmDialog(null, devuelvescrollnodgi(), "REPORTE DE ALQUILERES NO ENVIADOS A DGI\n¿DESEA REINTENTAR?", JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (ax == JOptionPane.YES_OPTION) {
                //REINTENTAR
                //valoractual = (cantdgi * 100) / listamovimientos.size();
                lbldetalle.setText("PROCESANDO NUEVAMENTE ENVIOS A DGI");
                movimientosnodgi = "";
                int y = 0;
                int valor = 0;
                this.getBar().setValue(0);
                //cantdgi = cantdgi + 1;
                for (d_movimiento aux : listadonodgi) {
                    if (generacfe(aux)) {
                        valor = (y * 100) / listadonodgi.size();
                        this.getBar().setValue(valor);
                        y = y + 1;
                    } else {
                        movimientosnodgi = movimientosnodgi + aux.getProp_id() + " - " + aux.getInq_casa() + " | " + "MOV ID: " + aux.getId() + " | ENTRADA: " + con.mostrarnumero(aux.getEntrada())
                                + " | COMISION: " + con.mostrarnumero(aux.getComision()) + " | IVA: " + con.mostrarnumero(aux.getIva()) + "\n";
                    }
                }
                this.getBar().setValue(100);
                if (!movimientosnodgi.equals("")) {
                    JOptionPane.showMessageDialog(null, devuelvescrollnodgi(), "REPORTE FINAL DE ALQUILERES NO ENVIADOS A DGI",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                btningresar.setEnabled(true);
                lbldetalle.setText("-");
                this.getBar().setValue(0);
            }
        }

        JScrollPane devuelvescrollnodgi() {
            JTextArea textArea = new JTextArea(movimientosnodgi + "\n" + movimientoinqbloq);
            JScrollPane scrollPane = new JScrollPane(textArea);
            textArea.setLineWrap(true);
            textArea.setWrapStyleWord(true);
            textArea.setEditable(false);
            scrollPane.setPreferredSize(new Dimension(500, 500));
            return scrollPane;
        }

        public void setBar(JProgressBar bar) {
            this.bar = bar;
        }

        public JProgressBar getBar() {
            return bar;
        }

    }

}
