/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_alquileres_info;
import dominio.d_gastos_inq;
import dominio.d_grupoirpf;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import java.awt.Dimension;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.xml.datatype.XMLGregorianCalendar;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;

/**
 *
 * @author Gonzalo
 */
public class p_ejecutar_funcion_mensual extends javax.swing.JDialog implements Serializable {

    Integer cant = 0;
    List<d_grupoirpf> listagruposirpf = new ArrayList<d_grupoirpf>();
    String inquilinosparaactualizar = "";
    p_control con = p_control.getInstancia();

    /**
     * Creates new form p_fichainquilino
     */
    public p_ejecutar_funcion_mensual(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnact = new javax.swing.JButton();
        pb = new javax.swing.JProgressBar();
        lbldetalle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FUNCION MENSUAL");
        getContentPane().setLayout(null);

        btnact.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnact.setText("ACTUALIZAR IMPORTES ALQUILER Y DEUDAS");
        btnact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactActionPerformed(evt);
            }
        });
        getContentPane().add(btnact);
        btnact.setBounds(10, 30, 410, 23);

        pb.setStringPainted(true);
        getContentPane().add(pb);
        pb.setBounds(10, 60, 410, 30);

        lbldetalle.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        getContentPane().add(lbldetalle);
        lbldetalle.setBounds(10, 100, 410, 30);

        setBounds(0, 0, 444, 181);
    }// </editor-fold>//GEN-END:initComponents

    private void btnactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactActionPerformed
        try {
            int ax = JOptionPane.showConfirmDialog(null, toUpperCase("ACTUALIZAR IMPORTES DE ALQUILER Y DEUDAS\nÂ¿desea ejecutar la funcion?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax != JOptionPane.YES_OPTION) {
                return;
            }

            avanzado avanzando = new avanzado();
            avanzando.setBar(pb);
            Thread hilo = new Thread(avanzando);
            hilo.start();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
            btnact.setEnabled(true);
            pb.setValue(0);
        }
    }//GEN-LAST:event_btnactActionPerformed

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Date parsefechadategre(XMLGregorianCalendar xmlCalendar) throws Exception {
        Date date = xmlCalendar.toGregorianCalendar().getTime();
        return date;
    }

    void guardamesactualcomogasto(d_inquilino inq) throws Exception {
        d_movimiento aux = new d_movimiento();
        //float importe = 0f;
        int mqplistado = -1;
        int aqplistado = -1;

        //aux = new d_movimiento();
        aux.setProp_id(inq.getProp_id());
        aux.setInq_casa(inq.getInq_casa());
        aux.setMqp(devuelvemes(new Date()));
        aux.setAqp(devuelveanio(new Date()));
        mqplistado = aux.getMqp();
        aqplistado = aux.getAqp();

        String fecha = "01/" + mqplistado + "/" + aqplistado;
        Date fechad = parsefechadate(fecha);
        if (estafechaesantesdeempezarcontrato(fechad, inq)) {
            return;
        }

        aux = cuotapaga(aux, inq);
        if (aux != null) {
            return;
        }

        d_gastos_inq gas = estemestienesaldo(inq, mqplistado, aqplistado);
        if (gas != null) {
            return;
        }

        guardaralquilermesactual(inq, mqplistado, aqplistado);
        //obtenerlistadogastospendientesinq();
    }

    void guardaralquilermesactual(d_inquilino inq, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        d_gastos_inq aux = new d_gastos_inq();

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(mqp);
        gas.setAqp(aqp);
        gas.setEstado(0);
        gas.setDetalle("SALDO ALQUILER");
        gas.setImporte(inq.getInq_impalq_aux()); //09-07 cambio, estaba: Inq_impalq

        //chequearcuotapaga-revisar
        aux = aux.buscaralquilermes(gas);
        if (aux != null) {
            if (aux.getEstado().equals(1) && aux.getImporte().equals(inq.getInq_impalq())) {
                d_movimiento mov1 = new d_movimiento();
                mov1.setProp_id(inq.getProp_id());
                mov1.setInq_casa(inq.getInq_casa());
                mov1.setMqp(gas.getMqp());
                mov1.setAqp(gas.getAqp());
                mov1.actualizardetalle(mov1);
                //listamovimientos();
            } else {
                //CHEQUEAR QUE REAJUSTE ESTE MES
                aux.setImporte(inq.getInq_impalq());
                gas.setDetalle("ALQUILER");//22-11
                if (aux.getImporte() <= 0f) {
                    return;
                }
                gas.guardargastoinq(aux);
                cant += 1;
            }
        } else {
            //CHEQUEAR QUE REAJUSTE ESTE MES
            gas.setDetalle("ALQUILER");//22-11
            if (gas.getImporte() <= 0f) {
                return;
            }
            gas.guardargastoinq(gas);
            cant += 1;
        }
    }

    Boolean estafechaesantesdeempezarcontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaesantesdeempezarcontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(inq.getInq_fechaic());
        anioactual = devuelveanio(inq.getInq_fechaic());

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == -1) {
            return true;
        }
        return estafechaesantesdeempezarcontrato;
    }

    d_movimiento cuotapaga(d_movimiento mov, d_inquilino inq) throws Exception {
        d_movimiento mov1;
        d_gastos_inq gas;

        //mov1 = mov1.buscarcuotapaga(mov);
        mov1 = buscarmovenlistasoloalquiler(mov, "movimientos");
        //buscar en la lista de mov generada
        if (mov1 == null) {
            gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setDetalle("SALDO ALQUILER");
            gas.setAqp(mov.getAqp());
            gas.setMqp(mov.getMqp());
            gas = buscargasenlistagastos(gas);

            //buscar en la lista de gastos 
            if (gas != null) {
                if (gas.getEstado().equals(1)) {
                    //buscaralquilerpagadoconsaldo
                    //mov1 = new d_movimiento();
                    mov1 = buscaralquilerpagadoconsaldo(mov);
                    //mov1.setEntrada(gas.getImporte() + importealquilerpagadoacuenta(mov));
                    return mov1;
                    //esta pago el mes, ver la forma que devuelva el movimiento correspondiente
                    //esta devolviendo vacio, porque lo pago a traves de un saldo y no como alquiler comun
                } else {
                    return null;
                }
            }
        }
        return mov1;
    }

    d_movimiento buscaralquilerpagadoconsaldo(d_movimiento mov) throws Exception {
        return mov.buscarsaldoalquiler(mov);
    }

    d_movimiento buscarmovenlistasoloalquiler(d_movimiento mov, String tabla) throws Exception {
        return mov.buscaralquilermesoalquiler(mov, tabla);
    }

    d_gastos_inq buscargasenlistagastosalquilerdias(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilerdias(gas);
    }

    d_gastos_inq estemestienesaldo(d_inquilino inq, int mqp, int aqp) throws Exception {
        //inq = inq.buscarinquilino(inq.getProp_id(), inq.getInq_casa());
        d_gastos_inq gas = new d_gastos_inq();
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        gas = buscargasenlistagastos(gas);

        if (gas != null) {
            if (gas.getEstado().equals(0)) {
                //gas.setImporte(inq.getInq_impalq_aux() - (revisarentregassaldo(inq.getProp_id(), inq.getInq_casa(), mqp, aqp)));
                //BUSCAR SI NO TIENE ALGUN ENTREGA DE SALDO
                //OPCION -> AL NUEVO IMPORTE RESTARLE ENTREGAS A CUENTA ALQUILER

                gas.actualizarimporte(gas);
                return gas;

            }
        } else {
            //SI EMPIEZA ESTE MES EL CONTRATO Y TIENE UN ALQUILER DIAS, NO GENERAR SALDO ALQUILER
            if (estafechaempiezacontrato(parsefechadate("01/" + mqp + "/" + aqp), inq)) {
                gas = new d_gastos_inq();
                gas.setProp_id(inq.getProp_id());
                gas.setInq_casa(inq.getInq_casa());
                gas.setDetalle("ALQUILER DIAS");
                gas.setAqp(aqp);
                gas.setMqp(mqp);
                gas = buscargasenlistagastosalquilerdias(gas);
                if (gas != null) {
                    return gas;
                }
            }
        }
        return null;
    }

    Boolean estafechaempiezacontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaempiezacontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(inq.getInq_fechaic());
        anioactual = devuelveanio(inq.getInq_fechaic());

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == 0) {
            return true;
        }
        return estafechaempiezacontrato;
    }

    void reiniciarimpalquiler() throws Exception {
        d_inquilino inq = new d_inquilino();

        inq.reiniciarimpalquilergeneral();
    }

    Boolean reajustaesteanio(d_inquilino inq) throws Exception {
        Date ajustereajustado;
        int anioactual = devuelveanio(new Date());
        int anioreajuste;

        ajustereajustado = (ajustarreajuste(inq.getArlmrl()));
        anioreajuste = devuelveanio(ajustereajustado);

        inq.setArlmrl(ajustereajustado);

        return anioreajuste == anioactual;
    }

    void actualizarimportealquilerhabitacion(d_inquilino inq) throws Exception {
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        int anioactual;
        int anioic;
        float axreajustediv = 0f;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Date fechareajustecomun = inq.getArlmrl();
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);
        Boolean importeingresado = false;
        Boolean esCN = false;

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            fechareajustecomun = fechareajusteanual;
        } //else {
        //ingresarimporteamano(inq);
        //}

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
            if (alq.getDetalle().equals("CN")) {
                esCN = true;
                mov = null;
            }
        }

        if (mov == null && !importeingresado) {
            ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        if (alq != null && esCN && mov == null) {
            fecharecorridadate = alq.getFecha();
            fechareajustecomun = sumar4meses(fecharecorridadate);//CHEQUEAR QUE ESTA FECHA NO SEA ANTES DE FECHA INICIO DE CONTRATO
            fechareajusteanual = sumaraniosunafecha(fecharecorridadate, 1); //(15-06)NO SE LE SUMA 1 MES, PORQUE GUARDA MES DE REAJUSTE DIRECTO - DEBERIA SUMAR 1 AÃO
            par = par.buscarparametroporfecha(fecharecorridadate);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fecharecorridadate) + "/" + devuelveanio(fecharecorridadate));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
        }
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = total * par.getProcaumento() / 100;
                axreajustediv = axreajustediv / 3;
                total += (axreajustediv);
                fechareajustecomun = sumar4meses(fechareajustecomun);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
                if (!estafechaestadentrodelperiodonoreajustable(fecharecorridadate, inq.getInq_fechaic())) {
                    total += (axreajustediv);
                }
                fechareajustecomun = sumar4meses(fechareajustecomun);
            }
            if (esCN) {
                if (alq != null) {
                    if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                        total = alq.getImporte();
                    }
                }
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }

        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
            total += (axreajustediv);
        } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
            total += (axreajustediv);
        }
        if (esCN) {
            if (alq != null) {
                if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                    total = alq.getImporte();
                }
            }
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    Boolean estafechaestadentrodelperiodonoreajustable(Date fecha_recibida, Date fecha_inicio_contrato) {
        //PERIODO = 1 AÃO
        Date fecha_fin_periodo = sumaraniosunafecha(fecha_inicio_contrato, 1);

        int compara_fecha_inicio = fecha_recibida.compareTo(fecha_inicio_contrato);
        int compara_fecha_fin = fecha_recibida.compareTo(fecha_fin_periodo);

        if (compara_fecha_inicio >= 0 && compara_fecha_fin <= 0) {
            //FECHA RECIBIDA ESTA DENTRO DEL PERIODO NO REAJUSTABLE
            return true;
        }

        return false;
    }

    void actualizarimportealquilerlocal(d_inquilino inq) throws Exception {
        int anioactual;
        int anioic;
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        float axreajustediv;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Boolean importeingresado = false;
        Boolean esCN = false;

        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            //NUEVA FECHA REAJUSTE
            inq.setArlmrl(fechareajusteanual);
            //inq.setArlmrl(chequearreajusteanteriorafechaactualsololocales(inq.getArlmrl()));
            //fechareajusteanual = inq.getArlmrl();
        } //else {
        //ingresarimporteamano(inq);
        //}

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
            if (alq.getDetalle().equals("CN")) {
                esCN = true;
                mov = null;
            }
        }

        if (mov == null && !importeingresado) {
            ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        //A VECES LLEGA fecharecorridadate >(MAYOR) fechaactualdate     
        if (alq != null && esCN && mov == null) {
            fecharecorridadate = alq.getFecha();
            fechareajusteanual = fecharecorridadate; //NO SE LE SUMA 1 MES, PORQUE GUARDA MES DE REAJUSTE DIRECTO
        }
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = par.getProcaumento();
                total += (total * axreajustediv / 100);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            }
            if (esCN) {
                if (alq != null) {
                    if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                        total = alq.getImporte();
                    }
                }
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }
        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = par.getProcaumento();
            total += (total * axreajustediv / 100);
        }
        if (esCN) {
            if (alq != null) {
                if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                    total = alq.getImporte();
                }
            }
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    void ingresarimporteamano(d_inquilino inq) throws Exception {
        //TENER EN CUENTA:
        //LOS NUEVOS QUE ENTRARON EL AÃO NO PASADO NO DEBERIAN ESTAR
        //IMPORTE ALQUILER 0 -> SI
        String fecharecorrida = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);
        fecharecorridadate = sumaraniosunafecha(fecharecorridadate, -1);

        if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecharecorridadate)) {
            return;
        }
        Date fecha;
        fecha = restar1mes(inq.getArlmrl());
        inquilinosparaactualizar = inquilinosparaactualizar + inq.getProp_id() + "-" + inq.getInq_casa() + " - " + inq.getInq_tipoalq() + " - " + "REVISAR PAGOS DE: " + mes(devuelvemes(fecha).toString()) + "\n";
    }

    String mes(String fecha) {
        String mes = "";

        if (fecha.equals("1")) {
            mes = "ENERO";
            return mes;
        }
        if (fecha.equals("2")) {
            mes = "FEBRERO";
            return mes;
        }
        if (fecha.equals("3")) {
            mes = "MARZO";
            return mes;
        }
        if (fecha.equals("4")) {
            mes = "ABRIL";
            return mes;
        }
        if (fecha.equals("5")) {
            mes = "MAYO";
            return mes;
        }
        if (fecha.equals("6")) {
            mes = "JUNIO";
            return mes;
        }
        if (fecha.equals("7")) {
            mes = "JULIO";
            return mes;
        }
        if (fecha.equals("8")) {
            mes = "AGOSTO";
            return mes;
        }
        if (fecha.equals("9")) {
            mes = "SETIEMBRE";
            return mes;
        }
        if (fecha.equals("10")) {
            mes = "OCTUBRE";
            return mes;
        }
        if (fecha.equals("11")) {
            mes = "NOVIEMBRE";
            return mes;
        }
        if (fecha.equals("12")) {
            mes = "DICIEMBRE";
            return mes;
        }

        return mes;
    }

    Date chequearreajusteanteriorafechaactualsololocales(Date fechareajusteactualizada) throws Exception {
        String fechastractual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechareaactual;

        fechareaactual = parsefechadate(fechastractual);

        int compara = fechareajusteactualizada.compareTo(fechareaactual);

        if (compara == -1) {
            fechareajusteactualizada = sumaraniosunafecha(fechareajusteactualizada, 1);
        }

        return fechareajusteactualizada;
    }

    d_movimiento buscarultimoimporteantesdelreajuste(d_inquilino inq) throws Exception {
        d_movimiento mov = null;
        Date fecha;
        int i = 0;
        //si es movimientosviejos buscar el aÃ±o anterior (2019 y aÃ±os anteriores)
        String tabla = "movimientosviejos";

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactuald = parsefechadate(fechaactual);

        fecha = restar1mes(inq.getArlmrl());

        //A VECES LA FECHA DE REAJUSTE ES MAYOR A LA FECHA ACTUAL
        //NOS ASEGURAMOS DE QUE BUSQUE MOVIMIENTOS PREVIOS A LA FECHA ACTUAL
        while (fecha.compareTo(fechaactuald) == 1) {
            fecha = sumaraniosunafecha(fecha, -1);
        }

        while (mov == null && i < 10) {
            //tabla = "movimientosviejos";//tabla = "movimientosviejos";
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                mov = null;
                break;
            }
            mov = new d_movimiento();
            mov.setProp_id(inq.getProp_id());
            mov.setInq_casa(inq.getInq_casa());
            int aqp = devuelveanio(fecha);
            if (aqp == 2020) {
                aqp = aqp - 1;
                fecha = sumaraniosunafecha(fecha, -1);
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    mov = null;
                    break;
                }
            }
            mov.setAqp(aqp);
            mov.setMqp(devuelvemes(fecha));
            mov = mov.buscaralquilermesoalquiler(mov, tabla);
            //buscarcuotapaga
            if (mov == null) {
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(aqp);
                mov.setMqp(devuelvemes(fecha));
                mov = cuotapaga(mov, inq);
            }
            fecha = sumaraniosunafecha(fecha, -1);
            i = i + 1;
        }

        fecha = restar1mes(inq.getArlmrl());

        while (fecha.compareTo(fechaactuald) == 1) {
            fecha = sumaraniosunafecha(fecha, -1);
        }

        if (mov == null) {
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                return null;
            }
            //fecha = restar1mes(inq.getArlmrl());
            tabla = "movimientos";//tabla = "movimientosviejos";
            while (mov == null && i < 10) {
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    return null;
                }
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(devuelveanio(fecha));
                mov.setMqp(devuelvemes(fecha));
                mov = mov.buscaralquilermesoalquiler(mov, tabla);
                //buscarcuotapaga
                if (mov == null) {
                    mov = new d_movimiento();
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    mov.setAqp(devuelveanio(fecha));
                    mov.setMqp(devuelvemes(fecha));
                    mov = cuotapaga(mov, inq);
                }
                fecha = sumaraniosunafecha(fecha, -1);
                i = i + 1;
            }
        }
        return mov;
    }

    Boolean fechaesanterioracomienzodecontrato(Date fechaic, Date fecha) {
        int i = fechaic.compareTo(fecha);
        if (i == -1) {
            return false;
        }
        return true;
    }

    Date ajustarreajuste(Date fechareajustevieja) throws Exception {
        String fechastrreajustenuevo = "";
        Date fechareajustenueva = null;
        //10 plazo vigente

        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(fechareajustevieja);

        if (anioactual < anioreajuste) {
            return fechareajustevieja;
        }

        fechastrreajustenuevo = "01/" + devuelvemes(fechareajustevieja) + "/" + devuelveanio(new Date());

        fechareajustenueva = parsefechadate(fechastrreajustenuevo);
        //guardaralquilermesactual();
        //fechareajustenueva = inq.sumar1anio(fechareajustenueva);

        return fechareajustenueva;
    }

    Boolean sonfechasiguales(Date fechar1, Date fecha2) throws Exception {
        int compara = fechar1.compareTo(fecha2);
        if (compara == 0) {
            return true;
        }
        return false;
    }

    Boolean fecharecorridaeslaactual(Date fecharecorrida, Date fechaactualdate) throws Exception {
        int compara = fecharecorrida.compareTo(fechaactualdate);
        if (compara == 0) {
            return true;
        }
        return false;
    }

    Date sumaraniosunafecha(Date fecha, int cantidad) {
        Date nuevafecha = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.YEAR, cantidad);
        nuevafecha = cal.getTime();
        return nuevafecha;
    }

    public Date sumar4meses(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 4);
        return calendario.getTime();
    }

    Date sumar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 1);
        return calendario.getTime();
    }

    Date restar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, -1);
        return calendario.getTime();
    }

    void corregirsaldoalquiler(float total, int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(prop_id);
        gas.setInq_casa(inq_casa);
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        if ((mqp >= 5 && aqp == 2020) || (aqp > 2020)) {
            gas = buscargasenlistagastos(gas);
            if (gas != null) {
                if (gas.getEstado().equals(0)) {
                    //revisar entregas
                    //revisar entregas
                    total = gas.getImporte();
                    //total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp)); se saco 29/10/23
                    gas.setImporte(total);
                    if (gas.getDetalle().equals("SALDO ALQUILER")
                            || gas.getDetalle().equals("ALQUILER")
                            || gas.getDetalle().equals("ALQUILER MES")
                            || gas.getDetalle().equals("SALDO ALQUILER DIAS")) {
                        //revisar entregas
                        gas.actualizarimporte(gas);
                    }
                }
            } else { //29-04
                //BUSCAR EN MOVIMIENTOS
                //ESTA RECORRIENDO LA FUNCION MENSUAL, SI NO ENCUENTRA TENDRIA QUE INGRESAR UN GASTO TIPO 'alquiler' CON ESA FECHA
                d_movimiento x = new d_movimiento();
                x.setProp_id(prop_id);
                x.setInq_casa(inq_casa);
                x.setAqp(aqp);
                x.setMqp(mqp);
                x = buscarmovenlistasoloalquiler(x, "movimientos");
                if (x == null) {
                    x = new d_movimiento();
                    x.setProp_id(prop_id);
                    x.setInq_casa(inq_casa);
                    x.setAqp(aqp);
                    x.setMqp(mqp);
                    x = buscarmovenlistasoloalquiler(x, "movimientosviejos");
                    if (x == null) {
                        //CHEQUEAR QUE NO SEA MES Y AÃO ACTUAL
                        if (!es_mes_y_anio_actual(mqp, aqp)) {
                            //CHEQUEAR FECHA RECORRIDA SEA POSTERIOR A INICIO CONTRATO
                            if (!es_anterior_a_inicio_contrato(prop_id, inq_casa, mqp, aqp)) {
                                gas = new d_gastos_inq();
                                gas.setProp_id(prop_id);
                                gas.setInq_casa(inq_casa);
                                gas.setDetalle("SALDO ALQUILER");
                                gas.setAqp(aqp);
                                gas.setMqp(mqp);
                                gas.setImporte(total);
                                gas.setEstado(0);
                                d_gastos_inq gas_1 = new d_gastos_inq();
                                gas_1 = gas;
                                gas_1 = gas_1.buscargastoalquiler(gas_1);
                                if (gas_1 == null) {
                                    total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp));
                                    gas.setImporte(total);
                                    if (total > 10f) {
                                        gas.guardargastoinq(gas);
                                        con.escribirfichero("SE INGRESA 'ALQUILER' DESDE FUNCION MENSUAL - id prop.: " + gas.getProp_id() + " -- " + "id inq.: " + gas.getInq_casa() + " -- "
                                                + "mqp: " + gas.getMqp() + " -- " + "aqp: " + gas.getAqp() + " -- " + "detalle: " + gas.getDetalle() + " -- " + "total: " + con.mostrarnumero(gas.getImporte()));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Boolean es_anterior_a_inicio_contrato(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_inquilino i = new d_inquilino();
        Date fecha_ic = i.devuelve_fecha_ic(prop_id, inq_casa);
        String fecha_ic_string = "01/" + devuelvemes(fecha_ic) + "/" + devuelveanio(fecha_ic);
        fecha_ic = parsefechadate(fecha_ic_string);
        String fecha_listado_string = "01/" + mqp + "/" + aqp;
        Date fecha_listado = parsefechadate(fecha_listado_string);
        return fechaesanterioracomienzodecontrato(fecha_ic, fecha_listado);
    }

    Boolean es_mes_y_anio_actual(int mqp, int aqp) {
        int mes_actual = devuelvemes(new Date());
        int anio_actual = devuelveanio(new Date());

        if (mqp == mes_actual && aqp == anio_actual) {
            return true;
        }
        return false;
    }

    Float revisarentregassaldo(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_movimiento mov = new d_movimiento();
        float montoentregas = 0f;

        montoentregas = mov.totalentregassaldo(prop_id, inq_casa, mqp, aqp);

        return montoentregas;
    }

    d_gastos_inq buscargasenlistagastos(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilermes(gas);
    }

    Integer actualizarreajustes() throws Exception {
        List<d_inquilino> listainquilinos = new ArrayList<d_inquilino>();
        d_inquilino inq = new d_inquilino();
        d_inquilino inq1 = null;
        Date fechareajusteactualizada = null;
        Integer cantidad = 0;

        listainquilinos = inq.listarinquilinos();
        for (d_inquilino aux : listainquilinos) {
            if (aux.getInq_fechaic() != null) {
                inq1 = new d_inquilino();
                inq1 = aux;
                Date primerfechaic = aux.getInq_fechaic();
                Integer anio = devuelveanio(primerfechaic);
                Integer dia = devuelvedia(primerfechaic);
                if (dia > 1) {
                    aux.setInq_fechaic(aux.sumar1mes(primerfechaic));
                    Integer anio1 = devuelveanio(aux.getInq_fechaic());
                    if (!anio1.equals(anio)) {
                        anio = anio + 1;
                        String fechaicactualizadastr = dia + "/" + devuelvemes(aux.getInq_fechaic()) + "/" + anio;
                        Date fechaicactualizada = parsefechadate(fechaicactualizadastr);
                        aux.setInq_fechaic(fechaicactualizada);
                    }
                }

                anio = anio + 1;

                String fechareajusteactualizadastr = "01/" + devuelvemes(aux.getInq_fechaic()) + "/" + anio;
                fechareajusteactualizada = parsefechadate(fechareajusteactualizadastr);
                int compara = fechareajusteactualizada.compareTo(aux.getArlmrl());
                if (compara != 0) {
                    inq1.setArlmrl(fechareajusteactualizada);
                    inq1.actualizarfechareajuste(inq1.getProp_id(), inq1.getInq_casa(), fechareajusteactualizada);
                    cantidad = cantidad + 1;
                }
            }
        }
        return cantidad;
    }

    Integer devuelvedia(Date fecha) {
        String formato = "dd";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Date parsefechadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de aÃ±o");
        }
        return fechaDate;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_ejecutar_funcion_mensual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_ejecutar_funcion_mensual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_ejecutar_funcion_mensual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_ejecutar_funcion_mensual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_ejecutar_funcion_mensual dialog = new p_ejecutar_funcion_mensual(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnact;
    private javax.swing.JLabel lbldetalle;
    private javax.swing.JProgressBar pb;
    // End of variables declaration//GEN-END:variables
class avanzado implements Runnable {

        JProgressBar bar;
        int num_bar = 1;

        @Override
        public void run() {
            try {
                p_control con = p_control.getInstancia();
                inquilinosparaactualizar = "";
                btnact.setEnabled(false);
                lbldetalle.setText("PROCESANDO IMPORTES DE ALQUILERES");
                List<d_inquilino> listainquilinos = new ArrayList<>();
                d_gastos_inq elim = new d_gastos_inq();
                d_inquilino inq = new d_inquilino();
                d_movimiento movx = new d_movimiento();
                int cantmov = 0;
                int valoractual = 0;
                int x = 0;
                cant = 0;
                //QUIZAS NO ERA EL PROBLEMA LA FUNCION REINICIAR IMPORTES
                reiniciarimpalquiler();
                listainquilinos = inq.listarinquilinoscompleto();
                //int cant = 0;
                for (d_inquilino aux : listainquilinos) {
                    cantmov = movx.cantmovimientos(aux.getProp_id(), aux.getInq_casa());
                    if (cantmov == 0) {
                        continue;
                    }
                    con.actualizar_deuda_inq(aux);
                    //Thread.sleep(100);               
                    if (aux.getInq_tipoalq().equals("HABITACION")) {
                        actualizarimportealquilerhabitacion(aux);
                    }
                    if (aux.getInq_tipoalq().equals("LOCAL")) {
                        actualizarimportealquilerlocal(aux);
                    }
                    valoractual = (x * 100) / listainquilinos.size();
                    this.getBar().setValue(valoractual);
                    x = x + 1;
                }
                //actualizardeudamesactual();

                lbldetalle.setText("INGRESANDO MESES DE PAGO DE ALQUILERES");
                this.getBar().setValue(0);
                listainquilinos = inq.listarinquilinoscompleto();
                x = 0;
                for (d_inquilino aux : listainquilinos) {
                    //Thread.sleep(100);
                    if (aux.getInq_impalq() == 0) {
                        continue;
                    }
                    guardamesactualcomogasto(aux);
                    valoractual = (cant * 100) / listainquilinos.size();
                    this.getBar().setValue(valoractual);
                    x = x + 1;
                }
                this.getBar().setValue(100);
                elim.eliminargastossinimporte();
                JOptionPane.showMessageDialog(null, "SE INGRESARON: " + cant + " REGISTROS COMO 'ALQUILER' PARA TODOS LOS INQUILINOS EN EL MES ACTUAL", "AVISO", JOptionPane.INFORMATION_MESSAGE);//22-11
                if (!inquilinosparaactualizar.equals("")) {
                    inquilinosparaactualizar = inquilinosparaactualizar + "\nSE SUGIERE REVISAR LOS MESES DE PAGO DETALLADOS EN CADA INQUILINO";
                    //JOptionPane.showMessageDialog(this, "REPORTE DE INQUILINOS QUE NO FUERON ACTUALIZADOS SUS IMPORTES:\n" + inquilinosparaactualizar, "AVISO", JOptionPane.INFORMATION_MESSAGE);
                    JTextArea textArea = new JTextArea(inquilinosparaactualizar);
                    JScrollPane scrollPane = new JScrollPane(textArea);
                    textArea.setLineWrap(true);
                    textArea.setWrapStyleWord(true);
                    textArea.setEditable(false);
                    scrollPane.setPreferredSize(new Dimension(500, 500));
                    JOptionPane.showMessageDialog(null, scrollPane, "REPORTE DE INQUILINOS QUE NO FUERON ACTUALIZADOS CORRECTAMENTE",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                JOptionPane.showMessageDialog(null, "TRABAJO FINALIZADO", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                con.escribirfichero("FUNCION MENSUAL EJECUTADA");
                lbldetalle.setText("TRABAJO FINALIZADO");
                this.getBar().setValue(0);
                btnact.setEnabled(true);
                //PREGUNTA
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
                lbldetalle.setText("");
                this.getBar().setValue(0);
                btnact.setEnabled(true);
            }
        }

        public void setBar(JProgressBar bar) {
            this.bar = bar;
        }

        public JProgressBar getBar() {
            return bar;
        }
    }
}
