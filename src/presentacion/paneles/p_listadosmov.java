/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfImportedPage;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfWriter;
import dominio.d_cfe;
import dominio.d_clave;
import dominio.d_configuracion;
import dominio.d_movimiento;
import dominio.d_parametroscfe;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import presentacion.p_fichamantenimiento;
import interfaces.observador_mov;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JPasswordField;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.xml.bind.JAXBElement;
import javax.xml.namespace.QName;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaBuffer;
import persistencia.p_conexion;
import presentacion.paneles.p_caja;

/**
 *
 * @author Gonzalo
 */
public class p_listadosmov extends javax.swing.JDialog implements observador_mov {

    DefaultTableModel mdltabmov = new DefaultTableModel();
    List<d_movimiento> listamovimientos = new ArrayList<d_movimiento>();
    Float entrada = 0F;
    Float salida = 0F;
    Float iva = 0F;
    Float comision = 0F;
    Float irpf = 0F;
    Float gastos = 0F;
    String tipo = "";
    int numcopias = 0;
    JFileChooser file = new JFileChooser();
    File guarda;
    FileOutputStream fos;
    String nombrearch = "";
    List<SICFERespuestaBuffer> listapdf = new ArrayList<SICFERespuestaBuffer>();
      
       
    /**
     * Creates new form p_listado_mov
     */
    public p_listadosmov(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        p_control c = p_control.getInstancia();
        tblmovimientos.setModel(mdltabmov);

        mdltabmov.addColumn("ID");
        mdltabmov.addColumn("FECHA");
        mdltabmov.addColumn("NOMBRE");
        mdltabmov.addColumn("ID PROP");
        mdltabmov.addColumn("ID INQ.");
        mdltabmov.addColumn("MES");
        mdltabmov.addColumn("AÃ‘O");
        mdltabmov.addColumn("DETALLE");
        mdltabmov.addColumn("ENTRADA");
        mdltabmov.addColumn("SALIDA");
        mdltabmov.addColumn("COMISION");
        mdltabmov.addColumn("IVA");
        mdltabmov.addColumn("IRPF");
        
        c.alinear_contenido_columna_izquierda(tblmovimientos, 8);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 9);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 10);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 11);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 12);
        
        cargarfecha();
        //cargarmovimientos();
        cargarobservador();
    }
        
    void cargarfecha() {
        jdcfecha1.setDateFormatString("dd/MM/yyyy");
        jdcfecha2.setDateFormatString("dd/MM/yyyy");
        jdcfecha1.setDate(new Date());
        jdcfecha2.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblmovimientos = tblmovimientos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtentrada = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtsalida = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtiva = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtcomision = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtirpf = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtgastos = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtsumar = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jdcfecha1 = new com.toedter.calendar.JDateChooser();
        jdcfecha2 = new com.toedter.calendar.JDateChooser();
        jButton4 = new javax.swing.JButton();
        cmbreporte = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("DIARIO");
        setModalityType(null);
        getContentPane().setLayout(null);

        tblmovimientos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tblmovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmovimientosMouseClicked(evt);
            }
        });
        tblmovimientos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblmovimientosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblmovimientos);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 130, 1181, 245);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("DESDE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 100, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("REPORTE");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 70, 140, 17);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("FILTRAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(360, 40, 120, 30);

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("EXPORTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(1070, 380, 120, 30);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ENTRADA");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 380, 140, 17);

        txtentrada.setEditable(false);
        txtentrada.setBackground(java.awt.Color.green);
        txtentrada.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtentrada.setText("0");
        getContentPane().add(txtentrada);
        txtentrada.setBounds(10, 400, 260, 30);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("SALIDA");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 440, 130, 17);

        txtsalida.setEditable(false);
        txtsalida.setBackground(java.awt.Color.green);
        txtsalida.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtsalida.setText("0");
        getContentPane().add(txtsalida);
        txtsalida.setBounds(10, 460, 260, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("IVA");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(280, 380, 80, 17);

        txtiva.setEditable(false);
        txtiva.setBackground(java.awt.Color.green);
        txtiva.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtiva.setText("0");
        getContentPane().add(txtiva);
        txtiva.setBounds(280, 400, 260, 30);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("COMISION");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(280, 440, 150, 17);

        txtcomision.setEditable(false);
        txtcomision.setBackground(java.awt.Color.green);
        txtcomision.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtcomision.setText("0");
        getContentPane().add(txtcomision);
        txtcomision.setBounds(280, 460, 260, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("IRPF RETENIDO");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(550, 380, 170, 17);

        txtirpf.setEditable(false);
        txtirpf.setBackground(java.awt.Color.green);
        txtirpf.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtirpf.setText("0");
        txtirpf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtirpfActionPerformed(evt);
            }
        });
        getContentPane().add(txtirpf);
        txtirpf.setBounds(550, 400, 260, 30);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("GASTOS INMO");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(550, 440, 160, 17);

        txtgastos.setEditable(false);
        txtgastos.setBackground(java.awt.Color.green);
        txtgastos.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        txtgastos.setText("0");
        getContentPane().add(txtgastos);
        txtgastos.setBounds(550, 460, 260, 30);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("SUMAR");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(10, 70, 110, 17);

        txtsumar.setText("0");
        getContentPane().add(txtsumar);
        txtsumar.setBounds(10, 90, 138, 30);

        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("DIARIO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(1070, 40, 120, 30);

        jdcfecha1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha1);
        jdcfecha1.setBounds(10, 40, 138, 30);

        jdcfecha2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha2);
        jdcfecha2.setBounds(180, 40, 138, 30);

        jButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton4.setText("OBTENER PDF");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(1070, 80, 120, 30);

        cmbreporte.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "CAJA", "BANCO" }));
        cmbreporte.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbreportea(evt);
            }
        });
        cmbreporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbreporteMouseClicked(evt);
            }
        });
        cmbreporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbreporteActionPerformed(evt);
            }
        });
        getContentPane().add(cmbreporte);
        cmbreporte.setBounds(180, 90, 120, 30);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("HASTA");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(180, 20, 130, 17);

        jMenu5.setText("CAJA");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });

        jMenu10.setText("MANTENIMIENTO CAJA");
        jMenu10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu10MouseClicked(evt);
            }
        });
        jMenu5.add(jMenu10);

        jMenu7.setText("OBTENER CIERRES DE CAJA");
        jMenu7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu7MouseClicked(evt);
            }
        });
        jMenu5.add(jMenu7);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 1225, 564);
    }// </editor-fold>//GEN-END:initComponents

    private void tblmovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmovimientosMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                selecciontabla();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblmovimientosMouseClicked

    private void tblmovimientosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblmovimientosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblmovimientosKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        funcbuscar();
    }//GEN-LAST:event_jButton1ActionPerformed

    void funcbuscar() {
        try {
            entrada = 0F;
            salida = 0F;
            iva = 0F;
            comision = 0F;
            irpf = 0F;
            gastos = 0F;
            limpiar();
            cargarmovimientos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            java.sql.Connection c;
            p_conexion conex = p_conexion.getInstancia();
            c = conex.crearconexion();
            Date fecha1 = null;
            Date fecha2 = null;

            tipo = "";
            tipo = cmbreporte.getSelectedItem().toString();

            String template = "report-movimientosentrefechas.jasper";
            if (tipo.equals("CAJA")) {
                template = "report-movimientosentrefechascaja.jasper";
            }
            if (tipo.equals("BANCO")) {
                template = "report-movimientosentrefechasbanco.jasper";
            }
            JasperReport reporte = null;
            reporte = (JasperReport) JRLoader.loadObject(template);

            controlarfechas();
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            Map param = new HashMap();
            param.put("fecha1", fecha1);
            param.put("fecha2", fecha2);
            //convertir
            //entrada = convertirainteger(txtentrada.getText());
            param.put("entrada", entrada);
            param.put("salida", salida);
            param.put("comision", comision);
            param.put("iva", iva);
            param.put("irpf", irpf);
            param.put("gastos", gastos);
            JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
            //donde dice 'null' va el parametro, si es utilizado
            //this.setVisible(false);
            JasperViewer visor = new JasperViewer(jasperprint, false);
            visor.setTitle("Lista de Movimientos entre fechas");
            visor.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        try {
            entrada = 0F;
            salida = 0F;
            iva = 0F;
            comision = 0F;
            irpf = 0F;
            gastos = 0F;
            limpiar();
            cargarmovimientosdiario();

            java.sql.Connection c;
            p_conexion conex = p_conexion.getInstancia();
            c = conex.crearconexion();

            //VER COMBO CAJA-BANCO
            tipo = "";
            tipo = cmbreporte.getSelectedItem().toString();
            String template = "report-movimientosdiario.jasper";
            if (tipo.equals("CAJA")) {
                template = "report-movimientosdiariocaja.jasper";
            }
            if (tipo.equals("BANCO")) {
                template = "report-movimientosdiariobanco.jasper";
            }
            JasperReport reporte = null;
            reporte = (JasperReport) JRLoader.loadObject(template);

            //controlarfechas();
            Map param = new HashMap();
            //param.put("fecha1", fecha1);
            //param.put("fecha2", fecha2);
            //convertir
            //entrada = convertirainteger(txtentrada.getText());
            param.put("entrada", entrada);
            param.put("salida", salida);
            param.put("comision", comision);
            param.put("iva", iva);
            param.put("irpf", irpf);
            param.put("gastos", gastos);
            JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
            //donde dice 'null' va el parametro, si es utilizado
            //this.setVisible(false);
            JasperViewer visor = new JasperViewer(jasperprint, false);
            visor.setTitle("Lista de Movimientos");
            visor.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtirpfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtirpfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtirpfActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        d_clave cla = new d_clave();
        d_configuracion conf = new d_configuracion();

        try {
            numcopias = 0;
            conf = conf.buscarconfiguracion();
            if (conf.getClave().equals("SI")) {
                JPasswordField pf = new JPasswordField();
                cla = cla.buscarclave();
                int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if (ax == JOptionPane.OK_OPTION) {
                    String password = new String(pf.getPassword());
                    if (!password.equals(cla.getClave())) {
                        throw new Exception("clave incorrecta");
                    }
                }
                if (ax == JOptionPane.CANCEL_OPTION) {
                    return;
                }
            }

            if (listamovimientos.size() <= 0) {
                return;
            }
            if (!generaarchivo()) {
                return;
            }
            for (d_movimiento aux : listamovimientos) {
                int id = aux.getId();
                buscarpdf(id);
            }
            pdf();

            //cerrararchivo();
            JOptionPane.showMessageDialog(this, "SE IMPRIME DOCUMENTO CON " + numcopias + " COMPROBANTE/S", "AVISO", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jMenu7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu7MouseClicked
        p_cierrecaja cie = new p_cierrecaja(null, true);
        cie.setVisible(true);
    }//GEN-LAST:event_jMenu7MouseClicked

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenu10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu10MouseClicked
        p_caja caja = new p_caja(null, true);
        caja.setVisible(true);
    }//GEN-LAST:event_jMenu10MouseClicked

    private void cmbreportea(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbreportea

    }//GEN-LAST:event_cmbreportea

    private void cmbreporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbreporteMouseClicked

    }//GEN-LAST:event_cmbreporteMouseClicked

    private void cmbreporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbreporteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbreporteActionPerformed

    void buscarpdf(int id) throws Exception {
        try {
            //controlarclave();
            //mov = mov.buscarmovimiento(mov.getId());
            d_parametroscfe pcfe = new d_parametroscfe();
            d_cfe cfe = new d_cfe();
            //buscar movimiento y parametroscfe que trae usuario, clave, tenant
            SICFERespuestaBuffer obtenerVersion = new SICFERespuestaBuffer();
            QName fooQNameSerie = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "Serie");
            QName fooQNameRucemisor = new QName("http://schemas.datacontract.org/2004/07/SICFEContract", "rucemisor");
            org.datacontract.schemas._2004._07.sicfecontract.IdCFE i = new org.datacontract.schemas._2004._07.sicfecontract.IdCFE();

            pcfe = pcfe.buscarparametroscfe();
            if (pcfe == null) {
                throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
            }
            cfe = cfe.buscarcfe(id);
            if (cfe == null) {
                //throw new Exception("no existe pdf solicitado");
                return;
            }

            JAXBElement<String> serie = new JAXBElement<String>(fooQNameSerie, String.class, cfe.getSerie());
            JAXBElement<String> rucemisor = new JAXBElement<String>(fooQNameRucemisor, String.class, cfe.getRucemisor());
            /*
            JAXBElement<String> rucemisor = new JAXBElement<>(new QName(org.datacontract.schemas._2004._07.sicfecontract.IdCFE.class.getSimpleName()),
                    String.class, "rucemisor");
            rucemisor.setValue("120196190011");
             */
            i.setRucemisor(rucemisor);
            i.setSerie(serie);
            i.setTipo(cfe.getTipo());
            i.setNumero(cfe.getNumero());
            i.setObservado(cfe.getObservado());
            obtenerVersion = obtenerPDF(pcfe.getNomusuario(), pcfe.getClave(), i, pcfe.getTenant(), "");
            if (obtenerVersion.getCodigo() != 0) {
                //pdf no encontrado
                return;
            }
            listapdf.add(obtenerVersion);
            //pdf(obtenerVersion, id);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    Boolean generaarchivo() throws IOException {
        try {
            //String nombre = "";
            file = new JFileChooser();
            //file.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            file.showSaveDialog(this);

            if (file.getSelectedFile() == null) {
                return false;
            }
            guarda = file.getSelectedFile();
            if (guarda == null) {
                return false;
            }
            //nombrearch = "cfe-" + guarda.getName() + ".pdf";
            File someFile = new File(guarda.getAbsolutePath() + ".pdf");
            someFile.createNewFile();
            fos = new FileOutputStream(someFile);
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    void pdf() throws FileNotFoundException, IOException, DocumentException, Exception {
        File someFile = new File(guarda.getAbsolutePath() + ".pdf");
        int i = 0;
        String[] nombres = new String[listapdf.size()];
        for (SICFERespuestaBuffer aux : listapdf) {
            byte[] bytes = new byte[aux.getBuffer().getValue().length];
            bytes = aux.getBuffer().getValue();
            if (i == 0) {
                nombres[i] = guarda.getAbsolutePath() + ".pdf";
                someFile = new File(guarda.getAbsolutePath() + ".pdf");
                nombres[i] = guarda.getAbsolutePath() + ".pdf";
            } else {
                nombres[i] = guarda.getAbsolutePath() + i + ".pdf";
                someFile = new File(guarda.getAbsolutePath() + i + ".pdf");
                nombres[i] = guarda.getAbsolutePath() + i + ".pdf";
            }
            //nombres[i] = guarda.getAbsolutePath() + i + ".pdf";
            //File someFile = new File(guarda.getAbsolutePath() + i + ".pdf");
            someFile.createNewFile();
            FileOutputStream f = new FileOutputStream(someFile);
            f.write(bytes);
            f.flush();
            f.close();

            i = i + 1;
        }
        concatenar(nombres);
    }

    void concatenar(String[] nombres) throws FileNotFoundException, Exception {
        List<InputStream> inputPdfList = new ArrayList<InputStream>();

        for (int i = 0; i < nombres.length; i++) {
            inputPdfList.add(new FileInputStream(nombres[i]));
        }
        numcopias = nombres.length;
        OutputStream outputStream = new FileOutputStream(guarda.getAbsolutePath() + "x.pdf");

        //call method to merge pdf files.
        mergePdfFiles(inputPdfList, outputStream);
        Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + guarda.getAbsolutePath() + "x.pdf");
    }

    static void mergePdfFiles(List<InputStream> inputPdfList,
            OutputStream outputStream) throws Exception {
        //Create document and pdfReader objects.
        Document document = new Document();
        List<PdfReader> readers = new ArrayList<PdfReader>();
        int totalPages = 0;

        //Create pdf Iterator object using inputPdfList.
        Iterator<InputStream> pdfIterator
                = inputPdfList.iterator();

        // Create reader list for the input pdf files.
        while (pdfIterator.hasNext()) {
            InputStream pdf = pdfIterator.next();
            PdfReader pdfReader = new PdfReader(pdf);
            readers.add(pdfReader);
            totalPages = totalPages + pdfReader.getNumberOfPages();
        }

        // Create writer for the outputStream
        PdfWriter writer = PdfWriter.getInstance(document, outputStream);

        //Open document.
        document.open();

        //Contain the pdf data.
        PdfContentByte pageContentByte = writer.getDirectContent();

        PdfImportedPage pdfImportedPage;
        int currentPdfReaderPage = 1;
        Iterator<PdfReader> iteratorPDFReader = readers.iterator();

        // Iterate and process the reader list.
        while (iteratorPDFReader.hasNext()) {
            PdfReader pdfReader = iteratorPDFReader.next();
            //Create page and add content.
            while (currentPdfReaderPage <= pdfReader.getNumberOfPages()) {
                document.newPage();
                pdfImportedPage = writer.getImportedPage(
                        pdfReader, currentPdfReaderPage);
                pageContentByte.addTemplate(pdfImportedPage, 0, 0);
                currentPdfReaderPage++;
            }
            currentPdfReaderPage = 1;
        }

        //Close document and outputStream.
        outputStream.flush();
        document.close();
        outputStream.close();

        //System.out.println("Pdf files merged successfully.");
    }

    private static SICFERespuestaBuffer obtenerPDF(java.lang.String nomusuario, java.lang.String clave, org.datacontract.schemas._2004._07.sicfecontract.IdCFE pIdCFE, java.lang.String pTenant, java.lang.String template) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        //SICFERespuestaBuffer x = new SICFERespuestaBuffer();
        return port.obtenerPDF(nomusuario, clave, pIdCFE, pTenant, template);
        //x.getBuffer().getValue()
        //JOptionPane.showMessageDialog(null, x.getCodigo()); //error

        //return x;
    }

    void cargarobservador() {
        p_control con = p_control.getInstancia();
        con.registrarobservador_mov(this);
    }

    void cargarmovimientos() {
        d_movimiento mov = new d_movimiento();
        p_control con = p_control.getInstancia();
        d_movimiento mov1 = null;
        Date fecha1 = null;
        Date fecha2 = null;
        Vector v;

        try {
            cleartable();
            controlarfechas();
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            tipo = cmbreporte.getSelectedItem().toString();
            if (!tipo.equals("TODOS")) {
                listamovimientos = mov.listarmovimientosentrefechastipopago(fecha1, fecha2, tipo);
            } else {
                listamovimientos = mov.listarmovimientosentrefechas(fecha1, fecha2);
            }
            for (d_movimiento aux : listamovimientos) {
                mov1 = new d_movimiento();
                v = new Vector();
                mov1.setId(aux.getId());
                mov1.setFecha(aux.getFecha());
                mov1.setTipo(aux.getTipo());
                mov1.setProp_id(aux.getProp_id());
                mov1.setInq_casa(aux.getInq_casa());
                mov1.setMqp(aux.getMqp());
                mov1.setAqp(aux.getAqp());
                mov1.setDetalle(aux.getDetalle());
                mov1.setEntrada(aux.getEntrada());
                mov1.setSalida(aux.getSalida());
                mov1.setComision(aux.getComision());
                mov1.setIva(aux.getIva());
                mov1.setIrpf(aux.getIrpf());
                v.add(mov1.getId());
                v.add(parsefechastring(mov1.getFecha()));
                v.add(mov1.getTipo());
                v.add(mov1.getProp_id());
                v.add(mov1.getInq_casa());
                v.add(mov1.getMqp());
                v.add(mov1.getAqp());
                v.add(mov1.getDetalle());
                v.add(con.mostrarnumero(mov1.getEntrada()));
                v.add(con.mostrarnumero(mov1.getSalida()));
                v.add(con.mostrarnumero(mov1.getComision()));
                v.add(con.mostrarnumero(mov1.getIva()));
                v.add(con.mostrarnumero(mov1.getIrpf()));
                mdltabmov.addRow(v);
            }
            obtenertotalesentrefechas(fecha1, fecha2);
            obtenertotalesirpfentrefechas(fecha1, fecha2);
            obtenertotalesgastosentrefechas(fecha1, fecha2);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void cargarmovimientosdiario() {
        p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();
        d_movimiento mov1 = null;
        Date fecha1 = null;
        Date fecha2 = null;
        Vector v;

        try {
            cleartable();
            controlarfechas();
            fecha1 = new Date();
            fecha2 = new Date();
            listamovimientos = mov.listarmovimientosentrefechas(fecha1, fecha2);
            for (d_movimiento aux : listamovimientos) {
                mov1 = new d_movimiento();
                v = new Vector();
                mov1.setId(aux.getId());
                mov1.setFecha(aux.getFecha());
                mov1.setTipo(aux.getTipo());
                mov1.setProp_id(aux.getProp_id());
                mov1.setInq_casa(aux.getInq_casa());
                mov1.setMqp(aux.getMqp());
                mov1.setAqp(aux.getAqp());
                mov1.setDetalle(aux.getDetalle());
                mov1.setEntrada(aux.getEntrada());
                mov1.setSalida(aux.getSalida());
                mov1.setComision(aux.getComision());
                mov1.setIva(aux.getIva());
                mov1.setIrpf(aux.getIrpf());
                v.add(mov1.getId());
                v.add(parsefechastring(mov1.getFecha()));
                v.add(mov1.getTipo());
                v.add(mov1.getProp_id());
                v.add(mov1.getInq_casa());
                v.add(mov1.getMqp());
                v.add(mov1.getAqp());
                v.add(mov1.getDetalle());
                v.add(con.mostrarnumero(mov1.getEntrada()));
                v.add(con.mostrarnumero(mov1.getSalida()));
                v.add(con.mostrarnumero(mov1.getComision()));
                v.add(con.mostrarnumero(mov1.getIva()));
                v.add(con.mostrarnumero(mov1.getIrpf()));
                mdltabmov.addRow(v);
            }
            obtenertotalesentrefechas(fecha1, fecha2);
            obtenertotalesirpfentrefechas(fecha1, fecha2);
            obtenertotalesgastosentrefechas(fecha1, fecha2);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void limpiar() {
        txtentrada.setText("0");
        txtsalida.setText("0");
        txtcomision.setText("0");
        txtiva.setText("0");
        txtirpf.setText("0");
        txtgastos.setText("0");
    }

    void obtenertotalesentrefechas(Date fecha1, Date fecha2) throws Exception {
        p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();
        Float sumar = 0F;

        mov = mov.obtenertotalesentrefechas(fecha1, fecha2);

        if (mov != null) {
            if (txtsumar.getText().equals("")) {
                sumar = 0F;
            } else {
                sumar = con.guardarnumero((txtsumar.getText()));
            }
            entrada = (mov.getEntrada()) + sumar;
            salida = (mov.getSalida());
            iva = (mov.getIva());
            comision = (mov.getComision());

            txtentrada.setText(con.mostrarnumero(entrada));
            txtsalida.setText(con.mostrarnumero(mov.getSalida()));
            txtcomision.setText(con.mostrarnumero(mov.getComision()));
            txtiva.setText(con.mostrarnumero(mov.getIva()));
        }
    }

    void obtenertotalesirpfentrefechas(Date fecha1, Date fecha2) throws Exception {
        p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();

        mov = mov.obtenertotalesirpfentrefechas(fecha1, fecha2);

        if (mov != null) {
            irpf = mov.getIrpf();
            txtirpf.setText(con.mostrarnumero(mov.getIrpf()));
        }
    }

    void obtenertotalesgastosentrefechas(Date fecha1, Date fecha2) throws Exception {
        p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();

        mov = mov.obtenertotalesgastosentrefechas(fecha1, fecha2);

        if (mov != null) {
            gastos = mov.getSalida();
            txtgastos.setText(con.mostrarnumero(mov.getSalida()));
        }
    }

    void controlarfechas() throws Exception {
        if (jdcfecha1.getDate().equals("") || jdcfecha2.getDate().equals("")) {
            throw new Exception("debe ingresar un rango entre dos fechas");
        }
    }

    String parsefechastring(java.util.Date fecha
    ) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    void selecciontabla() throws Exception {
        p_fichamantenimiento fim = null;
        p_control con = p_control.getInstancia();

        int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        if (row != -1) {
            d_movimiento mov = new d_movimiento();
            //datoseleccionado += tblmodelos.getValueAt(row, 2); //guarda el valor que hay en la columna idoperario
            //idpieza = Integer.parseInt(datoseleccionado); //convierte a Integer
            mov.setId((Integer) tblmovimientos.getValueAt(row, 0));
            con.mov = mov;
            //this.setVisible(false);
            fim = new p_fichamantenimiento(null, true);
            fim.setVisible(true);
            //con.cargarpropietario(pro);
            //notificarseleccion(); 
        } else {
            JOptionPane.showMessageDialog(null, toUpperCase("debe seleccionar una fila"), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void cleartable() {
        for (int i = 0; i < tblmovimientos.getRowCount(); i++) {
            mdltabmov.removeRow(i);
            i -= 1;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_listadosmov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_listadosmov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_listadosmov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_listadosmov.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_listadosmov dialog = new p_listadosmov(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbreporte;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdcfecha1;
    private com.toedter.calendar.JDateChooser jdcfecha2;
    private javax.swing.JTable tblmovimientos;
    private javax.swing.JTextField txtcomision;
    private javax.swing.JTextField txtentrada;
    private javax.swing.JTextField txtgastos;
    private javax.swing.JTextField txtirpf;
    private javax.swing.JTextField txtiva;
    private javax.swing.JTextField txtsalida;
    private javax.swing.JTextField txtsumar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar_mov() {
        cargarmovimientos();
    }
}
