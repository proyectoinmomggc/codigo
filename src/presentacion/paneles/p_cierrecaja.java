/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_clave;
import dominio.d_configuracion;
import java.awt.Desktop;
import java.io.File;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
/*
import org.datacontract.schemas._2004._07.sicfecontract.DatosCantidadCFE;
import org.datacontract.schemas._2004._07.sicfecontract.DatosMontoVenta;
import org.datacontract.schemas._2004._07.sicfecontract.DatosResumenCAE;
import org.datacontract.schemas._2004._07.sicfecontract.DatosResumenCFE;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaInformeCierreDeCaja;
*/


/**
 *
 * @author Gonzalo
 */
public class p_cierrecaja extends javax.swing.JDialog implements Serializable {

    String nombrepdf = "";

    /**
     * Creates new form p_fichainquilino
     */
    public p_cierrecaja(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        cargarfecha();
    }

    void cargarfecha() {
        jdcfecha.setDateFormatString("dd/MM/yyyy");
        jdcfecha.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        btnobtener = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtclave = new javax.swing.JPasswordField();
        jdcfecha = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("OBTENER CIERRE DE CAJA");
        getContentPane().setLayout(null);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("CLAVE");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 70, 120, 17);

        btnobtener.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnobtener.setText("OBTENER");
        btnobtener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnobtenerActionPerformed(evt);
            }
        });
        getContentPane().add(btnobtener);
        btnobtener.setBounds(180, 40, 120, 30);

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("FECHA");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 20, 70, 17);
        getContentPane().add(txtclave);
        txtclave.setBounds(10, 90, 138, 30);

        jdcfecha.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha);
        jdcfecha.setBounds(10, 40, 138, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(java.awt.Color.red);
        jLabel1.setText("*FUNCION ELIMINADA POR DGI*");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(30, 140, 310, 20);

        setBounds(0, 0, 387, 212);
    }// </editor-fold>//GEN-END:initComponents

    private void btnobtenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnobtenerActionPerformed
        /*
        SICFERespuestaInformeCierreDeCaja caja = new SICFERespuestaInformeCierreDeCaja();
        d_parametroscfe pcfe = new d_parametroscfe();
        String nomusuario = "";
        String clave = "";
        String tenant = "";
        String operador = "";
        String puntoventa = "";
        Short sucursal = -1;
        XMLGregorianCalendar f1;
        Date fecha;
        nombrepdf = "";

        try {
            controlarclave();
            pcfe = pcfe.buscarparametroscfe();
            if (pcfe == null) {
                throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
            }
            nomusuario = pcfe.getNomusuario();
            clave = pcfe.getClave();
            tenant = pcfe.getTenant();
            operador = "N/A";
            puntoventa = "N/A";
            sucursal = 4;
            fecha = parsefechadate(jdcfecha.getDate());
            f1 = getXmlGregorianCalendarFromDate(fecha);
            caja = obtenerCierreDeCaja(nomusuario, clave, tenant, operador, puntoventa, sucursal, f1);
            pdf(caja);
            abrir();
            txtclave.setText("");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        */
    }//GEN-LAST:event_btnobtenerActionPerformed

    /*
    private static SICFERespuestaInformeCierreDeCaja obtenerCierreDeCaja(java.lang.String nomusuario,
            java.lang.String clave, java.lang.String tenant, java.lang.String operador,
            java.lang.String puntoVenta, java.lang.Short sucursal,
            javax.xml.datatype.XMLGregorianCalendar fecha) {
        
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.obtenerCierreDeCaja(nomusuario, clave, tenant, operador, puntoVenta, sucursal, fecha);
        
        return null;
    }
*/
    public static XMLGregorianCalendar getXmlGregorianCalendarFromDate(final Date date) throws DatatypeConfigurationException {
        GregorianCalendar calendar = new GregorianCalendar();
        calendar.setTime(date);
        return DatatypeFactory.newInstance().newXMLGregorianCalendar(calendar);
    }
/*
    void pdf(SICFERespuestaInformeCierreDeCaja obtenerCierre) throws FileNotFoundException, IOException, PropertyException, JAXBException, Exception {
        
        JAXBElement<SICFERespuestaInformeCierreDeCaja> jaxbElement = new JAXBElement(
                new QName(SICFERespuestaInformeCierreDeCaja.class.getSimpleName()), SICFERespuestaInformeCierreDeCaja.class, obtenerCierre);

        SICFERespuestaInformeCierreDeCaja cdj = jaxbElement.getValue();
        
        crearpdf(cdj);
        
    }
*/
    public void abrir() throws Exception {
        if (nombrepdf.equals("")) {
            return;
        }
        File path = new File(nombrepdf);
        Desktop.getDesktop().open(path);
    }
/*
    void crearpdf(SICFERespuestaInformeCierreDeCaja cdj) throws Exception {
        List<DatosCantidadCFE> listadatoscantidadcfe = cdj.getInforme().getValue().getCantidadesCFE().getValue().getDatosCantidadCFE();
        List<DatosResumenCAE> listadatosresumencae = cdj.getInforme().getValue().getNumeracionUtilizada().getValue().getDatosResumenCAE();
        List<DatosResumenCFE> listadatosresumencfe = cdj.getInforme().getValue().getUltimosCFE().getValue().getDatosResumenCFE();
        List<DatosMontoVenta> listadatosmontoventa = cdj.getInforme().getValue().getMontosVentas().getValue().getDatosMontoVenta();

        Date fechagenerado = parsefechadategre(cdj.getInforme().getValue().getFechaGenerado());
        String fechastring = parsefechastring(fechagenerado);
        nombrepdf = "cierredecaja_" + fechastring + ".pdf";
        FileOutputStream archivo = new FileOutputStream(nombrepdf);
        com.itextpdf.text.Document documento = new com.itextpdf.text.Document();
        PdfWriter.getInstance(documento, archivo);
        documento.open();

        com.itextpdf.text.Paragraph parrafo = new com.itextpdf.text.Paragraph("INFORME DE CIERRE PARCIAL DE OPERACIONES");
        parrafo.setAlignment(1);
        parrafo.setSpacingAfter(10);
        documento.add(parrafo);

        documento.add(new com.itextpdf.text.Paragraph("RUT emisor: " + cdj.getInforme().getValue().getRucEmisor().getValue()));
        documento.add(new com.itextpdf.text.Paragraph("Usuario: " + cdj.getInforme().getValue().getUsuarioGenerado().getValue()));
        documento.add(new com.itextpdf.text.Paragraph("Fecha generado: " + fechastring));
        documento.add(new com.itextpdf.text.Paragraph("Puesto venta: " + cdj.getInforme().getValue().getPuntoVenta().getValue()));

        int parrafoeticket = 0;
        int parrafoncticket = 0;
        int parrafoefactura = 0;
        int parrafoncefactura = 0;
        if (listadatoscantidadcfe.isEmpty()) {
            if (listadatoscantidadcfe.isEmpty()) {
                if (listadatoscantidadcfe.isEmpty()) {
                    if (listadatoscantidadcfe.isEmpty()) {
                        com.itextpdf.text.Paragraph parrafonodatos = new com.itextpdf.text.Paragraph("NO SE REGISTRAN DATOS PARA LA FECHA SOLICITADA");
                        parrafonodatos.setSpacingBefore(10);
                        documento.add(parrafonodatos);
                        documento.close();
                        return;
                    }
                }
            }
        }
        if (listadatoscantidadcfe.size() > 0) {
            com.itextpdf.text.Paragraph parrafo1 = new com.itextpdf.text.Paragraph("Numeración utilizada");
            parrafo1.setSpacingBefore(10); //espacio antes
            parrafo1.setSpacingAfter(10); //espacio despues
            documento.add(parrafo1); //Numeración utilizada

            for (DatosResumenCAE aux : listadatosresumencae) {
                if (aux.getTipoCFE().intValue() == 101) {
                    if (parrafoeticket == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* E-Ticket:"));
                        parrafoeticket = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Primera serie: " + aux.getPrimerSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Primer número: " + aux.getPrimerNro().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Última serie: " + aux.getUltimoSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Último número: " + aux.getUltimoNro().getValue()));
                }
                if (aux.getTipoCFE().intValue() == 102) {
                    if (parrafoncticket == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* NC E-Ticket:"));
                        parrafoncticket = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Primera serie: " + aux.getPrimerSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Primer número: " + aux.getPrimerNro().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Última serie: " + aux.getUltimoSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Último número: " + aux.getUltimoNro().getValue()));
                }
                if (aux.getTipoCFE().intValue() == 111) {
                    if (parrafoefactura == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* E-Factura:"));
                        parrafoefactura = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Primera serie: " + aux.getPrimerSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Primer número: " + aux.getPrimerNro().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Última serie: " + aux.getUltimoSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Último número: " + aux.getUltimoNro().getValue()));
                }
                if (aux.getTipoCFE().intValue() == 112) {
                    if (parrafoncefactura == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* NC E-Factura:"));
                        parrafoncefactura = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Primera serie: " + aux.getPrimerSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Primer número: " + aux.getPrimerNro().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Última serie: " + aux.getUltimoSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Último número: " + aux.getUltimoNro().getValue()));
                }
            }
            parrafoeticket = 0;
            parrafoncticket = 0;
            parrafoefactura = 0;
            parrafoncefactura = 0;
            //recorro listadatoscantidadcfe            
        }

        if (listadatoscantidadcfe.size() > 0) {
            com.itextpdf.text.Paragraph parrafo2 = new com.itextpdf.text.Paragraph("Cantidad CFEs");
            parrafo2.setSpacingBefore(10); //espacio antes
            parrafo2.setSpacingAfter(10); //espacio despues
            documento.add(parrafo2); //Numeración utilizada
            for (DatosCantidadCFE aux : listadatoscantidadcfe) {
                if (aux.getTipoCFE().intValue() == 101) {
                    if (parrafoeticket == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* E-Ticket:"));
                        parrafoeticket = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad contado: " + aux.getCantidadContado()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad crédito: " + aux.getCantidadCredito()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad rechazado: " + aux.getCantidadRechazado()));
                }
                if (aux.getTipoCFE().intValue() == 102) {
                    if (parrafoncticket == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* NC E-Ticket:"));
                        parrafoncticket = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad contado: " + aux.getCantidadContado()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad crédito: " + aux.getCantidadCredito()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad rechazado: " + aux.getCantidadRechazado()));
                }
                if (aux.getTipoCFE().intValue() == 111) {
                    if (parrafoefactura == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* E-Factura:"));
                        parrafoefactura = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad contado: " + aux.getCantidadContado()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad crédito: " + aux.getCantidadCredito()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad rechazado: " + aux.getCantidadRechazado()));
                }
                if (aux.getTipoCFE().intValue() == 112) {
                    if (parrafoncefactura == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* NC E-Factura:"));
                        parrafoncefactura = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad contado: " + aux.getCantidadContado()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad crédito: " + aux.getCantidadCredito()));
                    documento.add(new com.itextpdf.text.Paragraph("Cantidad rechazado: " + aux.getCantidadRechazado()));
                }
            }
            parrafoeticket = 0;
            parrafoncticket = 0;
            parrafoefactura = 0;
            parrafoncefactura = 0;
            //recorro listadatoscantidadcfe

        }

        if (listadatosresumencfe.size() > 0) {
            com.itextpdf.text.Paragraph parrafo3 = new com.itextpdf.text.Paragraph("Últimos CFEs");

            parrafo3.setSpacingBefore(10); //espacio antes
            parrafo3.setSpacingAfter(10); //espacio despues
            documento.add(parrafo3); //Numeración utilizada
            for (DatosResumenCFE aux : listadatosresumencfe) {
                if (aux.getTipoCFE().intValue() == 101) {
                    if (parrafoeticket == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* E-Ticket:"));
                        parrafoeticket = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Serie: " + aux.getSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Número: " + aux.getNumero()));
                    documento.add(new com.itextpdf.text.Paragraph("Moneda: " + aux.getMoneda().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total: " + aux.getMontoTotal().toString()));
                }
                if (aux.getTipoCFE().intValue() == 102) {
                    if (parrafoncticket == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* NC E-Ticket:"));
                        parrafoncticket = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Serie: " + aux.getSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Número: " + aux.getNumero()));
                    documento.add(new com.itextpdf.text.Paragraph("Moneda: " + aux.getMoneda().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total: " + aux.getMontoTotal().toString()));
                }
                if (aux.getTipoCFE().intValue() == 111) {
                    if (parrafoefactura == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* E-Factura:"));
                        parrafoefactura = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Serie: " + aux.getSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Número: " + aux.getNumero()));
                    documento.add(new com.itextpdf.text.Paragraph("Moneda: " + aux.getMoneda().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total: " + aux.getMontoTotal().toString()));
                }
                if (aux.getTipoCFE().intValue() == 112) {
                    if (parrafoncefactura == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("* NC E-Factura:"));
                        parrafoncefactura = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Serie: " + aux.getSerie().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Número: " + aux.getNumero()));
                    documento.add(new com.itextpdf.text.Paragraph("Moneda: " + aux.getMoneda().getValue()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total: " + aux.getMontoTotal().toString()));
                }
            }
            parrafoeticket = 0;
            parrafoncticket = 0;
            parrafoefactura = 0;
            parrafoncefactura = 0;
            //recorro listadatoscantidadcfe

        }

        int parrafouyu = 0;
        int parrafousd = 0;

        if (listadatosmontoventa.size() > 0) {
            com.itextpdf.text.Paragraph parrafo4 = new com.itextpdf.text.Paragraph("Montos Ventas");

            parrafo4.setSpacingBefore(10); //espacio antes
            parrafo4.setSpacingAfter(10); //espacio despues
            documento.add(parrafo4); //Numeración utilizada
            for (DatosMontoVenta aux : listadatosmontoventa) {
                if (aux.getMoneda().getValue().equals("UYU")) {
                    if (parrafouyu == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("UYU"));
                        parrafouyu = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Monto no gravado: " + aux.getMontoNoGravado()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto imp. percibido: " + aux.getMontoImpuestoPercepcion()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto neto IVA tasa min: " + aux.getMontoIVATasaMin()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto neto IVA tasa otra: " + aux.getMontoNoGravado()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA tasa basica: " + aux.getMontoIVATasaBasica()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total: " + aux.getMontoTotal()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto no facturable: " + aux.getMontoNoFacturable()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto exp. y asim.: " + aux.getMontoEspoYAsim()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA suspenso: " + aux.getMontoIVASuspenso()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto neto IVA tasa basica: " + aux.getMontoNetoIVATasaBasica()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA tasa minima: " + aux.getMontoIVATasaMin()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA tasa otra: " + aux.getMontoIVAOtra()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total retenido: " + aux.getMontoTotalRetenido()));
                }
                if (aux.getMoneda().getValue().equals("USD")) {
                    if (parrafousd == 0) {
                        documento.add(new com.itextpdf.text.Paragraph("USD"));
                        parrafousd = 1;
                    }
                    documento.add(new com.itextpdf.text.Paragraph("Monto no gravado: " + aux.getMontoNoGravado()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto imp. percibido: " + aux.getMontoImpuestoPercepcion()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto neto IVA tasa min: " + aux.getMontoIVATasaMin()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto neto IVA tasa otra: " + aux.getMontoNoGravado()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA tasa basica: " + aux.getMontoIVATasaBasica()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total: " + aux.getMontoTotal()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto no facturable: " + aux.getMontoNoFacturable()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto exp. y asim.: " + aux.getMontoEspoYAsim()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA suspenso: " + aux.getMontoIVASuspenso()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto neto IVA tasa basica: " + aux.getMontoNetoIVATasaBasica()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA tasa minima: " + aux.getMontoIVATasaMin()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto IVA tasa otra: " + aux.getMontoIVAOtra()));
                    documento.add(new com.itextpdf.text.Paragraph("Monto total retenido: " + aux.getMontoTotalRetenido()));
                }
            }
            parrafouyu = 0;
            parrafousd = 0;
        }

        documento.close();
        //JOptionPane.showMessageDialog(null, "Archivo PDF creado correctamente", "Información", 1);
    }
*/
    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("yyyy-MM-dd");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Date parsefechadategre(XMLGregorianCalendar xmlCalendar) throws Exception {
        Date date = xmlCalendar.toGregorianCalendar().getTime();
        return date;
    }

    void controlarclave() throws Exception {
        d_clave cla = new d_clave();
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getClave().equals("NO")) {
            return;
        }
        
        cla = cla.buscarclave();

        if (!txtclave.getText().equals(cla.getClave())) {
            throw new Exception("clave incorrecta");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_cierrecaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_cierrecaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_cierrecaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_cierrecaja.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_cierrecaja dialog = new p_cierrecaja(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnobtener;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private com.toedter.calendar.JDateChooser jdcfecha;
    private javax.swing.JPasswordField txtclave;
    // End of variables declaration//GEN-END:variables

}
