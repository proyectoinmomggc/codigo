/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_propietario;
import dominio.d_recibo;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import presentacion.p_fichamantenimiento;
import interfaces.observador_mov;
import java.awt.event.KeyEvent;
import java.util.Properties;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

import persistencia.p_conexion;

/**
 *
 * @author Gonzalo
 */
public class listadomovprop extends javax.swing.JDialog implements observador_mov {

    DefaultTableModel mdltabmov = new DefaultTableModel();
    List<d_movimiento> listamovimientos = new ArrayList<d_movimiento>();
    Float saldogeneral = 0.0f;
    Float saldoreporte = 0.0f;

    /**
     * Creates new form p_listado_mov
     */
    public listadomovprop(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        p_control c = p_control.getInstancia();
        tblmovimientos.setModel(mdltabmov);

        mdltabmov.addColumn("ID");
        mdltabmov.addColumn("FECHA");
        mdltabmov.addColumn("NOMBRE");
        mdltabmov.addColumn("ID INQ");
        mdltabmov.addColumn("MES / CUOTA");
        mdltabmov.addColumn("AÃ‘O");
        mdltabmov.addColumn("DETALLE");
        mdltabmov.addColumn("ENTRADA");
        mdltabmov.addColumn("SALIDA");
        mdltabmov.addColumn("COMISION");
        mdltabmov.addColumn("IVA");
        mdltabmov.addColumn("IRPF");
        mdltabmov.addColumn("SALDO");
        
        c.alinear_contenido_columna_izquierda(tblmovimientos, 7);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 8);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 9);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 10);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 11);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 12);
        
        cargarfecha();
        //cargarmovimientos();
        cargarobservador();
    }

    void cargarfecha() {
        jdcfecha1.setDate(new Date());
        jdcfecha2.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblmovimientos = tblmovimientos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtprop_id = new javax.swing.JTextField();
        lblnombreprop = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        txtnota = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jdcfecha1 = new com.toedter.calendar.JDateChooser();
        jdcfecha2 = new com.toedter.calendar.JDateChooser();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MOVIMIENTOS DE PROPIETARIOS");
        setModalityType(null);
        getContentPane().setLayout(null);

        tblmovimientos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tblmovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmovimientosMouseClicked(evt);
            }
        });
        tblmovimientos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblmovimientosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblmovimientos);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 180, 1150, 150);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("DESDE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 120, 140, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("HASTA");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 120, 200, 17);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("RECIBO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(1040, 40, 120, 30);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ID PROP");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 20, 180, 17);

        txtprop_id.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtprop_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtprop_idKeyPressed(evt);
            }
        });
        getContentPane().add(txtprop_id);
        txtprop_id.setBounds(10, 40, 138, 30);

        lblnombreprop.setBackground(java.awt.Color.green);
        lblnombreprop.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblnombreprop.setOpaque(true);
        getContentPane().add(lblnombreprop);
        lblnombreprop.setBounds(10, 90, 500, 30);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("NOMBRE");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 70, 160, 17);

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("EXPORTAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 390, 120, 30);

        txtnota.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtnota);
        txtnota.setBounds(10, 350, 138, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("NOTA");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 330, 160, 17);

        jdcfecha1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha1);
        jdcfecha1.setBounds(10, 140, 138, 30);

        jdcfecha2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha2);
        jdcfecha2.setBounds(180, 140, 138, 30);

        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("FILTRAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton3KeyPressed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(160, 40, 120, 30);

        setBounds(0, 0, 1213, 471);
    }// </editor-fold>//GEN-END:initComponents

    private void tblmovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmovimientosMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                selecciontabla();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblmovimientosMouseClicked

    private void tblmovimientosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblmovimientosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblmovimientosKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

            if (row != -1) {
                d_movimiento mov = new d_movimiento();
                mov = mov.buscarmovimiento((Integer) tblmovimientos.getValueAt(row, 0));
                mostrarrecibo(mov);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    void mostrarrecibo(d_movimiento mov) throws Exception {
        if (mov == null) {
            return;
        }

        java.sql.Connection c;
        p_conexion conex = p_conexion.getInstancia();
        c = conex.crearconexion();

        d_propietario prop = new d_propietario();
        prop = prop.buscarpropietario(mov.getProp_id());
        if (prop == null) {
            return;
        }
        String template = "recibopropietarioretira.jasper";
        JasperReport reporte = null;
        reporte = (JasperReport) JRLoader.loadObject(template);

        Map param = new HashMap();
        param.put("direccion", prop.getProp_direccion());
        param.put("movimiento", tipomovimiento(mov.getEntrada(), mov.getSalida()));//O ENTRADA
        guardarrecibo(mov, prop.getProp_id() + " - " + prop.getProp_nombre());

        JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
        //donde dice 'null' va el parametro, si es utilizado
        //this.setVisible(false);
        JasperViewer visor = new JasperViewer(jasperprint, false);
        visor.setTitle("Recibo");
        visor.setVisible(true);
    }

    String tipomovimiento(Float valore, Float valors) {
        if (valore == 0f && valors != 0f) {
            return "salida";
        } else if (valors == 0f && valore != 0f) {
            return "entrada";
        }
        return "entrada/salida";
    }

    void guardarrecibo(d_movimiento mov, String nombreprop) throws Exception {
        d_recibo rec = new d_recibo();

        rec.eliminarrecibo("salida");

        rec.setIdmovimiento(mov.getId());
        if (mov.getMqp() != 0 && mov.getAqp() != 0) {
            rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
        } else {
            rec.setDetalle(mov.getDetalle());
        }

        rec.setFecha(mov.getFecha());
        rec.setNombre_inq(nombreprop);
        if (mov.getEntrada() == 0f) {
            rec.setImporte(mov.getSalida());
        } else {
            rec.setImporte(mov.getEntrada());
        }

        rec.guardarrecibo(rec,"salida");
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            cargarmovimientos();
            java.sql.Connection c;
            p_conexion conex = p_conexion.getInstancia();
            c = conex.crearconexion();
            Date fecha1 = null;
            Date fecha2 = null;
            Integer prop_id = 0;
            d_inquilino inq = new d_inquilino();
            d_propietario prop = new d_propietario();

            String template = "report-movimientosentrefechasprop.jasper";
            JasperReport reporte = null;
            //JasperReport reporte = JasperCompileManager.compileReport("report-movimientosentrefechasprop.jrxml");
            reporte = (JasperReport) JRLoader.loadObject(template);

            controlarid();
            controlarfechas();
            prop_id = Integer.parseInt(txtprop_id.getText());
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            if (inq == null) {
                JOptionPane.showMessageDialog(null, toUpperCase("propietario no existe"), "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Map param = new HashMap();
            param.put("fecha1", fecha1);
            param.put("fecha2", fecha2);
            param.put("prop_id", prop_id);
            if (!txtnota.getText().equals("")) {
                param.put("nota", txtnota.getText());
            }
            prop = prop.buscarpropietario(prop_id);
            param.put("prop_nombre", prop.getProp_nombre());
            //saldogeneral
            Double saldo;
            saldo = saldoreporte.doubleValue();
            param.put("saldo_actual", saldo);
            JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
            //donde dice 'null' va el parametro, si es utilizado
            //this.setVisible(false);
            JasperViewer visor = new JasperViewer(jasperprint, false);
            visor.setTitle("Lista de Movimientos de propietario entre fechas");
            
            //CREAMOS EN PDF, PARA ENVIAR POR EMAIL POR EJEMPLO
            /*          
            File pdf = new File("output"+".pdf");//en lugar de output va el nombre del archivo
            System.out.println("Lo exportamos a " + pdf.getAbsolutePath());//chequea ruta de donde queda el pdf
            JasperExportManager.exportReportToPdfStream(jasperprint, new FileOutputStream(pdf));//genera pdf
            */
            visor.setVisible(true);            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /*
    void enviarmail(){
        // Recipient's email ID needs to be mentioned.
      String to = "abcd@gmail.com";

      // Sender's email ID needs to be mentioned
      String from = "web@gmail.com";

      // Assuming you are sending email from localhost
      String host = "localhost";

      // Get system properties
      Properties properties = System.getProperties();

      // Setup mail server
      properties.setProperty("mail.smtp.host", host);

      // Get the default Session object.
      Session session = Session.getDefaultInstance(properties);

      try {
         // Create a default MimeMessage object.
         MimeMessage message = new MimeMessage(session);

         // Set From: header field of the header.
         message.setFrom(new InternetAddress(from));

         // Set To: header field of the header.
         message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));

         // Set Subject: header field
         message.setSubject("This is the Subject Line!");

         // Create the message part 
         BodyPart messageBodyPart = new MimeBodyPart();

         // Fill the message
         messageBodyPart.setText("This is message body");
         
         // Create a multipar message
         Multipart multipart = new MimeMultipart();

         // Set text message part
         multipart.addBodyPart(messageBodyPart);

         // Part two is attachment
         messageBodyPart = new MimeBodyPart();
         String filename = "file.txt";
         DataSource source = new FileDataSource(filename);
         messageBodyPart.setDataHandler(new DataHandler(source));
         messageBodyPart.setFileName(filename);
         multipart.addBodyPart(messageBodyPart);

         // Send the complete message parts
         message.setContent(multipart );

         // Send message
         Transport.send(message);
         System.out.println("Sent message successfully....");
      } catch (MessagingException mex) {
         JOptionPane.showMessageDialog(null, toUpperCase(mex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
      }
    }
    */
    private void txtprop_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtprop_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cargarmovimientos();
        }
    }//GEN-LAST:event_txtprop_idKeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cargarmovimientos();
        }
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            cargarmovimientos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton3KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3KeyPressed

    void cargarobservador() {
        p_control con = p_control.getInstancia();
        con.registrarobservador_mov(this);
    }

    void cargarmovimientos() {
        p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();
        d_movimiento mov1 = null;
        d_propietario prop = new d_propietario();
        d_parametro par = new d_parametro();
        Integer prop_id = 0;
        Date fecha1 = null;
        Date fecha2 = null;
        Vector v;
        Float saldo = 0f;
        int i = 0;

        try {
            cleartable();
            controlarid();
            controlarfechas();
            saldogeneral = 0.0f;
            saldoreporte = 0.0f;
            lblnombreprop.setText("-");
            prop_id = Integer.parseInt(txtprop_id.getText());
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            prop = prop.buscarpropietario(prop_id);
            if (prop == null) {
                JOptionPane.showMessageDialog(null, toUpperCase("propietario no existe"), "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            par = par.buscarparametro();
            lblnombreprop.setText(prop.getProp_nombre());
            saldogeneral = mov.obtenersaldoprophastafecha(prop_id, fecha1, par.getIrpf());
            saldoreporte = saldogeneral;
            listamovimientos = mov.listarmovimientosentrefechasypro(prop_id, fecha1, fecha2);
            for (d_movimiento aux : listamovimientos) {
                i = i + 1;
                mov1 = new d_movimiento();
                v = new Vector();
                mov1.setId(aux.getId());
                mov1.setNombreinq(aux.getTipo());
                mov1.setInq_casa(aux.getInq_casa());
                mov1.setMqp(aux.getMqp());
                mov1.setAqp(aux.getAqp());
                mov1.setDetalle(aux.getDetalle());
                mov1.setTipo(aux.getTipo());
                mov1.setEntrada(aux.getEntrada());
                mov1.setSalida(aux.getSalida());
                mov1.setComision(aux.getComision());
                mov1.setIva(aux.getIva());
                mov1.setIrpf(aux.getIrpf());
                mov1.setFecha(aux.getFecha());
                mov1.setSaldo_a(aux.getSaldo_a());
                mov1.setSaldo_b(aux.getSaldo_b());
                v.add(mov1.getId());
                v.add(parsefechastring(mov1.getFecha()));
                v.add(mov1.getNombreinq());
                v.add(mov1.getInq_casa());
                v.add(devuelvemes(mov1.getMqp(), mov1.getFecha()));
                v.add(devuelveanio(mov1.getAqp(), mov1.getFecha()));
                v.add(mov1.getDetalle());
                v.add(con.mostrarnumero(mov1.getEntrada()));
                v.add(con.mostrarnumero(mov1.getSalida()));
                v.add(con.mostrarnumero(mov1.getComision()));
                v.add(con.mostrarnumero(mov1.getIva()));
                v.add(con.mostrarnumero(mov1.getIrpf()));

                if (mov1.getSalida() != 0) {
                    float a = mov1.getSaldo_b() * -1;
                    v.add(con.mostrarnumero((saldogeneral - a)));
                    saldogeneral = (saldogeneral - a);
                    mdltabmov.addRow(v);
                } else {
                    //cuando es saldo migracion entra aca
                    saldo = devuelvesaldo(mov1.getSaldo_b());
                    v.add(con.mostrarnumero(saldogeneral));
                    mdltabmov.addRow(v);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    Integer devuelvemes(Integer mes, Date fecha) {
        Integer mesres = 0;

        if (mes == 0) {
            SimpleDateFormat formato = new SimpleDateFormat("M");
            String fechastr = formato.format(fecha);
            mesres = Integer.parseInt(fechastr);
        } else {
            mesres = mes;
        }

        return mesres;
    }

    Integer devuelveanio(Integer anio, Date fecha) {
        Integer aniores = 0;

        if (anio == 0) {
            SimpleDateFormat formato = new SimpleDateFormat("yyyy");
            String fechastr = formato.format(fecha);
            aniores = Integer.parseInt(fechastr);
        } else {
            aniores = anio;
        }

        return aniores;
    }

    Float devuelvesaldo(Float entrada) throws Exception {
        Float saldoactual = 0f;

        saldoactual = 0f;

        saldoactual = entrada;
        if (entrada >= 0) {
            saldogeneral = saldogeneral + saldoactual;
        } else {
            saldogeneral = saldogeneral - (-saldoactual);
        }

        return saldogeneral;
    }

    void controlarfechas() throws Exception {
        Date fecha1 = null;
        Date fecha2 = null;

        fecha1 = parsefechadate(jdcfecha1.getDate());
        fecha2 = parsefechadate(jdcfecha2.getDate());

        int compara = fecha1.compareTo(fecha2);

        if (compara == 1) {
            throw new Exception("la fecha 1 debe ser menor o igual a la fecha 2");
        }
    }

    void controlarid() throws Exception {
        if (txtprop_id.getText().equals("")) {
            throw new Exception("debe ingresar un propietario");
        }
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    void selecciontabla() throws Exception {
        p_fichamantenimiento fim = null;
        p_control con = p_control.getInstancia();

        int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        if (row != -1) {
            d_movimiento mov = new d_movimiento();
            //datoseleccionado += tblmodelos.getValueAt(row, 2); //guarda el valor que hay en la columna idoperario
            //idpieza = Integer.parseInt(datoseleccionado); //convierte a Integer
            mov.setId((Integer) tblmovimientos.getValueAt(row, 0));
            con.mov = mov;
            //this.setVisible(false);
            fim = new p_fichamantenimiento(null, true);
            fim.setVisible(true);
            //con.cargarpropietario(pro);
            //notificarseleccion(); 
        } else {
            JOptionPane.showMessageDialog(null, toUpperCase("debe seleccionar una fila"), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void cleartable() {
        for (int i = 0; i < tblmovimientos.getRowCount(); i++) {
            mdltabmov.removeRow(i);
            i -= 1;
        }
    }

    /**
     * @param args the command line arguments
             */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(listadomovprop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(listadomovprop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(listadomovprop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(listadomovprop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                listadomovprop dialog = new listadomovprop(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdcfecha1;
    private com.toedter.calendar.JDateChooser jdcfecha2;
    private javax.swing.JLabel lblnombreprop;
    private javax.swing.JTable tblmovimientos;
    private javax.swing.JTextField txtnota;
    private javax.swing.JTextField txtprop_id;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar_mov() {
        cargarmovimientos();
    }
}
