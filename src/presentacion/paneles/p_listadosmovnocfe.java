/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_cfe;
import dominio.d_clave;
import dominio.d_configuracion;
import dominio.d_generarcfe;
import dominio.d_movimiento;
import dominio.d_parametroscfe;
import dominio.d_propietario;
import dominio.d_xml;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import presentacion.p_fichamantenimiento;
import interfaces.observador_mov;
import java.awt.Dimension;
import javax.swing.JPasswordField;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaEnvioCFE;

/**
 *
 * @author Gonzalo
 */
public class p_listadosmovnocfe extends javax.swing.JDialog implements observador_mov {

    p_control con = p_control.getInstancia();
    DefaultTableModel mdltabmov = new DefaultTableModel();
    List<d_movimiento> listamovimientos = new ArrayList<>();
    List<d_movimiento> listadonodgi = new ArrayList<>();
    String movimientosnodgi = "";

    /**
     * Creates new form p_listado_mov
     */
    public p_listadosmovnocfe(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        tblmovimientos.setModel(mdltabmov);

        mdltabmov.addColumn("ID");
        mdltabmov.addColumn("FECHA");
        mdltabmov.addColumn("NOMBRE");
        mdltabmov.addColumn("ID PROP");
        mdltabmov.addColumn("ID INQ.");
        mdltabmov.addColumn("MES");
        mdltabmov.addColumn("AÃ‘O");
        mdltabmov.addColumn("DETALLE");
        mdltabmov.addColumn("ENTRADA");
        mdltabmov.addColumn("SALIDA");
        mdltabmov.addColumn("COMISION");
        mdltabmov.addColumn("IVA");
        mdltabmov.addColumn("IRPF");

        con.alinear_contenido_columna_izquierda(tblmovimientos, 8);
        con.alinear_contenido_columna_izquierda(tblmovimientos, 9);
        con.alinear_contenido_columna_izquierda(tblmovimientos, 10);
        con.alinear_contenido_columna_izquierda(tblmovimientos, 11);
        con.alinear_contenido_columna_izquierda(tblmovimientos, 12);
        cargarfecha();
        //cargarmovimientos();
        cargarobservador();
    }

    void cargarfecha() {
        jdcfecha1.setDateFormatString("dd/MM/yyyy");
        jdcfecha2.setDateFormatString("dd/MM/yyyy");
        jdcfecha1.setDate(new Date());
        jdcfecha2.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblmovimientos = tblmovimientos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jdcfecha1 = new com.toedter.calendar.JDateChooser();
        jdcfecha2 = new com.toedter.calendar.JDateChooser();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MOVIMIENTOS SIN CFE");
        getContentPane().setLayout(null);

        tblmovimientos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tblmovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmovimientosMouseClicked(evt);
            }
        });
        tblmovimientos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblmovimientosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblmovimientos);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 80, 1181, 180);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("DESDE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 20, 170, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("HASTA");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 20, 190, 17);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("FILTRAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(380, 40, 120, 30);

        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("PASAR A CFE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(1070, 40, 120, 30);

        jdcfecha1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha1);
        jdcfecha1.setBounds(10, 40, 138, 30);

        jdcfecha2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha2);
        jdcfecha2.setBounds(180, 40, 138, 30);
        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 1225, 314);
    }// </editor-fold>//GEN-END:initComponents

    private void tblmovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmovimientosMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                selecciontabla();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblmovimientosMouseClicked

    private void tblmovimientosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblmovimientosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblmovimientosKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        funcbuscar();
    }//GEN-LAST:event_jButton1ActionPerformed

    void funcbuscar() {
        try {
            cargarmovimientos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int i = 0;
        try {
            chequeaclave();
            listadonodgi = null;
            listadonodgi = new ArrayList();
            movimientosnodgi = "";
            for (d_movimiento aux : listamovimientos) {
                //if (aux.getComision() == 0f) {
                //JOptionPane.showMessageDialog(this, "MOVIMIENTO CON ID: " + aux.getId() + " NO SE PUEDE ENVIAR A DGI POR TENER COMISION IGUAL A 0", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                //} else {
                if (generarcfe(aux)) {
                    i = i + 1;
                } else {
                    listadonodgi.add(aux);
                }
                //}
            }
            if (i > 0) {
                JOptionPane.showMessageDialog(this, i + " CFE GENERADO/S CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
            reportemovimientosnodgi();
            cargarmovimientos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
            //reportemovimientosnodgi();
            cargarmovimientos();
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    void reportemovimientosnodgi() throws Exception {

        if (listadonodgi.size() > 0) {
            for (d_movimiento aux : listadonodgi) {
                movimientosnodgi = movimientosnodgi + aux.getProp_id() + " - " + aux.getInq_casa() + " | " + "MOV ID: " + aux.getId() + " | ENTRADA: " + con.mostrarnumero(aux.getEntrada())
                        + " | COMISION: " + con.mostrarnumero(aux.getComision()) + " | IVA: " + con.mostrarnumero(aux.getIva()) + "\n";
            }
        } else {
            return;
        }

        if (!movimientosnodgi.equals("")) {
            JOptionPane.showMessageDialog(null, devuelvescrollnodgi(), "REPORTE DE ALQUILERES NO ENVIADOS A DGI",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }

    JScrollPane devuelvescrollnodgi() {
        JTextArea textArea = new JTextArea(movimientosnodgi);
        JScrollPane scrollPane = new JScrollPane(textArea);
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setEditable(false);
        scrollPane.setPreferredSize(new Dimension(500, 500));
        return scrollPane;
    }

    void chequeaclave() throws Exception {
        d_clave cla = new d_clave();
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getClave().equals("NO")) {
            return;
        }
        JPasswordField pf = new JPasswordField();
        cla = cla.buscarclave();

        int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (ax == JOptionPane.OK_OPTION) {
            String password = new String(pf.getPassword());
            if (!password.equals(cla.getClave())) {
                throw new Exception("clave incorrecta");
            }
        }
    }

    void cargarobservador() {
        con.registrarobservador_mov(this);
    }

    void cargarmovimientos() {
        d_movimiento mov = new d_movimiento();
        d_movimiento mov1 = null;
        Date fecha1 = null;
        Date fecha2 = null;
        Vector v;

        try {
            cleartable();
            controlarfechas();
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            listamovimientos = mov.listarmovimientosentrefechassincfe(fecha1, fecha2);
            for (d_movimiento aux : listamovimientos) {
                mov1 = new d_movimiento();
                v = new Vector();
                mov1.setId(aux.getId());
                mov1.setFecha(aux.getFecha());
                mov1.setTipo(aux.getTipo());
                mov1.setProp_id(aux.getProp_id());
                mov1.setInq_casa(aux.getInq_casa());
                mov1.setMqp(aux.getMqp());
                mov1.setAqp(aux.getAqp());
                mov1.setDetalle(aux.getDetalle());
                mov1.setEntrada(aux.getEntrada());
                mov1.setSalida(aux.getSalida());
                mov1.setComision(aux.getComision());
                mov1.setIva(aux.getIva());
                mov1.setIrpf(aux.getIrpf());
                v.add(mov1.getId());
                v.add(parsefechastring(mov1.getFecha()));
                v.add(mov1.getTipo());
                v.add(mov1.getProp_id());
                v.add(mov1.getInq_casa());
                v.add(mov1.getMqp());
                v.add(mov1.getAqp());
                v.add(mov1.getDetalle());
                v.add(con.mostrarnumero(mov1.getEntrada()));
                v.add(con.mostrarnumero(mov1.getSalida()));
                v.add(con.mostrarnumero(mov1.getComision()));
                v.add(con.mostrarnumero(mov1.getIva()));
                v.add(con.mostrarnumero(mov1.getIrpf()));
                mdltabmov.addRow(v);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void controlarfechas() throws Exception {
        if (jdcfecha1.getDate().equals("") || jdcfecha2.getDate().equals("")) {
            throw new Exception("debe ingresar un rango entre dos fechas");
        }
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    Boolean generarcfe(d_movimiento mov) throws Exception {
        d_propietario prop = new d_propietario();
        d_configuracion conf = new d_configuracion();

        //SI NO TIENE ENTRADA, NO TIENE COMISION
        if (mov.getEntrada() == 0f || mov.getComision() == 0f) {
            return false;
        }

        conf = conf.buscarconfiguracion();

        if (conf.getCfe().equals("NO")) {
            throw new Exception("no estÃ¡ habilitada la emision de CFE en configuracion");
        }
        prop = prop.buscarpropietario(mov.getProp_id());
        String limpiastring = prop.getProp_cirut().replace(".", "").replace("-", "");
        if (!limpiastring.equals(prop.getProp_cirut())) {
            prop.setProp_cirut(limpiastring);
            prop.guardarpropietario(prop);
        }
        if (limpiastring.length() == 8) {
            //es ci - genera e-ticket 
            return (CFEeticket(mov));
        } else {
            //es rut - genera e-factura
            return (CFEefactura(mov));
        }
    }

    Boolean CFEeticket(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            //throw new Exception("movimiento " + mov.getId() + " ya cuenta con factura electronica");
            return true;
        }

        cfe = devuelve_cfe(mov.getId());
        if (cfe != null) {
            guardarcfe(cfe.getIdmov(), cfe.getSerie(), cfe.getNumero(), cfe.getRucemisor(), cfe.getTipo(), cfe.getObservado());
            return true;
        }

        
        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlticket(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        //Integer id = (con.obtenerMayorNumDOCCFE(101) + 1);
        Integer id = (mov.getId());
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                //NO SE GENERO FACTURA, ID REPETIDO
                return false;
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }
        
        return false;
        
    }

    d_cfe devuelve_cfe(int id_mov) throws Exception {
        d_xml dx = new d_xml();
        d_cfe cfe;
        String xml;
        //111_A _119
        xml = con.tiene_doc_dgi(id_mov);

        if (!xml.equals("")) {
            String serie, tipo, numero;
            String[] parts = xml.split("_");
            tipo = parts[0];
            serie = parts[1];
            numero = parts[2];
            String serie_limpia = serie.trim();
            cfe = new d_cfe();
            cfe.setIdmov(id_mov);
            cfe.setSerie(serie_limpia);
            cfe.setNumero(Integer.valueOf(numero));
            cfe.setRucemisor("120196190011");
            cfe.setTipo(Integer.valueOf(tipo));
            cfe.setObservado(1);            
        } else {
            return null;
        }
        return cfe;
    }

    Boolean CFEefactura(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            //throw new Exception("movimiento " + mov.getId() + " ya cuenta con factura electronica");
            return true;
        }

        cfe = devuelve_cfe(mov.getId());
        if (cfe != null) {
            guardarcfe(cfe.getIdmov(), cfe.getSerie(), cfe.getNumero(), cfe.getRucemisor(), cfe.getTipo(), cfe.getObservado());
            return true;
        }
        
        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlfactura(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        //Integer id = (con.obtenerMayorNumDOCCFE(111) + 1);
        Integer id = (mov.getId());
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();

    if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                //NO SE GENERO FACTURA, ID REPETIDO
                return false;
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }
        
        return false;
    }

    void guardarcfe(Integer idmov, String serie, Integer numero, String rucemisor, Integer tipo, Integer observado) throws Exception {

        d_cfe cfe = new d_cfe();

        cfe.setIdmov(idmov);
        cfe.setSerie(serie);
        cfe.setNumero(numero);
        cfe.setRucemisor(rucemisor);
        cfe.setTipo(tipo);
        cfe.setObservado(observado);

        cfe.guardarcfe(cfe);
        con.escribirfichero("se crea documento dgi, movimiento: " + idmov + " -- serie: " + serie + " -- numero: " + numero + " -- ruc emisor: " + rucemisor + " -- tipo: " + tipo + " -- observado: " + observado);
    }

    private static SICFERespuestaEnvioCFE envioCFE(java.lang.String nomusuario, java.lang.String clave,
            java.lang.String tenant, java.lang.String cliente, java.lang.String cfexml, java.lang.String referenciaERP,
            java.lang.String referenciaERP2, java.lang.Boolean devolverQR, java.lang.Integer sizeQR,
            java.lang.Integer imprime, java.lang.String recurso, java.lang.String template, java.lang.Boolean devolverXML,
            java.lang.Boolean erpPideValidacion, java.lang.String version) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.envioCFE(nomusuario, clave, tenant, cliente, cfexml, referenciaERP, referenciaERP2,
                devolverQR, sizeQR, imprime, recurso, template, devolverXML, erpPideValidacion, version);
    }

    void selecciontabla() throws Exception {
        p_fichamantenimiento fim = null;

        int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        if (row != -1) {
            d_movimiento mov = new d_movimiento();
            //datoseleccionado += tblmodelos.getValueAt(row, 2); //guarda el valor que hay en la columna idoperario
            //idpieza = Integer.parseInt(datoseleccionado); //convierte a Integer
            mov.setId((Integer) tblmovimientos.getValueAt(row, 0));
            con.mov = mov;
            //this.setVisible(false);
            fim = new p_fichamantenimiento(null, true);
            fim.setVisible(true);
            //con.cargarpropietario(pro);
            //notificarseleccion(); 
        } else {
            JOptionPane.showMessageDialog(null, toUpperCase("debe seleccionar una fila"), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void cleartable() {
        for (int i = 0; i < tblmovimientos.getRowCount(); i++) {
            mdltabmov.removeRow(i);
            i -= 1;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_listadosmovnocfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_listadosmovnocfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_listadosmovnocfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_listadosmovnocfe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_listadosmovnocfe dialog = new p_listadosmovnocfe(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdcfecha1;
    private com.toedter.calendar.JDateChooser jdcfecha2;
    private javax.swing.JTable tblmovimientos;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar_mov() {
        cargarmovimientos();
    }
}
