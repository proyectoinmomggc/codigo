/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_alquileres_info;
import dominio.d_clave;
import dominio.d_gastos_inq;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_propietario;
import interfaces.observador_inq;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import persistencia.p_conexion;
import presentacion.p_gastocta_inq;
import presentacion.p_mov_inq_correccion;

/**
 *
 * @author Gonzalo
 */
public class p_fichainquilino extends javax.swing.JDialog implements observador_inq {

    p_control con = p_control.getInstancia();
    d_propietario pro = new d_propietario();
    Integer idobtenido = -1;

    d_inquilino inq = new d_inquilino();
    Integer idinquilino = -1;

    /**
     * Creates new form p_fichainquilino1
     */
    public p_fichainquilino(javax.swing.JDialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        //jdcfechaic.setEnabled(false);
        cargarinquilinodefinido();
        cargarinquilino();

        caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");

        //Date f12 = new Date(124, 5,3);
        //System.out.println(obtenerAnios(f12,new Date()));
    }

    void cargar_estado() {
        d_inquilino inq1 = new d_inquilino();

        if (inq == null) {
            return;
        }
        try {
            inq1 = inq1.buscarinquilino(Integer.parseInt(txtnroprin.getText()), Integer.parseInt(txtcasainq.getText()));
            if (inq1 != null) {
                if (inq1.inquilino_bloqueado(Integer.parseInt(txtnroprin.getText()), Integer.parseInt(txtcasainq.getText()))) {
                    //lblestado.setBackground(Color.GREEN);
                    lblestado.setText("BLOQUEADO");
                    bloqueado_button.setText("DESBLOQUEAR");
                } else {
                    lblestado.setText("HABILITADO");
                    bloqueado_button.setText("BLOQUEAR");
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void resetear_estado() {
        lblestado.setText("ESTADO");
        bloqueado_button.setText("BLOQ / DESBLOQ");
    }

    void cargarinquilinodefinido() {
        this.inq = con.inq;
    }

    void generarsaldoalquilerdias() throws Exception {
        p_gastocta_inq gas = null;

        con.inq = this.inq;
        gas = new p_gastocta_inq(null, true);
        gas.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        txttelinq = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtpadcasa = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnbuscar = new javax.swing.JButton();
        caract = new javax.swing.JLabel();
        txtplazoinq = new javax.swing.JTextField();
        txtnominq = new javax.swing.JTextField();
        txtdirinq = new javax.swing.JTextField();
        txtpor = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtimpalq = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cmbirpf = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        txtnroprin = new javax.swing.JTextField();
        cmbtipo = new javax.swing.JComboBox<>();
        lbltipo = new javax.swing.JLabel();
        txtcasainq = new javax.swing.JTextField();
        btnbuscar1 = new javax.swing.JButton();
        lblirpf = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtgarantia = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();
        jdcfechaic = new com.toedter.calendar.JDateChooser();
        jdcarlmrl = new com.toedter.calendar.JDateChooser();
        btnactualizarimporte = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtobservaciones = new javax.swing.JTextArea();
        btnactualizarimporte1 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        lblnombreprop = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblestado = new javax.swing.JLabel();
        bloqueado_button = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FICHA DE INQUILINO");
        setModalityType(null);
        getContentPane().setLayout(null);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("PLAZO");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(200, 270, 120, 17);

        txttelinq.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txttelinq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttelinqActionPerformed(evt);
            }
        });
        getContentPane().add(txttelinq);
        txttelinq.setBounds(10, 190, 138, 30);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setText("INICIO CONTRATO");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(200, 170, 180, 17);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setText("GARANTIA");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(10, 270, 140, 17);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setText("PADRON");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(200, 350, 140, 17);

        txtpadcasa.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtpadcasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtpadcasaActionPerformed(evt);
            }
        });
        getContentPane().add(txtpadcasa);
        txtpadcasa.setBounds(200, 370, 240, 30);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("ID PROP");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(10, 20, 120, 17);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("NUMERO");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 170, 120, 17);

        btnbuscar.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnbuscar.setText("BUSCAR INQ");
        btnbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarActionPerformed(evt);
            }
        });
        btnbuscar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnbuscarKeyPressed(evt);
            }
        });
        getContentPane().add(btnbuscar);
        btnbuscar.setBounds(450, 40, 195, 30);

        caract.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        caract.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        caract.setText("0/255");
        getContentPane().add(caract);
        caract.setBounds(200, 500, 70, 17);

        txtplazoinq.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtplazoinq);
        txtplazoinq.setBounds(200, 290, 240, 30);

        txtnominq.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtnominq);
        txtnominq.setBounds(10, 90, 430, 30);

        txtdirinq.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtdirinq);
        txtdirinq.setBounds(10, 140, 430, 30);

        txtpor.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtpor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtporActionPerformed(evt);
            }
        });
        txtpor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtporKeyTyped(evt);
            }
        });
        getContentPane().add(txtpor);
        txtpor.setBounds(200, 420, 240, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("NOMBRE PROP.:");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(190, 20, 190, 17);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("GUARDAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(450, 290, 195, 30);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("TIPO ALQUILER");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(10, 220, 170, 17);

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setText("IMPORTE");
        getContentPane().add(jLabel14);
        jLabel14.setBounds(10, 400, 120, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("NOMBRE");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 70, 120, 17);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("DIRECCION");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 120, 140, 17);

        txtimpalq.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtimpalq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtimpalqActionPerformed(evt);
            }
        });
        getContentPane().add(txtimpalq);
        txtimpalq.setBounds(10, 420, 138, 30);

        jLabel15.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel15.setText("COMISION");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(200, 400, 150, 17);

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("RETIENE IRPF");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(10, 450, 160, 17);

        cmbirpf.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        cmbirpf.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "SI", "NO", "OTRO" }));
        cmbirpf.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                b(evt);
            }
        });
        getContentPane().add(cmbirpf);
        cmbirpf.setBounds(200, 470, 240, 30);

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("PRIMER REAJUSTE");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(10, 350, 210, 17);

        txtnroprin.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtnroprin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtnroprinKeyPressed(evt);
            }
        });
        getContentPane().add(txtnroprin);
        txtnroprin.setBounds(10, 40, 80, 30);

        cmbtipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "LOCAL", "HABITACION" }));
        cmbtipo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                a(evt);
            }
        });
        cmbtipo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbtipoMouseClicked(evt);
            }
        });
        getContentPane().add(cmbtipo);
        cmbtipo.setBounds(200, 240, 240, 30);

        lbltipo.setBackground(java.awt.Color.green);
        lbltipo.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lbltipo.setOpaque(true);
        getContentPane().add(lbltipo);
        lbltipo.setBounds(10, 240, 138, 30);

        txtcasainq.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtcasainq.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtcasainqKeyPressed(evt);
            }
        });
        getContentPane().add(txtcasainq);
        txtcasainq.setBounds(100, 40, 80, 30);

        btnbuscar1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnbuscar1.setText("+ ID");
        btnbuscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscar1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnbuscar1);
        btnbuscar1.setBounds(450, 90, 195, 30);

        lblirpf.setBackground(java.awt.Color.green);
        lblirpf.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblirpf.setOpaque(true);
        getContentPane().add(lblirpf);
        lblirpf.setBounds(10, 470, 138, 30);

        jScrollPane3.setViewportView(txtgarantia);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(10, 290, 138, 55);

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("ELIMINAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(450, 240, 195, 30);

        jdcfechaic.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfechaic);
        jdcfechaic.setBounds(200, 190, 240, 30);

        jdcarlmrl.setDateFormatString("MM/yyyy");
        jdcarlmrl.setEnabled(false);
        jdcarlmrl.setFocusable(false);
        jdcarlmrl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        getContentPane().add(jdcarlmrl);
        jdcarlmrl.setBounds(10, 370, 138, 30);

        btnactualizarimporte.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnactualizarimporte.setText("CONTRATO NUEVO O RENOVAR");
        btnactualizarimporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizarimporteActionPerformed(evt);
            }
        });
        getContentPane().add(btnactualizarimporte);
        btnactualizarimporte.setBounds(450, 140, 195, 30);

        txtobservaciones.setColumns(20);
        txtobservaciones.setLineWrap(true);
        txtobservaciones.setRows(5);
        txtobservaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txtobservaciones.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtobservacionesFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtobservacionesFocusLost(evt);
            }
        });
        txtobservaciones.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtobservacionesKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtobservacionesKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtobservaciones);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 520, 640, 90);

        btnactualizarimporte1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        btnactualizarimporte1.setText("FUNCION MENSUAL");
        btnactualizarimporte1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnactualizarimporte1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnactualizarimporte1);
        btnactualizarimporte1.setBounds(450, 190, 195, 30);

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setText("OBSERVACIONES");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(10, 500, 130, 17);

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setText("ID INQ");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(100, 20, 100, 17);

        lblnombreprop.setBackground(java.awt.Color.green);
        lblnombreprop.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblnombreprop.setOpaque(true);
        getContentPane().add(lblnombreprop);
        lblnombreprop.setBounds(190, 40, 250, 30);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "ESTADO", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 14))); // NOI18N

        lblestado.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblestado.setText("ESTADO");
        jPanel1.add(lblestado);

        bloqueado_button.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        bloqueado_button.setText("BLOQ / DESBLOQ");
        bloqueado_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bloqueado_buttonActionPerformed(evt);
            }
        });
        jPanel1.add(bloqueado_button);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(450, 330, 195, 100);

        jMenu1.setText("LISTADO");

        jMenuItem1.setText("INQUILINOS");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 671, 689);
    }// </editor-fold>//GEN-END:initComponents

    private void txttelinqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttelinqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttelinqActionPerformed

    private void txtpadcasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtpadcasaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtpadcasaActionPerformed

    private void btnbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarActionPerformed
        //jdcfechaic.setEnabled(false);
        funcbuscar();
    }//GEN-LAST:event_btnbuscarActionPerformed

    void funcbuscar() {
        try {
            buscarinquilino();
            cargarinquilino();
            caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void txtporActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtporActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtporActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Boolean esnuevo = false;
        d_clave cla = new d_clave();
        Float importe = 0f;
        Date fecha_ic = new Date();
        //CONTROL SI RETIENE IRPF

        try {
            controlarcampos();

            JPasswordField pf = new JPasswordField();
            cla = cla.buscarclave();
            int axp = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (axp == JOptionPane.OK_OPTION) {
                String password = new String(pf.getPassword());
                if (!password.equals(cla.getClave())) {
                    throw new Exception("clave incorrecta");
                }
            } else {
                return;
            }

            if (inq == null) {
                inq = new d_inquilino();
                esnuevo = true;
            } else {
                importe = inq.getInq_impalq();
                fecha_ic = inq.getInq_fechaic();
            }
            inq.setProp_id(Integer.parseInt(txtnroprin.getText()));
            buscarpropietario(inq.getProp_id());
            inq.setInq_nombre(txtnominq.getText());
            inq.setInq_casa(Integer.parseInt(txtcasainq.getText()));
            inq.setInq_direccion(txtdirinq.getText());
            inq.setInq_tel(Integer.parseInt(txttelinq.getText()));
            inq.setInq_tipoalq(lbltipo.getText());
            inq.setInq_fechaic(parsefechadate(jdcfechaic.getDate()));
            inq.setArlmrl(parsefechadate(jdcfechaic.getDate()));
            //parsefechadate(jdcarlmrl.getDate())
            inq.setInq_garantia(txtgarantia.getText());
            inq.setInq_padcasa(txtpadcasa.getText());
            inq.setInq_impalq((con.guardarnumero((txtimpalq.getText()))));
            inq.setInq_impalq_aux((con.guardarnumero((txtimpalq.getText()))));
            inq.setInq_por(con.guardarnumero(txtpor.getText()));
            inq.setInq_plazo(Integer.parseInt(txtplazoinq.getText()));
            inq.setInq_observaciones(txtobservaciones.getText());
            inq.setInq_irpf(cmbirpf.getSelectedItem().toString());
            //inq.setInq_fchcontratoaux(parsefechadate(new Date()));
            inq.setInq_saldo(0f);
            if (esnuevo == false & !txtnominq.getText().equals(inq.getInq_nombre())) {
                inq.setInq_nombre(txtnominq.getText());
                int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea reestablecer la cuenta?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    cargarcampospordefecto();
                    return;
                }
            }
            int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea guardar los datos?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax == JOptionPane.YES_OPTION) {
                if (!esnuevo) {
                    Boolean hubo_cambio_importe_o_fecha = false;
                    if ((!importe.equals(con.guardarnumero((txtimpalq.getText()))))) {
                        hubo_cambio_importe_o_fecha = true;
                        con.escribirfichero("INQ - se edita importe alquiler, id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa()
                                + " -- imp. alq. anterior: " + con.mostrarnumero(importe)
                                + " -- imp. alq. actual: " + con.mostrarnumero((inq.getInq_impalq())));
                    }
                    if ((!fecha_ic.equals(inq.getInq_fechaic()))) {
                        hubo_cambio_importe_o_fecha = true;
                        con.escribirfichero("INQ - se edita fecha inicio alquiler y realiza funcion mensual, id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa()
                                + " -- fecha inicio anterior: " + parsefechastring(fecha_ic)
                                + " -- fecha inicio actual: " + parsefechastring(inq.getInq_fechaic()));
                    }
                    //FUNCION MENSUAL PARA ESTE INQUILINO
                    if (hubo_cambio_importe_o_fecha) {
                        funcion_mensual(inq, true);
                        con.escribirfichero("INQ - se realiza funcion mensual, para inq con id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa());
                    }
                }
                inq.guardarinquilino(inq);
                con.escribirfichero("INQ - se edita inquilino, id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa()
                        + " -- nombre: " + inq.getInq_nombre() + " -- direccion: " + inq.getInq_direccion() + " -- telefono: " + inq.getInq_tel()
                        + " -- tipo alq.: " + inq.getInq_tipoalq() + " -- fecha IC.: " + parsefechastring(inq.getInq_fechaic())
                        + " -- garantia: " + inq.getInq_garantia() + " -- padron: " + inq.getInq_padcasa() + " -- imp. alq.: " + con.mostrarnumero(inq.getInq_impalq())
                        + " -- porc.: " + con.mostrarnumero(inq.getInq_por()) + " -- plazo: " + inq.getInq_plazo() + " -- obs.: " + inq.getInq_observaciones() + " -- irpf: " + inq.getInq_irpf());

                JOptionPane.showMessageDialog(this, "INQUILINO INGRESADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                int dia = devuelvedia(inq.getInq_fechaic());
                if (dia != 1) {
                    //buscar si el saldo alquiler dias ya esta ingresado
                    d_gastos_inq gas = new d_gastos_inq();
                    gas.setProp_id(inq.getProp_id());
                    gas.setInq_casa(inq.getInq_casa());
                    gas.setDetalle("ALQUILER DIAS");
                    gas.setAqp(devuelveanio(inq.getInq_fechaic()));
                    gas.setMqp(devuelvemes(inq.getInq_fechaic()));
                    gas = gas.buscargastoporinqpendiente(gas);
                    if (gas == null) {
                        gas = new d_gastos_inq();
                        gas.setProp_id(inq.getProp_id());
                        gas.setInq_casa(inq.getInq_casa());
                        gas.setDetalle("ALQUILER DIAS");
                        gas.setAqp(devuelveanio(inq.getInq_fechaic()));
                        gas.setMqp(devuelvemes(inq.getInq_fechaic()));
                        gas = gas.buscargastoporinqnopendiente(gas);
                        if (gas == null && inq.getInq_plazo() != 0) {
                            int ax1 = JOptionPane.showConfirmDialog(null, toUpperCase("pago de alquiler comienza el mes siguiente al de inicio de contrato \n ¿desea generar un saldo de alquiler con la diferencia de dias?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                            if (ax1 == JOptionPane.YES_OPTION) {
                                generarsaldoalquilerdias();
                            }
                        }
                    }
                }
                buscarinquilino();
                cargarinquilino();
                funcion_mensual(inq, false);
                actualizar();
            }
            jdcfechaic.setEnabled(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    void funcion_mensual(d_inquilino inq_recibido, Boolean elimina_info) throws Exception {
        d_alquileres_info alq = new d_alquileres_info();
        inq_recibido.reiniciarimpalquilerparticular(inq_recibido.getProp_id(), inq_recibido.getInq_casa());
        inq_recibido = inq_recibido.buscarinquilino(inq_recibido.getProp_id(), inq_recibido.getInq_casa());
        if (elimina_info) {
            alq.eliminar_alquiler_info(inq_recibido.getProp_id(), inq_recibido.getInq_casa());
            con.escribirfichero("INQ - se eliminan correcciones, para inq con id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa());
        }

        con.actualizar_deuda_inq(inq_recibido);

        //ver que la fecha_inicio arranque en dia 1 siempre
        if (elimina_info) {
            String fecha_ic = 1 + "/" + devuelvemes(inq_recibido.getInq_fechaic()) + "/" + devuelveanio(inq_recibido.getInq_fechaic());
            Date fecha_ic_date = parsefechadate(fecha_ic);
            inq.setArlmrl(inq.sumar1anio(fecha_ic_date));
        }

        if (inq_recibido.getInq_tipoalq().equals("HABITACION")) {
            actualizarimportealquilerhabitacion(inq_recibido);
        }
        if (inq_recibido.getInq_tipoalq().equals("LOCAL")) {
            actualizarimportealquilerlocal(inq_recibido);
        }
        guardamesactualcomogasto(inq_recibido);
    }

    void guardamesactualcomogasto(d_inquilino inq) throws Exception {
        d_movimiento aux = new d_movimiento();
        //float importe = 0f;
        int mqplistado = -1;
        int aqplistado = -1;

        //aux = new d_movimiento();
        aux.setProp_id(inq.getProp_id());
        aux.setInq_casa(inq.getInq_casa());
        aux.setMqp(devuelvemes(new Date()));
        aux.setAqp(devuelveanio(new Date()));
        mqplistado = aux.getMqp();
        aqplistado = aux.getAqp();

        String fecha = "01/" + mqplistado + "/" + aqplistado;
        Date fechad = parsefechadate(fecha);
        if (estafechaesantesdeempezarcontrato(fechad, inq)) {
            return;
        }

        aux = cuotapaga(aux, inq);
        if (aux != null) {
            return;
        }

        d_gastos_inq gas = estemestienesaldo(inq, mqplistado, aqplistado);
        if (gas != null) {
            return;
        }

        guardaralquilermesactual(inq, mqplistado, aqplistado);
        //obtenerlistadogastospendientesinq();
    }

    void guardaralquilermesactual(d_inquilino inq, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        d_gastos_inq aux = new d_gastos_inq();

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(mqp);
        gas.setAqp(aqp);
        gas.setEstado(0);
        gas.setDetalle("SALDO ALQUILER");
        gas.setImporte(inq.getInq_impalq_aux()); //09-07 cambio, estaba: Inq_impalq

        //chequearcuotapaga-revisar
        aux = aux.buscaralquilermes(gas);
        if (aux != null) {
            if (aux.getEstado().equals(1) && aux.getImporte().equals(inq.getInq_impalq())) {
                d_movimiento mov1 = new d_movimiento();
                mov1.setProp_id(inq.getProp_id());
                mov1.setInq_casa(inq.getInq_casa());
                mov1.setMqp(gas.getMqp());
                mov1.setAqp(gas.getAqp());
                mov1.actualizardetalle(mov1);
                //listamovimientos();
            } else {
                //CHEQUEAR QUE REAJUSTE ESTE MES
                aux.setImporte(inq.getInq_impalq());
                gas.setDetalle("ALQUILER");//22-11
                if (aux.getImporte() <= 0f) {
                    return;
                }
                gas.guardargastoinq(aux);
                //cant += 1;
            }
        } else {
            //CHEQUEAR QUE REAJUSTE ESTE MES
            gas.setDetalle("ALQUILER");//22-11
            if (gas.getImporte() <= 0f) {
                return;
            }
            gas.guardargastoinq(gas);
            //cant += 1;
        }
    }

    d_gastos_inq estemestienesaldo(d_inquilino inq, int mqp, int aqp) throws Exception {
        inq = inq.buscarinquilino(inq.getProp_id(), inq.getInq_casa());

        d_gastos_inq gas = new d_gastos_inq();
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        gas = buscargasenlistagastos(gas);

        if (gas != null) {
            if (gas.getEstado().equals(0)) {
                //gas.setImporte(inq.getInq_impalq_aux() - (revisarentregassaldo(inq.getProp_id(), inq.getInq_casa(), mqp, aqp)));//29/10/23 se sacó
                //BUSCAR SI NO TIENE ALGUN ENTREGA DE SALDO
                //OPCION -> AL NUEVO IMPORTE RESTARLE ENTREGAS A CUENTA ALQUILER

                gas.actualizarimporte(gas);
                return gas;

            }
        } else {
            //SI EMPIEZA ESTE MES EL CONTRATO Y TIENE UN ALQUILER DIAS, NO GENERAR SALDO ALQUILER
            if (estafechaempiezacontrato(parsefechadate("01/" + mqp + "/" + aqp), inq)) {
                gas = new d_gastos_inq();
                gas.setProp_id(inq.getProp_id());
                gas.setInq_casa(inq.getInq_casa());
                gas.setDetalle("ALQUILER DIAS");
                gas.setAqp(aqp);
                gas.setMqp(mqp);
                gas = buscargasenlistagastosalquilerdias(gas);
                if (gas != null) {
                    return gas;
                }
            }
        }
        return null;
    }

    d_gastos_inq buscargasenlistagastosalquilerdias(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilerdias(gas);
    }

    Boolean estafechaempiezacontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaempiezacontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(inq.getInq_fechaic());
        anioactual = devuelveanio(inq.getInq_fechaic());

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == 0) {
            return true;
        }
        return estafechaempiezacontrato;
    }

    Boolean estafechaesantesdeempezarcontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaesantesdeempezarcontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(inq.getInq_fechaic());
        anioactual = devuelveanio(inq.getInq_fechaic());

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == -1) {
            return true;
        }
        return estafechaesantesdeempezarcontrato;
    }

    void actualizarimportealquilerhabitacion(d_inquilino inq) throws Exception {
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        int anioactual;
        int anioic;
        float axreajustediv = 0f;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Date fechareajustecomun = inq.getArlmrl();
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);
        Boolean importeingresado = false;
        Boolean esCN = false;

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            fechareajustecomun = fechareajusteanual;
            //System.out.println(fecharecorrida+"\n"+total);
        } //else {
        //ingresarimporteamano(inq);
        //}
        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
            if (alq.getDetalle().equals("CN")) {
                esCN = true;
                mov = null; //para trabajar solo con fechas de correccion 08/09/22
            }
        }

        if (mov == null && !importeingresado) {
            //ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        if (alq != null && esCN && mov == null) {
            fecharecorridadate = alq.getFecha();
            //CHEQUEAR SI LA FECHA QUE APLICA CORRECCION (fecharecorridadate) ESTA DENTRO DEL AÑO EN QUE NO REAJUSTA

            fechareajustecomun = sumar4meses(fecharecorridadate);//CHEQUEAR QUE ESTA FECHA NO SEA ANTES DE FECHA INICIO DE CONTRATO
            fechareajusteanual = sumaraniosunafecha(fecharecorridadate, 1); //(15-06)NO SE LE SUMA 1 MES, PORQUE GUARDA MES DE REAJUSTE DIRECTO - DEBERIA SUMAR 1 AÑO
            par = par.buscarparametroporfecha(fecharecorridadate);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fecharecorridadate) + "/" + devuelveanio(fecharecorridadate));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
        }//else si el mov es distinto a null 08/09/22
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = total * par.getProcaumento() / 100;
                axreajustediv = axreajustediv / 3;
                total += (axreajustediv);
                fechareajustecomun = sumar4meses(fechareajustecomun);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
                if (!estafechaestadentrodelperiodonoreajustable(fecharecorridadate, inq.getInq_fechaic())) {
                    total += (axreajustediv);
                }
                fechareajustecomun = sumar4meses(fechareajustecomun);
            }
            if (esCN) {
                if (alq != null) {
                    if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                        total = alq.getImporte();
                    }
                }
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }

        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
            total += (axreajustediv);
        } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
            total += (axreajustediv);
        }
        if (esCN) {
            if (alq != null) {
                if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                    total = alq.getImporte();
                }
            }
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    Boolean estafechaestadentrodelperiodonoreajustable(Date fecha_recibida, Date fecha_inicio_contrato) {
        //PERIODO = 1 AÑO
        Date fecha_fin_periodo = sumaraniosunafecha(fecha_inicio_contrato, 1);

        int compara_fecha_inicio = fecha_recibida.compareTo(fecha_inicio_contrato);
        int compara_fecha_fin = fecha_recibida.compareTo(fecha_fin_periodo);

        if (compara_fecha_inicio >= 0 && compara_fecha_fin <= 0) {
            //FECHA RECIBIDA ESTA DENTRO DEL PERIODO NO REAJUSTABLE
            return true;
        }

        return false;
    }

    void corregirsaldoalquiler(float total, int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(prop_id);
        gas.setInq_casa(inq_casa);
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        if (mqp == 10) {
            String a = "d";
        }

        if ((mqp >= 5 && aqp == 2020) || (aqp > 2020)) {
            gas = buscargasenlistagastos(gas);
            if (gas != null) {
                if (gas.getEstado().equals(0)) {
                    //revisar entregas
                    total = gas.getImporte();
                    //total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp)); se saco 29/10/23
                    gas.setImporte(total);
                    if (gas.getDetalle().equals("SALDO ALQUILER")
                            || gas.getDetalle().equals("ALQUILER")
                            || gas.getDetalle().equals("ALQUILER MES")
                            || gas.getDetalle().equals("SALDO ALQUILER DIAS")) {
                        //revisar entregas
                        gas.actualizarimporte(gas);
                    }
                }
            } else { //29-04
                //BUSCAR EN MOVIMIENTOS
                //ESTA RECORRIENDO LA FUNCION MENSUAL, SI NO ENCUENTRA TENDRIA QUE INGRESAR UN GASTO TIPO 'alquiler' CON ESA FECHA
                d_movimiento x = new d_movimiento();
                x.setProp_id(prop_id);
                x.setInq_casa(inq_casa);
                x.setAqp(aqp);
                x.setMqp(mqp);
                x = buscarmovenlistasoloalquiler(x, "movimientos");
                if (x == null) {
                    x = new d_movimiento();
                    x.setProp_id(prop_id);
                    x.setInq_casa(inq_casa);
                    x.setAqp(aqp);
                    x.setMqp(mqp);
                    x = buscarmovenlistasoloalquiler(x, "movimientosviejos");
                    if (x == null) {
                        //CHEQUEAR QUE NO SEA MES Y AÑO ACTUAL
                        if (!es_mes_y_anio_actual(mqp, aqp)) {
                            //CHEQUEAR FECHA RECORRIDA SEA POSTERIOR A INICIO CONTRATO
                            if (!es_anterior_a_inicio_contrato(prop_id, inq_casa, mqp, aqp)) {
                                gas = new d_gastos_inq();
                                gas.setProp_id(prop_id);
                                gas.setInq_casa(inq_casa);
                                gas.setDetalle("SALDO ALQUILER");
                                gas.setAqp(aqp);
                                gas.setMqp(mqp);
                                gas.setImporte(total);
                                gas.setEstado(0);
                                d_gastos_inq gas_1 = new d_gastos_inq();
                                gas_1 = gas;
                                gas_1 = gas_1.buscargastoalquiler(gas_1);
                                if (gas_1 == null) {
                                    total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp));
                                    gas.setImporte(total);
                                    if (total > 10f) {
                                        gas.guardargastoinq(gas);
                                        con.escribirfichero("SE INGRESA 'ALQUILER' DESDE FUNCION MENSUAL (FICHA) - id prop.: " + gas.getProp_id() + " -- " + "id inq.: " + gas.getInq_casa() + " -- "
                                                + "mqp: " + gas.getMqp() + " -- " + "aqp: " + gas.getAqp() + " -- " + "detalle: " + gas.getDetalle() + " -- " + "total: " + con.mostrarnumero(gas.getImporte()));
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Boolean es_anterior_a_inicio_contrato(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_inquilino i = new d_inquilino();
        Date fecha_ic = i.devuelve_fecha_ic(prop_id, inq_casa);
        String fecha_ic_string = "01/" + devuelvemes(fecha_ic) + "/" + devuelveanio(fecha_ic);
        fecha_ic = parsefechadate(fecha_ic_string);
        String fecha_listado_string = "01/" + mqp + "/" + aqp;
        Date fecha_listado = parsefechadate(fecha_listado_string);
        return fechaesanterioracomienzodecontrato(fecha_ic, fecha_listado);
    }

    Boolean es_mes_y_anio_actual(int mqp, int aqp) {
        int mes_actual = devuelvemes(new Date());
        int anio_actual = devuelveanio(new Date());

        if (mqp == mes_actual && aqp == anio_actual) {
            return true;
        }
        return false;
    }

    Float revisarentregassaldo(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_movimiento mov = new d_movimiento();
        float montoentregas = 0f;

        montoentregas = mov.totalentregassaldo(prop_id, inq_casa, mqp, aqp);

        return montoentregas;
    }

    d_gastos_inq buscargasenlistagastos(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilermes(gas);
    }

    Date sumar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 1);
        return calendario.getTime();
    }

    public Date sumar4meses(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 4);
        return calendario.getTime();
    }

    Boolean sonfechasiguales(Date fechar1, Date fecha2) throws Exception {
        int compara = fechar1.compareTo(fecha2);
        if (compara == 0) {
            return true;
        }
        return false;
    }

    Date sumaraniosunafecha(Date fecha, int cantidad) {
        Date nuevafecha = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.YEAR, cantidad);
        nuevafecha = cal.getTime();
        return nuevafecha;
    }

    void actualizarimportealquilerlocal(d_inquilino inq) throws Exception {
        int anioactual;
        int anioic;
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        float axreajustediv;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Boolean importeingresado = false;
        Boolean esCN = false;
        //if (inq.getProp_id() == 221 && inq.getInq_casa() == 17) {
        //float a = 5f;
        //}
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        /*if ((obtenercantAnios(inq.getInq_fechaic(), new Date()) > 1) && (mov == null)) {
            //HACE MAS DE UN ANIO NO TIENE MOV PREVIO AL REAJUSTE, DEBE INGRESAR CORRECCION
        }*/
        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            //NUEVA FECHA REAJUSTE
            inq.setArlmrl(fechareajusteanual);
            //inq.setArlmrl(chequearreajusteanteriorafechaactualsololocales(inq.getArlmrl()));
            //fechareajusteanual = inq.getArlmrl();
        } //else {
        //ingresarimporteamano(inq);
        //}

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
            if (alq.getDetalle().equals("CN")) {
                esCN = true;
                mov = null;
            }
        }

        if (mov == null && !importeingresado) {
            //ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        //A VECES LLEGA fecharecorridadate >(MAYOR) fechaactualdate  
        if (alq != null && esCN && mov == null) {
            fecharecorridadate = alq.getFecha();
            fechareajusteanual = fecharecorridadate; //NO SE LE SUMA 1 MES, PORQUE GUARDA MES DE REAJUSTE DIRECTO
        }
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = par.getProcaumento();
                total += (total * axreajustediv / 100);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            }
            if (esCN) {
                if (alq != null) {
                    if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                        total = alq.getImporte();
                    }
                }
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }
        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = par.getProcaumento();
            total += (total * axreajustediv / 100);
        }
        if (esCN) {
            if (alq != null) {
                if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                    total = alq.getImporte();
                }
            }
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    d_movimiento buscarultimoimporteantesdelreajuste(d_inquilino inq) throws Exception {
        d_movimiento mov = null;
        Date fecha;
        int i = 0;
        //si es movimientosviejos buscar el año anterior (2019 y años anteriores)
        String tabla = "movimientosviejos";

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactuald = parsefechadate(fechaactual);

        fecha = restar1mes(inq.getArlmrl());

        //A VECES LA FECHA DE REAJUSTE ES MAYOR A LA FECHA ACTUAL
        //NOS ASEGURAMOS DE QUE BUSQUE MOVIMIENTOS PREVIOS A LA FECHA ACTUAL
        while (fecha.compareTo(fechaactuald) == 1) {
            fecha = sumaraniosunafecha(fecha, -1);
        }

        while (mov == null && i < 10) {
            //tabla = "movimientosviejos";//tabla = "movimientosviejos";
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                mov = null;
                break;
            }
            mov = new d_movimiento();
            mov.setProp_id(inq.getProp_id());
            mov.setInq_casa(inq.getInq_casa());
            int aqp = devuelveanio(fecha);
            if (aqp == 2020) {
                aqp = aqp - 1;
                fecha = sumaraniosunafecha(fecha, -1);
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    mov = null;
                    break;
                }
            }
            mov.setAqp(aqp);
            mov.setMqp(devuelvemes(fecha));
            mov = mov.buscaralquilermesoalquiler(mov, tabla);
            //buscarcuotapaga
            if (mov == null) {
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(aqp);
                mov.setMqp(devuelvemes(fecha));
                mov = cuotapaga(mov, inq);
            }
            fecha = sumaraniosunafecha(fecha, -1);
            i = i + 1;
        }

        fecha = restar1mes(inq.getArlmrl());

        while (fecha.compareTo(fechaactuald) == 1) {
            fecha = sumaraniosunafecha(fecha, -1);
        }

        if (mov == null) {
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                return null;
            }
            //fecha = restar1mes(inq.getArlmrl());
            tabla = "movimientos";//tabla = "movimientosviejos";
            while (mov == null && i < 10) {
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    return null;
                }
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(devuelveanio(fecha));
                mov.setMqp(devuelvemes(fecha));
                mov = mov.buscaralquilermesoalquiler(mov, tabla);
                //buscarcuotapaga
                if (mov == null) {
                    mov = new d_movimiento();
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    mov.setAqp(devuelveanio(fecha));
                    mov.setMqp(devuelvemes(fecha));
                    mov = cuotapaga(mov, inq);
                }
                fecha = sumaraniosunafecha(fecha, -1);
                i = i + 1;
            }
        }
        if ((obtenercantAnios(inq.getInq_fechaic(), new Date()) > 1) && (mov == null)) {
            //HACE MAS DE UN ANIO NO TIENE MOV PREVIO AL REAJUSTE, DEBE INGRESAR CORRECCION
            JOptionPane.showMessageDialog(null, toUpperCase("SE ACONSEJA INGRESAR UNA CORRECCION"), "ATENCION", JOptionPane.ERROR_MESSAGE);
            //p_mov_inq_correccion gas = null;

            /*con.inq = inq;
            gas = new p_mov_inq_correccion(null, true);
            gas.setVisible(true);
             */
        }

        return mov;
    }

    int obtenercantAnios(Date first, Date last) {
        Calendar a = getCalendar(first);
        Calendar b = getCalendar(last);
        int diff = b.get(Calendar.YEAR) - a.get(Calendar.YEAR);
        if (a.get(Calendar.MONTH) > b.get(Calendar.MONTH)
                || (a.get(Calendar.MONTH) == b.get(Calendar.MONTH)
                && a.get(Calendar.DATE) > b.get(Calendar.DATE))) {
            diff--;
        }
        return diff;
    }

    public static Calendar getCalendar(Date date) {
        Calendar cal = Calendar.getInstance(Locale.getDefault());
        cal.setTime(date);
        return cal;
    }

    d_movimiento buscarmovenlistasoloalquiler(d_movimiento mov, String tabla) throws Exception {
        return mov.buscaralquilermesoalquiler(mov, tabla);
    }

    d_movimiento cuotapaga(d_movimiento mov, d_inquilino inq) throws Exception {
        d_movimiento mov1;
        d_gastos_inq gas;

        //mov1 = mov1.buscarcuotapaga(mov);
        mov1 = buscarmovenlistasoloalquiler(mov, "movimientos");
        //buscar en la lista de mov generada
        if (mov1 == null) {
            gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setDetalle("SALDO ALQUILER");
            gas.setAqp(mov.getAqp());
            gas.setMqp(mov.getMqp());
            gas = buscargasenlistagastos(gas);

            //buscar en la lista de gastos 
            if (gas != null) {
                if (gas.getEstado().equals(1)) {
                    //buscaralquilerpagadoconsaldo
                    //mov1 = new d_movimiento();
                    mov1 = buscaralquilerpagadoconsaldo(mov);
                    //mov1.setEntrada(gas.getImporte() + importealquilerpagadoacuenta(mov));
                    return mov1;
                    //esta pago el mes, ver la forma que devuelva el movimiento correspondiente
                    //esta devolviendo vacio, porque lo pago a traves de un saldo y no como alquiler comun
                } else {
                    return null;
                }
            }
        }
        return mov1;
    }

    d_movimiento buscaralquilerpagadoconsaldo(d_movimiento mov) throws Exception {
        return mov.buscarsaldoalquiler(mov);
    }

    Boolean fechaesanterioracomienzodecontrato(Date fechaic, Date fecha) {
        int i = fechaic.compareTo(fecha);
        if (i == -1) {
            return false;
        }
        return true;
    }

    Date restar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, -1);
        return calendario.getTime();
    }

    Date ajustarreajuste(Date fechareajustevieja) throws Exception {
        String fechastrreajustenuevo = "";
        Date fechareajustenueva = null;
        //10 plazo vigente

        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(fechareajustevieja);

        if (anioactual < anioreajuste) {
            return fechareajustevieja;
        }

        fechastrreajustenuevo = "01/" + devuelvemes(fechareajustevieja) + "/" + devuelveanio(new Date());

        fechareajustenueva = parsefechadate(fechastrreajustenuevo);
        //guardaralquilermesactual();
        //fechareajustenueva = inq.sumar1anio(fechareajustenueva);

        return fechareajustenueva;
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    void buscarpropietario(Integer id) throws Exception {
        d_propietario prop = new d_propietario();

        prop = prop.buscarpropietario(id);
        if (prop == null) {
            throw new Exception("propietario no existe");
        }
    }

    void cargarcampospordefecto() {
        //txtnroprin.setEnabled(true);
        //txtcasainq.setEnabled(true);
        lbltipo.setText("-");
        //txtnroprin.setText("");
        //txtcasainq.setText("");
        //txtnominq.setText("");
        txtdirinq.setText("DIRECCION");
        txttelinq.setText("123456789");
        cargarfecha();
        //txtfechaic.setText("");
        txtgarantia.setText("GARANTIA");
        txtplazoinq.setText("0");
        //txtarlmrl.setText("");
        txtpadcasa.setText("1234");
        txtimpalq.setText("0");
        txtpor.setText("0");
        lblirpf.setText("-");
        txtobservaciones.setText("");
    }

    void cargarfecha() {

        try {
            jdcfechaic.setDateFormatString("dd/MM/yyyy");
            jdcarlmrl.setDateFormatString("MM/yyyy");
            jdcfechaic.setDate(new Date());
            jdcarlmrl.setDate(new Date());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    Date parsefechastrtodate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    private void txtimpalqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtimpalqActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtimpalqActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            java.sql.Connection c;
            p_conexion conex = p_conexion.getInstancia();
            c = conex.crearconexion();

            String template = "report-4.jasper";
            JasperReport reporte = null;
            reporte = (JasperReport) JRLoader.loadObject(template);

            //Map param = new HashMap();
            //param.put("id", 1);
            JasperPrint jasperprint = JasperFillManager.fillReport(reporte, null, c);
            //donde dice 'null' va el parametro, si es utilizado
            JasperViewer visor = new JasperViewer(jasperprint, false);
            visor.setTitle("LISTA DE INQUILINOS");
            visor.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnbuscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscar1ActionPerformed
        try {
            resetear_estado();
            jdcfechaic.setEnabled(false);
            //lblnombreprop.setText("");
            obtenerid();
            caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnbuscar1ActionPerformed

    private void cmbtipoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbtipoMouseClicked

    }//GEN-LAST:event_cmbtipoMouseClicked

    private void b(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_b
        String tipo = "";

        tipo = cmbirpf.getSelectedItem().toString();

        lblirpf.setText(tipo);
    }//GEN-LAST:event_b

    private void a(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_a
        String tipo = "";

        tipo = cmbtipo.getSelectedItem().toString();

        lbltipo.setText(tipo);
    }//GEN-LAST:event_a

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        d_clave cla = new d_clave();
        //d_configuracion conf = new d_configuracion();

        try {
            if (inq != null) {
                //conf = conf.buscarconfiguracion();
                //if (conf.getClave().equals("SI")) {
                JPasswordField pf = new JPasswordField();
                cla = cla.buscarclave();
                int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if (ax == JOptionPane.OK_OPTION) {
                    String password = new String(pf.getPassword());
                    if (!password.equals(cla.getClave())) {
                        throw new Exception("clave incorrecta");
                    }
                } else {
                    return;
                }
                //}
                eliminar_gastos_y_correcciones();
            }
            jdcfechaic.setEnabled(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    void eliminar_gastos_y_correcciones() throws Exception {
        d_alquileres_info alq = new d_alquileres_info();
        d_inquilino inq1 = new d_inquilino();
        d_gastos_inq gas = new d_gastos_inq();
        Integer cantgastos = -1;

        cantgastos = gas.cantsaldospendientes(inq.getProp_id(), inq.getInq_casa());
        alq.eliminar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (cantgastos == 0 || cantgastos == -1) {
            inq1.eliminarinquilino(inq.getProp_id(), inq.getInq_casa());
            con.escribirfichero("INQ - se elimina inquilino, id prop: " + gas.getProp_id() + " -- id inq: " + gas.getInq_casa());
            JOptionPane.showMessageDialog(this, "INQUILINO ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            reiniciarcampos();
            return;
        }

        int ax = JOptionPane.showConfirmDialog(null,
                "INQUILINO TIENE " + cantgastos + " GASTO/S PENDIENTE/S \n ¿DESEA ELIMINAR LOS DATOS?", "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
        if (ax == JOptionPane.YES_OPTION) {
            gas.eliminargastos(inq.getProp_id(), inq.getInq_casa());
            inq1.eliminarinquilino(inq.getProp_id(), inq.getInq_casa());
            con.escribirfichero("INQ - se elimina inquilino y deudas, id prop: " + gas.getProp_id() + " -- id inq: " + gas.getInq_casa());
            JOptionPane.showMessageDialog(this, "INQUILINO ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            reiniciarcampos();
        }
    }

    private void txtnroprinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtnroprinKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            funcbuscar();
        }
    }//GEN-LAST:event_txtnroprinKeyPressed

    private void btnbuscarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnbuscarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            funcbuscar();
        }
    }//GEN-LAST:event_btnbuscarKeyPressed

    private void txtcasainqKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcasainqKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            funcbuscar();
        }
    }//GEN-LAST:event_txtcasainqKeyPressed

    private void txtporKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtporKeyTyped
        char car = evt.getKeyChar();
        if (!Character.isDigit(car)) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_txtporKeyTyped

    private void btnactualizarimporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizarimporteActionPerformed

        //INFORMAR AL LOG CAMBIO DE FECHA DE CONTRATO
        jdcfechaic.setEnabled(true);
        //CHEQUEAR SI CAMBIA LA FECHA PARA GRABAR EN LOG
        /*
        p_control con = p_control.getInstancia();
        String importe = "";
        Float fimporte;

        if (inq == null) {
            return;
        }

        try {
            importe = JOptionPane.showInputDialog(null, "INGRESE IMPORTE: ", "ACTUALIZACION DE IMPORTE", JOptionPane.INFORMATION_MESSAGE);
            if (importe == null) {
                return;
            }
            if (importe.equals("")) {
                return;
            }
            funcbuscar();
            if (inq != null) {
                fimporte = con.guardarnumero(importe);
                inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), fimporte);
                JOptionPane.showMessageDialog(this, "IMPORTE AUXILIAR ACTUALIZADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
         */
    }//GEN-LAST:event_btnactualizarimporteActionPerformed

    private void btnactualizarimporte1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnactualizarimporte1ActionPerformed
        try {
            buscarinquilino();
            int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea ejecutar la funcion mensual?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax == JOptionPane.YES_OPTION) {
                funcion_mensual(inq, false);
                JOptionPane.showMessageDialog(null, "TRABAJO FINALIZADO", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnactualizarimporte1ActionPerformed

    private void txtobservacionesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtobservacionesKeyTyped

        caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
    }//GEN-LAST:event_txtobservacionesKeyTyped

    private void txtobservacionesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtobservacionesFocusGained
        caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
    }//GEN-LAST:event_txtobservacionesFocusGained

    private void txtobservacionesKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtobservacionesKeyReleased
        if (evt.getExtendedKeyCode() == 8) {
            caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
        }
    }//GEN-LAST:event_txtobservacionesKeyReleased

    private void txtobservacionesFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtobservacionesFocusLost
        caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
    }//GEN-LAST:event_txtobservacionesFocusLost

    private void bloqueado_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bloqueado_buttonActionPerformed
        if (inq == null) {
            return;
        }

        try {
            if (inq.inquilino_bloqueado(inq.getProp_id(), inq.getInq_casa())) {
                //ESTA BLOQUEADO
                int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea desbloquear éste inquilino?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    inq.desbloquear_inquilino(inq.getProp_id(), inq.getInq_casa());
                    con.escribirfichero("INQ - se desbloquea id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa());
                }
            } else {
                //ESTA DESBLOQUEADO
                int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea bloquear éste inquilino?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    inq.bloquear_inquilino(inq.getProp_id(), inq.getInq_casa());
                    con.escribirfichero("INQ - se bloquea id prop: " + inq.getProp_id() + " -- id inq.: " + inq.getInq_casa());
                }
            }
            cargar_estado();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bloqueado_buttonActionPerformed

    int cant_caract_observaciones() {
        if (txtobservaciones.getText().equals("")) {
            return 0;
        }
        return txtobservaciones.getText().length();
    }

    void cargarinquilino() {
        //Date fecha = null;
        d_propietario prop = new d_propietario();
        try {
            if (inq != null) {
                cargarfecha();
                inq = inq.buscarinquilino(inq.getProp_id(), inq.getInq_casa());
                lblnombreprop.setText(prop.nombre_propietario(inq.getProp_id()));
                txtnroprin.setEnabled(false);
                txtcasainq.setEnabled(false);
                jdcfechaic.setEnabled(false);
                txtnroprin.setText(inq.getProp_id().toString());
                txtcasainq.setText(inq.getInq_casa().toString());
                txtnominq.setText(inq.getInq_nombre());
                txtdirinq.setText(inq.getInq_direccion());
                txttelinq.setText(inq.getInq_tel().toString());
                lbltipo.setText(inq.getInq_tipoalq());
                cmbtipo.setSelectedItem(inq.getInq_tipoalq());
                txtplazoinq.setText(inq.getInq_plazo().toString());
                jdcfechaic.setDate((inq.getInq_fechaic()));
                actualizarreajuste();
                txtgarantia.setText(inq.getInq_garantia());
                txtpadcasa.setText(inq.getInq_padcasa());
                String impalq = con.mostrarnumero(inq.getInq_impalq());
                txtimpalq.setText(impalq);
                txtpor.setText(con.mostrarnumero(inq.getInq_por()));
                txtobservaciones.setText(inq.getInq_observaciones());
                cmbirpf.setSelectedItem(inq.getInq_irpf());
                lblirpf.setText(inq.getInq_irpf());

                cargar_estado();

                con.inq = null;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void actualizarreajuste() throws Exception {
        if (inq != null) {
            Date primerfechaic = inq.getInq_fechaic();
            Integer anio = devuelveanio(primerfechaic);
            Integer dia = devuelvedia(primerfechaic);
            if (dia > 1) {
                inq.setInq_fechaic(inq.sumar1mes(primerfechaic));
                Integer anio1 = devuelveanio(inq.getInq_fechaic());
                if (!anio1.equals(anio)) {
                    anio = anio + 1;
                    String fechaicactualizadastr = dia + "/" + devuelvemes(inq.getInq_fechaic()) + "/" + anio;
                    Date fechaicactualizada = parsefechadate(fechaicactualizadastr);
                    inq.setInq_fechaic(fechaicactualizada);
                }
            }

            anio = anio + 1;

            String fechareajusteactualizadastr = "01/" + devuelvemes(inq.getInq_fechaic()) + "/" + anio;
            Date fechareajusteactualizada = parsefechadate(fechareajusteactualizadastr);
            int compara = fechareajusteactualizada.compareTo(inq.getArlmrl());
            if (compara != 0) {
                inq.setArlmrl(fechareajusteactualizada);
                inq.actualizarfechareajuste(inq.getProp_id(), inq.getInq_casa(), fechareajusteactualizada);
            }
        }
        jdcarlmrl.setDate((inq.getArlmrl()));
    }

    Date parsefechadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    void buscarinquilino() throws Exception {
        d_inquilino inq1 = new d_inquilino();

        if (txtnroprin.getText().equals("") || txtcasainq.getText().equals("")) {
            throw new Exception("Inquilino no existe");
        }

        inq1.setProp_id(Integer.parseInt(txtnroprin.getText()));
        inq1.setInq_casa(Integer.parseInt(txtcasainq.getText()));

        inq1 = inq1.buscarinquilino(inq1.getProp_id(), inq1.getInq_casa());

        if (inq1 != null) {
            d_propietario prop1 = new d_propietario();
            prop1 = prop1.buscarpropietario(inq1.getProp_id());
            if (prop1 != null) {
                con.guardarprimermovimiento(prop1);
            }
            inq = inq1;
            //corregirfechareajuste();
        } else {
            throw new Exception("Inquilino no existe");
        }
        caract.setText(String.valueOf(cant_caract_observaciones()) + "/255");
    }

    Date parsefechastringadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    public void obtenerid() throws Exception {
        Integer nroprin = -1;
        d_propietario prop = new d_propietario();

        reiniciarcampos();
        try {
            if (txtnroprin.getText().equals("")) {
                throw new Exception("Debe ingresar un id de propietario");
            }
            nroprin = Integer.parseInt(txtnroprin.getText());
            prop = prop.buscarpropietario(nroprin);
            if (prop != null) {
                inq = new d_inquilino();
                idobtenido = inq.obtenerid(nroprin);
                txtcasainq.setText(idobtenido.toString());
                inq = null;
            } else {
                throw new Exception("Propietario ingresado no existe");
            }
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
    }

    void reiniciarcampos() throws Exception {
        inq = null;
        lblnombreprop.setText("");
        btnbuscar.setEnabled(true);
        txtnroprin.setEnabled(true);
        txtcasainq.setEnabled(true);
        jdcfechaic.setEnabled(true);//agregado 21-04
        lbltipo.setText("-");
        //txtnroprin.setText("");
        txtcasainq.setText("");
        txtnominq.setText("");
        txtdirinq.setText("");
        txttelinq.setText("");
        txtgarantia.setText("");
        txtplazoinq.setText("");
        txtpadcasa.setText("");
        txtimpalq.setText("");
        txtpor.setText("");
        lblirpf.setText("-");
        txtobservaciones.setText("");
        cargarfecha();
    }

    void controlarcampos() throws Exception {

        if (txtnroprin.getText().equals("")) {
            throw new Exception("Debe ingresar un Id de propietario");
        }
        if (txtnominq.getText().equals("")) {
            throw new Exception("Debe ingresar un nombre");
        }
        if (txtdirinq.getText().equals("")) {
            throw new Exception("Debe ingresar una dirección");
        }
        if (txttelinq.getText().equals("")) {
            throw new Exception("Debe ingresar un teléfono");
        }
        if (jdcfechaic.getDate().equals("")) {
            throw new Exception("Debe ingresar una fecha de inicio de contrato");
        }
        if (jdcfechaic.getDate().equals("")) {
            throw new Exception("Debe ingresar una arlmrl");
        }
        if (txtgarantia.getText().equals("")) {
            throw new Exception("Debe ingresar una garantia");
        }
        if (txtpadcasa.getText().equals("")) {
            throw new Exception("Debe ingresar un padrón");
        }
        if (txtimpalq.getText().equals("")) {
            throw new Exception("Debe ingresar un importe de alquiler");
        }
        if (txtpor.getText().equals("")) {
            throw new Exception("Debe ingresar un porcentaje");
        }
        if (txtplazoinq.getText().equals("")) {
            throw new Exception("Debe ingresar un plazo");
        }
        if (txtobservaciones.getText().equals("")) {
            throw new Exception("Debe ingresar una observacion");
        }
        if (cmbirpf.getSelectedItem().toString().equals("")) {
            throw new Exception("Debe ingresar información de irpf");
        }
        if (lbltipo.getText().equals("")) {
            throw new Exception("Debe ingresar un tipo de alquiler");
        }
        if (lblirpf.getText().equals("")) {
            throw new Exception("Debe ingresar una opcion para irpf");
        }

        con.controlar_seleccion_irpf(cmbirpf.getSelectedItem().toString());
        con.controlar_seleccion_tipo_alquiler(cmbtipo.getSelectedItem().toString());
    }

    Integer devuelvedia(Date fecha) {
        String formato = "dd";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_fichainquilino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_fichainquilino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_fichainquilino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_fichainquilino.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_fichainquilino dialog = new p_fichainquilino(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bloqueado_button;
    private javax.swing.JButton btnactualizarimporte;
    private javax.swing.JButton btnactualizarimporte1;
    private javax.swing.JButton btnbuscar;
    private javax.swing.JButton btnbuscar1;
    private javax.swing.JLabel caract;
    private javax.swing.JComboBox<String> cmbirpf;
    private javax.swing.JComboBox<String> cmbtipo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private com.toedter.calendar.JDateChooser jdcarlmrl;
    private com.toedter.calendar.JDateChooser jdcfechaic;
    private javax.swing.JLabel lblestado;
    private javax.swing.JLabel lblirpf;
    private javax.swing.JLabel lblnombreprop;
    private javax.swing.JLabel lbltipo;
    private javax.swing.JTextField txtcasainq;
    private javax.swing.JTextField txtdirinq;
    private javax.swing.JTextPane txtgarantia;
    private javax.swing.JTextField txtimpalq;
    private javax.swing.JTextField txtnominq;
    private javax.swing.JTextField txtnroprin;
    private javax.swing.JTextArea txtobservaciones;
    private javax.swing.JTextField txtpadcasa;
    private javax.swing.JTextField txtplazoinq;
    private javax.swing.JTextField txtpor;
    private javax.swing.JTextField txttelinq;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar() {

        con.actualizar_inq();
    }
}
