/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.paneles;

import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_recibo;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import presentacion.p_fichamantenimiento;
import interfaces.observador_mov;
import java.awt.event.KeyEvent;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import persistencia.p_conexion;

/**
 *
 * @author Gonzalo
 */
public class listadomovinq extends javax.swing.JDialog implements observador_mov {

    DefaultTableModel mdltabmov = new DefaultTableModel();
    DefaultTableModel mdltabrec = new DefaultTableModel();
    List<d_movimiento> listamovimientos = new ArrayList<d_movimiento>();
    List<d_recibo> listarecibos = new ArrayList<d_recibo>();

    /**
     * Creates new form p_listado_mov
     */
    public listadomovinq(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        cargartablamovimientos();
        cargartablarecibos();

        cargarfecha();
        cargarobservador();
    }

    void cargartablamovimientos() {
        p_control c = p_control.getInstancia();
        tblmovimientos.setModel(mdltabmov);

        mdltabmov.addColumn("ID");
        mdltabmov.addColumn("FECHA");
        mdltabmov.addColumn("NOMBRE");
        mdltabmov.addColumn("ID PROP");
        mdltabmov.addColumn("ID INQ");
        mdltabmov.addColumn("MES");
        mdltabmov.addColumn("AÃ‘O");
        mdltabmov.addColumn("DETALLE");
        mdltabmov.addColumn("ENTRADA");
        mdltabmov.addColumn("SALIDA");
        mdltabmov.addColumn("COMISION");
        mdltabmov.addColumn("IVA");
        mdltabmov.addColumn("IRPF");
        
        c.alinear_contenido_columna_izquierda(tblmovimientos, 8);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 9);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 10);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 11);
        c.alinear_contenido_columna_izquierda(tblmovimientos, 12);
        //mdltabmov.addColumn("SALDO");
    }

    void cargartablarecibos() {
        p_control c = p_control.getInstancia();
        tblrecibos.setModel(mdltabrec);

        mdltabrec.addColumn("ID MOVIMIENTO");
        mdltabrec.addColumn("DETALLE");
        mdltabrec.addColumn("FECHA");
        mdltabrec.addColumn("NOMBRE INQ");
        mdltabrec.addColumn("IMPORTE");
        c.alinear_contenido_columna_izquierda(tblrecibos, 4);
    }

    void cargarfecha() {
        jdcfecha1.setDate(new Date());
        jdcfecha2.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblmovimientos = tblmovimientos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtprop_id = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtinq_id = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lblnombreinq = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblrecibos = new javax.swing.JTable();
        lbltotalalquiler = new javax.swing.JLabel();
        jdcfecha1 = new com.toedter.calendar.JDateChooser();
        jdcfecha2 = new com.toedter.calendar.JDateChooser();
        copia = new javax.swing.JCheckBox();
        comun = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MOVIMIENTOS DE INQUILINOS");
        setModalityType(null);
        getContentPane().setLayout(null);

        tblmovimientos.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        tblmovimientos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblmovimientosMouseClicked(evt);
            }
        });
        tblmovimientos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblmovimientosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tblmovimientos);
        if (tblmovimientos.getColumnModel().getColumnCount() > 0) {
            tblmovimientos.getColumnModel().getColumn(0).setHeaderValue("Title 1");
            tblmovimientos.getColumnModel().getColumn(1).setHeaderValue("Title 2");
            tblmovimientos.getColumnModel().getColumn(2).setHeaderValue("null");
        }

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(10, 180, 1050, 118);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("DESDE");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 120, 130, 17);

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("HASTA");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 120, 160, 17);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("FILTRAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(380, 40, 120, 30);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ID PROP");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 20, 140, 17);

        txtprop_id.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtprop_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtprop_idKeyPressed(evt);
            }
        });
        getContentPane().add(txtprop_id);
        txtprop_id.setBounds(10, 40, 138, 30);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("ID INQ");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(180, 20, 130, 17);

        txtinq_id.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtinq_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtinq_idKeyPressed(evt);
            }
        });
        getContentPane().add(txtinq_id);
        txtinq_id.setBounds(180, 40, 138, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("NOMBRE");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 70, 150, 17);

        lblnombreinq.setBackground(java.awt.Color.green);
        lblnombreinq.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblnombreinq.setOpaque(true);
        getContentPane().add(lblnombreinq);
        lblnombreinq.setBounds(10, 90, 490, 30);

        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("EXPORTAR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(1070, 480, 138, 30);

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("GENERAR RECIBO");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 480, 138, 30);

        jButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton4.setText("VER DETALLE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(1074, 233, 138, 30);

        jButton5.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton5.setText("AGREGAR REC");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(1074, 183, 138, 30);

        jButton6.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton6.setText("LIMPIAR TABLA");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(1070, 360, 138, 30);

        tblrecibos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblrecibos);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 360, 1050, 110);

        lbltotalalquiler.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lbltotalalquiler.setText("0");
        getContentPane().add(lbltotalalquiler);
        lbltotalalquiler.setBounds(890, 300, 170, 17);

        jdcfecha1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha1);
        jdcfecha1.setBounds(10, 140, 138, 30);

        jdcfecha2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(jdcfecha2);
        jdcfecha2.setBounds(180, 140, 138, 30);

        copia.setText("COPIA");
        getContentPane().add(copia);
        copia.setBounds(230, 480, 81, 25);

        comun.setText("COMUN");
        getContentPane().add(comun);
        comun.setBounds(150, 480, 70, 25);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("RECIBO");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 340, 140, 17);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("TOTAL POR CONCEPTO ALQUILER ($):");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(590, 300, 290, 17);

        setBounds(0, 0, 1243, 569);
    }// </editor-fold>//GEN-END:initComponents

    private void tblmovimientosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblmovimientosMouseClicked
        try {
            if (evt.getClickCount() == 2) {
                //selecciontabla();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tblmovimientosMouseClicked

    private void tblmovimientosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblmovimientosKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblmovimientosKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            cleartablerecibo();
            cargarmovimientos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            java.sql.Connection c;
            p_conexion conex = p_conexion.getInstancia();
            c = conex.crearconexion();
            Date fecha1 = null;
            Date fecha2 = null;
            Integer prop_id = 0;
            Integer inq_id = 0;
            d_inquilino inq = new d_inquilino();

            String template = "report-movimientosentrefechaseinq.jasper";
            JasperReport reporte = null;
            reporte = (JasperReport) JRLoader.loadObject(template);

            //controlarid();
            prop_id = Integer.parseInt(txtprop_id.getText());
            inq_id = Integer.parseInt(txtinq_id.getText());
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            inq = inq.buscarinquilino(prop_id, inq_id);
            if (inq == null) {
                JOptionPane.showMessageDialog(this, toUpperCase("inquilino no existe"), "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            Map param = new HashMap();
            param.put("fecha1", fecha1);
            param.put("fecha2", fecha2);
            param.put("prop_id", prop_id);
            param.put("inq_id", inq_id);
            param.put("total", lbltotalalquiler.getText());
            JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
            //donde dice 'null' va el parametro, si es utilizado
            //this.setVisible(false);
            JasperViewer visor = new JasperViewer(jasperprint, false);
            visor.setTitle("Lista de Movimientos de inquilino entre fechas");
            visor.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            d_inquilino inq = new d_inquilino();
            int prop_id = -1;
            int inq_casa = -1;

            prop_id = Integer.parseInt(txtprop_id.getText());
            inq_casa = Integer.parseInt(txtinq_id.getText());
            inq = inq.buscarinquilino(prop_id, inq_casa);
            if (inq == null) {
                return;
            }
            int row = mdltabrec.getRowCount(); //guarda el numero de fila que selecciona el usuario
            //preguntar cantidad registros que tiene la tabla recibos

            if (row != -1) {
                java.sql.Connection c;
                p_conexion conex = p_conexion.getInstancia();
                c = conex.crearconexion();

                String template = devuelvetipo();
                //List<Integer> empleados = Arrays.asList(203842, 203841);
                //Map<Integer, Object> parameters = new HashMap<Integer, Object>();
                JasperReport reporte = null;
                reporte = (JasperReport) JRLoader.loadObject(template);

                Map param = new HashMap();
                param.put("prop_id", inq.getProp_id());
                param.put("inq_casa", inq.getInq_casa());
                param.put("nombre_inq", inq.getInq_nombre());
                param.put("inq_direccion", inq.getInq_direccion());
                param.put("inq_padcasa", inq.getInq_padcasa());
                param.put("movimiento", "entrada");
                //controlarfechas();
                //fecha1 = parsefechadate(txtfecha1.getText());
                //fecha2 = parsefechadate(txtfecha2.getText());
                //Map param = new HashMap();
                //param.put("fecha1", fecha1);
                //param.put("fecha2", fecha2);
                JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
                //donde dice 'null' va el parametro, si es utilizado
                //this.setVisible(false);
                JasperViewer visor = new JasperViewer(jasperprint, false);
                visor.setTitle("Recibo");
                visor.setVisible(true);
                cleartablerecibo();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    String devuelvetipo() throws Exception {
        if (comun.isSelected() && copia.isSelected()) {
            throw new Exception("debe seleccionar copia o comÃºn para el recibo generado");
        }
        if (comun.isSelected()) {
            //copia.setSelected(false);
            return "reciboinmo.jasper";
        }
        if (copia.isSelected()) {
            //comun.setSelected(false);
            return "reciboinmocopia.jasper";
        }
        throw new Exception("debe seleccionar copia o comÃºn para el recibo generado");
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            ver_detalle();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        cleartablerecibo();
    }//GEN-LAST:event_jButton6ActionPerformed

    void cleartablerecibo() {
        d_recibo rec = new d_recibo();

        try {
            for (int i = 0; i < tblrecibos.getRowCount(); i++) {
                mdltabrec.removeRow(i);
                i -= 1;
            }
            rec.eliminarrecibo("alquiler");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        p_control con = p_control.getInstancia();
        d_inquilino inq1 = new d_inquilino();
        d_recibo rec = new d_recibo();
        d_movimiento mov = new d_movimiento();
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        try {
            if (row != -1) {
                rec.setIdmovimiento((Integer) tblmovimientos.getValueAt(row, 0));
                rec.setDetalle((String) tblmovimientos.getValueAt(row, 7));
                String fecha = "";
                fecha = (String) tblmovimientos.getValueAt(row, 1);
                Date nuevafecha = formatter.parse(fecha);
                rec.setFecha(parsefechadate(nuevafecha));
                inq1 = inq1.buscarinquilino((Integer) tblmovimientos.getValueAt(row, 3), (Integer) tblmovimientos.getValueAt(row, 4));
                rec.setNombre_inq(inq1.getInq_nombre());
                mov = mov.buscarmovimiento((Integer) tblmovimientos.getValueAt(row, 0));
                rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
                if (mov.getEntrada() == 0f) {
                    rec.setImporte(mov.getSalida() * -1); //REVISAR COMO MOSTRAR EN EL RECIBO
                    //rec.setImporte(mov.getSalida()); //CAMBIO 06-08
                } else {
                    rec.setImporte(mov.getEntrada());
                }
                rec.guardarrecibo(rec,"alquiler");
                Vector v = new Vector();
                v.add(rec.getIdmovimiento());
                v.add(rec.getDetalle());
                v.add(parsefechastring(rec.getFecha()));
                v.add(rec.getNombre_inq());
                v.add(con.mostrarnumero(rec.getImporte()));
                mdltabrec.addRow(v);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtprop_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtprop_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cleartablerecibo();
            cargarmovimientos();
        }
    }//GEN-LAST:event_txtprop_idKeyPressed

    private void txtinq_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtinq_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cleartablerecibo();
            cargarmovimientos();
        }
    }//GEN-LAST:event_txtinq_idKeyPressed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            cleartablerecibo();
            cargarmovimientos();
        }
    }//GEN-LAST:event_jButton1KeyPressed

    Date parsefechadate(Date fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            String nuevafecha = formato.format(fecha);
            fechaDate = formato.parse(nuevafecha);
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
        return fechaDate;
    }

    void cargarobservador() {
        p_control con = p_control.getInstancia();
        con.registrarobservador_mov(this);
    }

    void cargarmovimientos() {
        p_control con = p_control.getInstancia();
        d_movimiento mov = new d_movimiento();
        d_movimiento mov1 = null;
        d_inquilino inq = new d_inquilino();
        Integer prop_id = 0;
        Integer inq_id = 0;
        Date fecha1 = null;
        Date fecha2 = null;
        Vector v;
        //Float saldo = 0.0f;

        try {
            cleartable();
            //controlarid();
            lblnombreinq.setText("-");
            prop_id = Integer.parseInt(txtprop_id.getText());
            inq_id = Integer.parseInt(txtinq_id.getText());
            fecha1 = parsefechadate(jdcfecha1.getDate());
            fecha2 = parsefechadate(jdcfecha2.getDate());
            inq = inq.buscarinquilino(prop_id, inq_id);
            if (inq == null) {
                JOptionPane.showMessageDialog(null, toUpperCase("inquilino no existe"), "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            lblnombreinq.setText(inq.getInq_nombre());
            listamovimientos = mov.listarmovimientosentrefechaseinq(prop_id, inq_id, fecha1, fecha2);
            for (d_movimiento aux : listamovimientos) {
                mov1 = new d_movimiento();
                v = new Vector();
                mov1.setId(aux.getId());
                mov1.setProp_id(aux.getProp_id());
                mov1.setInq_casa(aux.getInq_casa());
                mov1.setMqp(aux.getMqp());
                mov1.setAqp(aux.getAqp());
                mov1.setDetalle(aux.getDetalle());
                mov1.setEntrada(aux.getEntrada());
                mov1.setSalida(aux.getSalida());
                mov1.setComision(aux.getComision());
                mov1.setIva(aux.getIva());
                mov1.setTipo(aux.getTipo());
                mov1.setFecha(aux.getFecha());
                mov1.setIrpf(aux.getIrpf());
                v.add(mov1.getId());
                v.add(parsefechastring(mov1.getFecha()));
                v.add(mov1.getTipo());
                v.add(mov1.getProp_id());
                v.add(mov1.getInq_casa());
                v.add(mov1.getMqp());
                v.add(mov1.getAqp());
                v.add(mov1.getDetalle());
                v.add(con.mostrarnumero(mov1.getEntrada()));
                v.add(con.mostrarnumero(mov1.getSalida()));
                v.add(con.mostrarnumero(mov1.getComision()));
                v.add(con.mostrarnumero(mov1.getIva()));
                v.add(con.mostrarnumero(mov1.getIrpf()));

                //saldo = mov1.getEntrada() - mov1.getSalida() + saldo;
                //v.add(saldo);
                mdltabmov.addRow(v);
            }
            lbltotalalquiler.setText(con.mostrarnumero(mov.totalmovimientosentrefechaseinq(prop_id, inq_id, fecha1, fecha2)));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void controlarid() throws Exception {
        if (txtprop_id.getText().equals("") || txtinq_id.getText().equals("") || txtinq_id.getText().equals("0")) {
            throw new Exception("debe ingresar un inquilino");
        }
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    void selecciontabla() throws Exception {
        //p_fichamantenimiento fim = null;
        p_control con = p_control.getInstancia();

        int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        if (row != -1) {
            d_movimiento mov = new d_movimiento();
            //datoseleccionado += tblmodelos.getValueAt(row, 2); //guarda el valor que hay en la columna idoperario
            //idpieza = Integer.parseInt(datoseleccionado); //convierte a Integer
            mov.setId((Integer) tblmovimientos.getValueAt(row, 0));
            mov = mov.buscarmovimiento(mov.getId());
            if (mov == null) {
                throw new Exception("actualize la pantalla, movimiento fue eliminado");
            }
            con.mov = mov;
            int ax = JOptionPane.showConfirmDialog(null, toUpperCase("Â¿DESEA DEFINIR MOVIMIENTO SELECCIONADO COMO 'ALQUILER'?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax == JOptionPane.YES_OPTION) {
                mov.actualizardetallealquiler(mov);
                JOptionPane.showMessageDialog(this, "MOVIMIENTO ACTUALIZADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }          
            actualizar_mov(); 
        } else {
            JOptionPane.showMessageDialog(null, toUpperCase("debe seleccionar una fila"), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void ver_detalle() throws Exception {
        p_fichamantenimiento fim = null;
        p_control con = p_control.getInstancia();

        int row = tblmovimientos.getSelectedRow(); //guarda el numero de fila que selecciona el usuario

        if (row != -1) {
            d_movimiento mov = new d_movimiento();
            //datoseleccionado += tblmodelos.getValueAt(row, 2); //guarda el valor que hay en la columna idoperario
            //idpieza = Integer.parseInt(datoseleccionado); //convierte a Integer
            mov.setId((Integer) tblmovimientos.getValueAt(row, 0));
            con.mov = mov;
            //this.setVisible(false);
            fim = new p_fichamantenimiento(null, true);
            fim.setVisible(true);
            //con.cargarpropietario(pro);
            //notificarseleccion(); 
        } else {
            JOptionPane.showMessageDialog(null, toUpperCase("debe seleccionar una fila"), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    void cleartable() {
        for (int i = 0; i < tblmovimientos.getRowCount(); i++) {
            mdltabmov.removeRow(i);
            i -= 1;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(listadomovinq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(listadomovinq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(listadomovinq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(listadomovinq.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                listadomovinq dialog = new listadomovinq(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox comun;
    private javax.swing.JCheckBox copia;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private com.toedter.calendar.JDateChooser jdcfecha1;
    private com.toedter.calendar.JDateChooser jdcfecha2;
    private javax.swing.JLabel lblnombreinq;
    private javax.swing.JLabel lbltotalalquiler;
    private javax.swing.JTable tblmovimientos;
    private javax.swing.JTable tblrecibos;
    private javax.swing.JTextField txtinq_id;
    private javax.swing.JTextField txtprop_id;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actualizar_mov() {
        cargarmovimientos();
    }
}
