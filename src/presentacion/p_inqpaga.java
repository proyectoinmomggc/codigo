/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import dominio.RendererInqPaga;
import dominio.d_alquileres_info;
import dominio.d_cfe;
import dominio.d_clave;
import dominio.d_configuracion;
import dominio.d_gastos_inq;
import dominio.d_generarcfe;
import dominio.d_grupoirpf;
import dominio.d_inquilino;
import dominio.d_movimiento;
import dominio.d_parametro;
import dominio.d_parametroscfe;
import dominio.d_propietario;
import dominio.d_recibo;
import interfaces.observador_inq_paga;
import interfaces.observador_mov;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import static jdk.nashorn.internal.objects.NativeString.toUpperCase;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import org.datacontract.schemas._2004._07.sicfecontract.SICFERespuestaEnvioCFE;
import persistencia.p_conexion;
import presentacion.paneles.p_agregar_correccion;
import presentacion.paneles.p_control;
import presentacion.paneles.p_fichainquilino;
import presentacion.paneles.p_listadosreintegrosconvenios;

/**
 *
 * @author Gonzalo
 */
public class p_inqpaga extends javax.swing.JDialog implements observador_mov, observador_inq_paga {

    RendererInqPaga r = new RendererInqPaga();
    DefaultTableModel mdltabinq = new DefaultTableModel();
    d_inquilino inq = null;
    Integer anio = 0;
    p_control con = p_control.getInstancia();
    //Integer contadorreajuste = 0;
    //Integer mescontadorreajuste = 0;
    String[] fechasreajustes = null;
    String[] fechasreajustesparciales = null;
    String[] fechaspagos = null;
    Float[] importereajustes = null;
    Float[] importepagos = null;
    Date fechaprimerreajuste = null;
    Date fechainiciocontratooriginal = null;
    Float importereajuste = 0f;
    Float importetotal = 0f;
    Float sumarimportereajusteanterior = 0f;
    List<d_gastos_inq> listagastos = null;
    List<d_gastos_inq> listaconveniosreintegros = null;
    List<d_movimiento> listamovimientos = null;
    List<d_recibo> listadeuda = null;
    List<d_grupoirpf> listagrupoirpf = new ArrayList<d_grupoirpf>();
    Float primerimportealquiler = 0f;
    Boolean reajustaesteanio = false;
    Boolean aplicoconvenioreintegro = false;
    Integer plazoextendido = 0;
    Boolean quiereimprimir = false;
    Boolean quierecancelar = false;

    /**
     * Creates new form p_inqpaga1
     */
    public p_inqpaga(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);

        tblinquilinos.setModel(mdltabinq);
        tblinquilinos.setDefaultRenderer(Object.class, r);

        mdltabinq.addColumn("ID");
        mdltabinq.addColumn("DESCRIPCION");
        mdltabinq.addColumn("IMPORTE");
        mdltabinq.addColumn("FECHA");
        cargarobservador();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        txtinq_id = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lblnombreinq = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtprop_id = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblinquilinos = tblinquilinos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        lblcorreccion = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtabonoentrega = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        lbldeuda = new javax.swing.JLabel();
        cmbplazo = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtobservaciones = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenu11 = new javax.swing.JMenu();
        jMenu12 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("INGRESO INQUILINO");
        setModalityType(null);
        getContentPane().setLayout(null);

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("ESTADO PLAZO");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(10, 70, 120, 17);

        txtinq_id.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtinq_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtinq_idKeyPressed(evt);
            }
        });
        getContentPane().add(txtinq_id);
        txtinq_id.setBounds(160, 40, 138, 30);

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("NOMBRE INQUILINO");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 120, 160, 17);

        lblnombreinq.setBackground(java.awt.Color.green);
        lblnombreinq.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lblnombreinq.setOpaque(true);
        getContentPane().add(lblnombreinq);
        lblnombreinq.setBounds(10, 140, 770, 30);

        jButton1.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton1.setText("EXTENDER");
        jButton1.setMaximumSize(new java.awt.Dimension(75, 23));
        jButton1.setPreferredSize(new java.awt.Dimension(75, 23));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(310, 90, 120, 30);

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("ID PROP");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 20, 150, 17);

        txtprop_id.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        txtprop_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtprop_idKeyPressed(evt);
            }
        });
        getContentPane().add(txtprop_id);
        txtprop_id.setBounds(10, 40, 138, 30);

        tblinquilinos.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblinquilinos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "DESCRIPCION", "IMPORTE", "IMPORTE REAJUSTE", "FECHA"
            }
        ));
        tblinquilinos.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblinquilinos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblinquilinosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tblinquilinosMouseEntered(evt);
            }
        });
        jScrollPane1.setViewportView(tblinquilinos);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 180, 770, 240);

        lblcorreccion.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        lblcorreccion.setForeground(java.awt.Color.red);
        getContentPane().add(lblcorreccion);
        lblcorreccion.setBounds(10, 600, 770, 30);

        jButton2.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton2.setText("PAGAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(660, 440, 120, 30);

        jButton3.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton3.setText("IMPRIMIR");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(660, 490, 120, 30);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setText("ABONAR ENTREGA ($)");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(10, 420, 300, 17);

        txtabonoentrega.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        getContentPane().add(txtabonoentrega);
        txtabonoentrega.setBounds(10, 440, 360, 30);

        jButton4.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton4.setText("IMPRIMIR COPIA");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(660, 540, 120, 30);

        jButton5.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton5.setText("EXPORTAR");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5);
        jButton5.setBounds(10, 540, 120, 30);

        lbldeuda.setBackground(java.awt.Color.green);
        lbldeuda.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        lbldeuda.setOpaque(true);
        getContentPane().add(lbldeuda);
        lbldeuda.setBounds(10, 500, 360, 30);

        cmbplazo.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cmbplazo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "PLAZO VIGENTE", "PLAZO VENCIDO" }));
        cmbplazo.setEnabled(false);
        getContentPane().add(cmbplazo);
        cmbplazo.setBounds(10, 90, 290, 30);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setText("ID INQ");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(160, 20, 150, 17);

        jButton6.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        jButton6.setText("BUSCAR");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton6KeyPressed(evt);
            }
        });
        getContentPane().add(jButton6);
        jButton6.setBounds(310, 40, 120, 30);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("TOTAL DEUDA");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(10, 480, 230, 17);

        jLabel11.setFont(new java.awt.Font("Arial", 2, 14)); // NOI18N
        jLabel11.setText("* Tiene entrega a cuenta");
        getContentPane().add(jLabel11);
        jLabel11.setBounds(10, 580, 180, 17);

        txtobservaciones.setEditable(false);
        txtobservaciones.setColumns(20);
        txtobservaciones.setLineWrap(true);
        txtobservaciones.setRows(5);
        txtobservaciones.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(txtobservaciones);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(480, 40, 300, 96);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("OBSERVACIONES");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(480, 20, 140, 17);

        jMenu1.setText("INFORMACION");

        jMenu9.setText("CONVENIOS - REINTEGROS");
        jMenu9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu9MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu9);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("CORRECCIONES");

        jMenu10.setText("AGREGAR");
        jMenu10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu10MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu10);

        jMenu11.setText("ELIMINAR");
        jMenu11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu11MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu11);

        jMenu12.setText("VER DETALLE MOVIMIENTOS DE INQUILINO");
        jMenu12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu12MouseClicked(evt);
            }
        });
        jMenu2.add(jMenu12);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 817, 715);
    }// </editor-fold>//GEN-END:initComponents

    void funcbuscar() {
        d_propietario prop1 = new d_propietario();
        d_inquilino inq1 = new d_inquilino();
        Integer prop_id = 0;
        Integer inq_id = 0;
        quierecancelar = false;

        if (txtprop_id.getText().equals("") || txtinq_id.getText().equals("")) {
            return;
        }

        inq = null;

        try {

            aplicoconvenioreintegro = false;
            con.plazoextendido = 0;
            listamovimientos = null;
            cmbplazo.setSelectedItem(" ");
            limpiarlistadeuda();
            eliminarlistadodeuda();
            limpiarlistagastos();
            limpiarlistaconveniosreintegros();
            cleartable();
            txtobservaciones.setText("");
            importetotal = 0f;
            lblnombreinq.setText("-");
            lbldeuda.setText("");
            prop_id = Integer.parseInt(txtprop_id.getText());
            inq_id = Integer.parseInt(txtinq_id.getText());
            inq1 = inq1.buscarinquilino(prop_id, inq_id);
            if (inq != null) {
                //CHEQUEAR_ESTADO
                prop1 = prop1.buscarpropietario(inq.getProp_id());
                if (prop1 != null) {
                    con.guardarprimermovimiento(prop1);
                }
            }
            if (inq1 == null) {
                lblcorreccion.setText("");
                inq = null;
                JOptionPane.showMessageDialog(this, toUpperCase("inquilino no existe"), "ERROR", JOptionPane.ERROR_MESSAGE);
                return;
            }
            inq = inq1;
            reajustaesteanio = reajustaesteanio();
            fechainiciocontratooriginal = inq.getInq_fechaic();
            //inq.setInq_impalq(inq.getInq_impalq_aux());
            actualizarcontrato();
            cargarlistaconveniosreintegrossinaplicar();
            //MUESTRA SI TIENE CORRECION INGRESADA
            lblcorreccion.setText(devuelvecorreccion());
            txtobservaciones.setText(inq.getInq_observaciones());
            if (inq.getInq_tipoalq().equals("LOCAL")) {
                lblnombreinq.setText(inq.getInq_nombre());
                con.actualizar_deuda_inq(inq);
                listarimporteslocal();
                //si el dia de la fecha de inicio de alquiler es <> 1, comienza a pagar a partir del mes siguiente
            }
            if (inq.getInq_tipoalq().equals("HABITACION")) {
                lblnombreinq.setText(inq.getInq_nombre());
                //sumar1mes();
                //actualizarplazoyreajuste();
                con.actualizar_deuda_inq(inq);
                listarimportescasahabitacion();

                //si el dia de la fecha de inicio de alquiler es <> 1, comienza a pagar a partir del mes siguiente
            }
            guardarlistadodeuda();
            if (!inq.getInq_tipoalq().equals("LOCAL") && !inq.getInq_tipoalq().equals("HABITACION")) {
                JOptionPane.showMessageDialog(this, toUpperCase("inquilino no tiene un tipo de alquiler ingresado"), "ERROR", JOptionPane.ERROR_MESSAGE);
            }

            d_alquileres_info alq = new d_alquileres_info();

            if (alq.tiene_correccion(inq.getProp_id(), inq.getInq_casa())) {
                return;
            }

            d_movimiento mov_aux = new d_movimiento();
            mov_aux = buscarultimoimporteantesdelreajuste(inq);

            if ((obtenercantAnios(inq.buscarfechaicoriginal(inq.getProp_id(), inq.getInq_casa()), new Date()) > 1) && (mov_aux == null)) {
                //HACE MAS DE UN ANIO NO TIENE MOV PREVIO AL REAJUSTE, DEBE INGRESAR CORRECCION
                lblcorreccion.setText("POR FAVOR INGRESE EL VALOR DE ALQUILER DEL MES DE REAJUSTE CORRESPONDIENTE");
                abrir_correccion();
                /*p_mov_inq_correccion gas = null;

            con.inq = this.inq;
            gas = new p_mov_inq_correccion(null, true);
            gas.setVisible(true);*/
            } else if ((obtenercantAnios(inq.buscarfechaicoriginal(inq.getProp_id(), inq.getInq_casa()), new Date()) > 1) || (mov_aux != null)) {
                if (mov_aux.getDetalle().equals("SALDO ALQUILER")) {
                    //CHEQUEAR CANTIDAD DE MOVIMIENTOS DE ESE MES Y ANIO, SI ES MAS DE 1, ACONSEJAR CORRECCION
                    if (mov_aux.cantidad_movimientos_alquiler_para_una_fecha(mov_aux) > 1) {
                        lblcorreccion.setText("POR FAVOR INGRESE EL VALOR DE ALQUILER DEL MES DE REAJUSTE CORRESPONDIENTE");
                        abrir_correccion();
                    }
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void abrir_correccion() {
        if (inq == null) {
            return;
        }
        p_agregar_correccion fic = null;
        con.inq = inq;
        fic = new p_agregar_correccion(null, true);
        fic.setVisible(true);
    }

    String devuelvecorreccion() throws Exception {
        d_alquileres_info alq = new d_alquileres_info();
        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            return "TIENE UNA CORRECCIÓN INGRESADA CON IMPORTE ($): " + con.mostrarnumero(alq.getImporte())
                    + " DESDE FECHA: " + parsefechastring(alq.getFecha());
        } else {
            return "";
        }
    }

    String parsefechastring(java.util.Date fecha) {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        String fechastr = formato.format(fecha);

        return fechastr;
    }

    void sumarplazo() throws Exception {
        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea extender el plazo de inquilino un año?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
        if (ax == JOptionPane.NO_OPTION || ax == JOptionPane.CANCEL_OPTION) {
            return;
        }
        con.plazoextendido = con.plazoextendido + 1;
        //inq.actualizarplazo(inq.getProp_id(), inq.getInq_casa(), plazo);       
        f5(inq.getProp_id(), inq.getInq_casa());
    }

    void f5(Integer prop_id, Integer inq_casa) {
        d_inquilino inq1 = new d_inquilino();

        if (txtprop_id.getText().equals("") || txtinq_id.getText().equals("")) {
            return;
        }

        //p_control con = p_control.getInstancia();
        inq = null;

        try {
            listamovimientos = null;
            limpiarlistadeuda();
            eliminarlistadodeuda();
            limpiarlistagastos();
            cleartable();
            controlarid();
            importetotal = 0f;
            lblnombreinq.setText("-");
            lbldeuda.setText("");
            inq1 = inq1.buscarinquilino(prop_id, inq_casa);
            inq = inq1;
            reajustaesteanio = reajustaesteanio();
            fechainiciocontratooriginal = inq.getInq_fechaic();
            //inq.setInq_impalq(inq.getInq_impalq_aux());
            actualizarcontrato();
            cargarlistaconveniosreintegrossinaplicar();
            if (inq.getInq_tipoalq().equals("LOCAL")) {
                lblnombreinq.setText(inq.getInq_nombre());
                //sumar1mes();
                //actualizarplazoyreajuste();
                con.actualizar_deuda_inq(inq);
                listarimporteslocal();
                //si el dia de la fecha de inicio de alquiler es <> 1, comienza a pagar a partir del mes siguiente
            }
            if (inq.getInq_tipoalq().equals("HABITACION")) {
                lblnombreinq.setText(inq.getInq_nombre());
                //sumar1mes();
                //actualizarplazoyreajuste();
                con.actualizar_deuda_inq(inq);
                listarimportescasahabitacion();
                //si el dia de la fecha de inicio de alquiler es <> 1, comienza a pagar a partir del mes siguiente
            }
            guardarlistadodeuda();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    void actualizarcontrato() throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        Date fchcontratoaux = null;

        primerimportealquiler = inq.getInq_impalq_aux();

        Date fechafincontrato = fechafincontrato(inq.getInq_fechaic());
        Date fechahoy = new Date();
        int compara = comparafincontratoconinicio(fechafincontrato, fechahoy);
        //ver compara=0
        if (compara == -1) {
            //plazo vencido
            cmbplazo.setSelectedItem("PLAZO VENCIDO");
        }
        if (compara == 1) {
            //plazo vigente
            cmbplazo.setSelectedItem("PLAZO VIGENTE");
            //return;
        }

        Boolean escontratoacomenzar = escontratoacomenzar(inq.getInq_fechaic());

        if (escontratoacomenzar == false) {
            String fechastric = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
            fchcontratoaux = parsefechadate(fechastric);
            inq.setInq_fechaic(fchcontratoaux);
        }

        if (reajustaesteanio == false) {
            inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        }

        if (inq.getInq_plazo() == 0) {
            inq.setInq_plazo(2);
        }
    }

    Boolean reajustaesteanio() throws Exception {
        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(inq.getArlmrl());

        return anioreajuste == anioactual;
    }

    Integer comparafincontratoconinicio(Date fechafin, Date fechahoy) {
        //10 plazo vigente (1) - 20 plazo vencido (-1)
        Integer resultado = -1;

        int mesfin = devuelvemes(fechafin);
        int aniofin = devuelveanio(fechafin);
        int meshoy = devuelvemes(fechahoy);
        int aniohoy = devuelveanio(fechahoy);

        if (aniofin >= aniohoy) {
            resultado = 1;
            if (mesfin >= meshoy) {
                resultado = 1;
            }
        }
        return resultado;
    }

    Boolean escontratoacomenzar(Date fechainicio) throws Exception {
        Boolean escontratoacomenzar = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechainicio);
        anioinicio = devuelveanio(fechainicio);

        mesactual = devuelvemes(new Date());
        anioactual = devuelveanio(new Date());

        String fechaoriginal = "01/" + mesinicio + "/" + anioinicio;
        String fechaactual = "01/" + mesactual + "/" + anioactual;

        Date fechao = parsefechadate(fechaoriginal);
        Date fechaa = parsefechadate(fechaactual);

        int compara = fechao.compareTo(fechaa);
        if (compara == 1 || compara == 0) {
            return true;
        }
        return escontratoacomenzar;
    }

    Boolean estafechaesantesdeempezarcontrato(Date fechaaconsultar) throws Exception {
        Boolean estafechaesantesdeempezarcontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(fechainiciocontratooriginal);
        anioactual = devuelveanio(fechainiciocontratooriginal);

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == -1) {
            return true;
        }
        return estafechaesantesdeempezarcontrato;
    }

    void guardaralquilermesactual(float importe, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        d_gastos_inq aux = new d_gastos_inq();

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(mqp);
        gas.setAqp(aqp);
        gas.setEstado(0);
        gas.setDetalle("SALDO ALQUILER");
        gas.setImporte(importe);

        //chequearcuotapaga-revisar
        aux = aux.buscaralquilermes(gas);
        if (aux != null) {
            if (aux.getEstado().equals(1) && aux.getImporte().equals(importe)) {
                d_movimiento mov1 = new d_movimiento();
                mov1.setProp_id(inq.getProp_id());
                mov1.setInq_casa(inq.getInq_casa());
                mov1.setMqp(gas.getMqp());
                mov1.setAqp(gas.getAqp());
                mov1.actualizardetalle(mov1);
                listamovimientos();
            } else {
                aux.setImporte(importe);
                gas.setDetalle("ALQUILER");
                gas.guardargastoinq(aux);
            }
        } else {
            gas.setDetalle("ALQUILER");
            gas.guardargastoinq(gas);
        }
    }

    Date fechafincontrato(Date fechainiciocontrato) throws Exception {
        int aniomasplazo = devuelveanio(fechainiciocontrato);

        aniomasplazo = aniomasplazo + inq.getInq_plazo();
        String fechafincontratostr = devuelvedia(fechainiciocontrato) + "/"
                + devuelvemes(fechainiciocontrato) + "/" + aniomasplazo;

        Date fecha = parsefechadate(fechafincontratostr);
        return fecha;
    }

    Date ajustarreajuste(Date fechareajustevieja) throws Exception {
        String fechastrreajustenuevo = "";
        Date fechareajustenueva = null;
        //10 plazo vigente

        int anioactual = devuelveanio(new Date());
        int anioreajuste = devuelveanio(fechareajustevieja);

        if (anioactual < anioreajuste) {
            return fechareajustevieja;
        }

        fechastrreajustenuevo = "01/" + devuelvemes(fechareajustevieja) + "/" + devuelveanio(new Date());

        fechareajustenueva = parsefechadate(fechastrreajustenuevo);

        return fechareajustenueva;
    }

    void cargarlistaconveniosreintegrossinaplicar() {
        d_gastos_inq gas = new d_gastos_inq();

        try {
            if (inq == null) {
                return;
            }
            limpiarlistaconveniosreintegros();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            listaconveniosreintegros = gas.cargarlistaconveniosreintegrossinaplicar(gas);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    d_gastos_inq devuelveconveniosreintegros(d_gastos_inq gas1) {
        d_gastos_inq gas = null;

        try {
            if (listaconveniosreintegros.isEmpty()) {
                return null;
            }
            //
            for (d_gastos_inq aux : listaconveniosreintegros) {
                if (aux.getProp_id().equals(gas1.getProp_id())
                        && aux.getInq_casa().equals(gas1.getInq_casa())
                        && aux.getMqp().equals(gas1.getMqp())
                        && aux.getAqp().equals(gas1.getAqp())) {
                    return aux;
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        return gas;
    }

    void limpiarlistaconveniosreintegros() {
        listaconveniosreintegros = null;
    }

    void sumar1mes() {
        if (devuelvedia(inq.getInq_fechaic()) != 1) {
            inq.setInq_fechaic(inq.sumar1mes(inq.getInq_fechaic()));
        }
    }

    Date restarmesesaunafecha(Date fecha, int cantidad) {
        Date nuevafecha = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.MONTH, cantidad);
        nuevafecha = cal.getTime();
        return nuevafecha;
    }

    Date sumaraniosunafecha(Date fecha, int cantidad) {
        Date nuevafecha = null;
        Calendar cal = Calendar.getInstance();
        cal.setTime(fecha);
        cal.add(Calendar.YEAR, cantidad);
        nuevafecha = cal.getTime();
        return nuevafecha;
    }

    void limpiarlistadeuda() {
        listadeuda = null;
    }

    void limpiarlistagastos() {
        listagastos = null;
    }


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //Date fecha = null;
        //d_movimiento mov = new d_movimiento();
        //Boolean esgastoinq = false;
        int rows[] = tblinquilinos.getSelectedRows();
        int[] array = new int[rows.length];
        quierecancelar = false;
        //String dia = "01/";

        try {
            con.controlar_seleccion_irpf(inq.getInq_irpf());
            con.controlar_seleccion_tipo_alquiler(inq.getInq_tipoalq());
            if (inq != null) {
                if (inq.inquilino_bloqueado(inq.getProp_id(), inq.getInq_casa())) {
                    throw new Exception("no puede abonar, el inquilino esta bloqueado\n"
                            + "si desea desbloquear, debe hacerlo desde la ficha de inquilino");
                }
            }

            quiereimprimir = false;
            listamovimientos = null;
            aplicoconvenioreintegro = false;
            if (rows.length <= 0) {
                throw new Exception("debe seleccionar al menos una fila para abonar");
            }
            int primervalor = 0;
            for (int i = 0; i < rows.length; i++) {
                if (i == 0) {
                    primervalor = rows[0] + 1;
                    array[0] = primervalor;
                    continue;
                }
                int valor = rows[i] + 1;
                array[i] = valor;
            }
            for (int i = 0; i < array.length; i++) {
                int fila = array[i] - 1; //FILAS EMPIEZAN DESDE 0 
                if (tblinquilinos.getValueAt(fila, 1).toString().equals("ALQUILER ABONADO")) {
                    //System.out.print("fila= " + i + " Valor= " + valorfila);
                    JOptionPane.showMessageDialog(this, toUpperCase("el alquiler esta abonado"), "ERROR", JOptionPane.ERROR_MESSAGE);
                    //f5(inq.getProp_id(), inq.getInq_casa());
                    return;
                    //continue; 05-11
                }
                eliminarlistadodeuda();
                Boolean abona = abonar(fila);

                if (abona == false) {

                    f5(inq.getProp_id(), inq.getInq_casa());
                    /*
                    if (inq.getInq_tipoalq().equals("HABITACION")) {
                        listarimportescasahabitacion();
                    }
                    if (inq.getInq_tipoalq().equals("LOCAL")) {
                        listarimporteslocal();
                    }
                     */
                    return;
                } else {
                    //funcbuscar();                    
                    //actualizarsaldoprop();                    
                }
            }
            //JOptionPane.showMessageDialog(this, "MOVIMIENTO GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            //actualizarsaldoprop();
            //f5(inq.getProp_id(), inq.getInq_casa());
            /*
            funcbuscar();
            if (inq.getInq_tipoalq().equals("HABITACION")) {
                listarimportescasahabitacion();
            }
            if (inq.getInq_tipoalq().equals("LOCAL")) {
                listarimporteslocal();
            }
             */
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        f5(inq.getProp_id(), inq.getInq_casa());
        actualizarsaldoprop();

    }//GEN-LAST:event_jButton2ActionPerformed

    void actualizarsaldoprop() {
        d_propietario pro1 = null;
        Float saldo = 0f;

        try {
            pro1 = new d_propietario();
            saldo = pro1.saldototalprop(inq.getProp_id());
            pro1.actualizarsaldoprop(inq.getProp_id(), saldo);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    Boolean abonar(Integer fila) throws Exception {
        d_configuracion conf = new d_configuracion();
        Date fecha = null;
        d_movimiento mov = new d_movimiento();
        Boolean esgastoinq = false;
        int rows[] = tblinquilinos.getSelectedRows();
        String dia = "01/";
        String valorentrega1 = "";
        Float abonoentrega = 0f;

        try {
            conf = conf.buscarconfiguracion();
            Float importelistado = con.guardarnumero(((String) tblinquilinos.getValueAt(fila, 2))); //valor de prueba
            //String fechastr = dia + tblinquilinos.getValueAt(fila, 3);
            //Date fechacr = parsefechadate(fechastr);
            //importelistado = abonarconvenioreintegro(importelistado, fechacr);
            //String valor2 = valor.replace(".", "").replace(",", ".");
            if (!txtabonoentrega.getText().equals("")) {
                valorentrega1 = txtabonoentrega.getText();
                //valorentrega1 = valorentrega.replace(".", "").replace(",", ".");
            }

            if (inq != null) {
                if (fila != -1) {
                    /*
                    int cant = cantsaldospendientes();

                    if (cant > 0) {
                        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("el inquilino tiene " + cant + " saldo/s pendiente/s \n ¿desea continuar?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                        if (ax == JOptionPane.NO_OPTION || ax == JOptionPane.CANCEL_OPTION) {
                            return false;
                        }
                    }
                     */
                    //CONVENIO-REINTEGRO

                    esgastoinq = esgastoinq(fila, importelistado);
                    if (esgastoinq) {
                        listamovimientos();
                        limpiarlistadeuda();
                        eliminarlistadodeuda();
                        //actualizarcontrato();
                        return true;
                    } //else {
                    //chequearmesapagarnotengasaldo(fila);
                    //return false;
                    //}
                    if (quierecancelar) {
                        return false;
                    }

                    if (esgastoinq == null) {
                        return false;//26-09-23 estaba activo
                    }
                    //OBTENER EL ULTIMO MES PAGO MAS UN MES, 
                    //SI COINCIDE CON LA FECHA QUE QUIERE ABONAR, PERMITIR EL PAGO, DE LO CONTRARIO NO.
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    String mqp = dia + tblinquilinos.getValueAt(fila, 3);
                    mov.setMqp(devuelvemqp(mqp));
                    String aqp = dia + tblinquilinos.getValueAt(fila, 3);
                    mov.setAqp(devuelveaqp(aqp));
                    mov.setDetalle((String) tblinquilinos.getValueAt(fila, 1));
                    if (mov.getDetalle().equals("ALQUILER ABONADO") || mov.getDetalle().equals("A CUENTA ALQUILER")) {
                        //actualizarcontrato();
                        throw new Exception("el alquiler esta abonado");
                    }
                    mov.setEntrada(importelistado);
                    if (importelistado < 0) {
                        throw new Exception("no se pueden abonar importes negativos");
                    }
                    mov.setEntrada(chequearmesapagartengasaldopago(fila, mov.getEntrada()));
                    mov.setSalida(0f);
                    mov.setComision(devuelvecomision((mov.getEntrada())));
                    mov.setIva(devuelveiva(mov.getComision()));
                    mov.setTipo(inq.getInq_nombre());
                    mov.setIrpftipo(inq.getInq_irpf());
                    //mov.setIrpf(devuelveirpf(((mov.getEntrada()))));
                    String fechaa = dia + tblinquilinos.getValueAt(fila, 3);
                    fecha = parsefechadate(fechaa);
                    mov.setFecha(fechaactual());
                    mov.setIrpf(devuelveirpf(((mov.getEntrada())), fecha));
                    /*
                    int a = controlarpagocuota(mov);
                    if (a == -1) {
                        int ax1 = JOptionPane.showConfirmDialog(null, toUpperCase("deberia abonar la primer fecha disponible \n ¿desea continuar?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                        if (ax1 == JOptionPane.NO_OPTION || ax1 == JOptionPane.CANCEL_OPTION) {
                            //actualizarcontrato();
                            return false;
                        }
                    }
                     */
                    if (!mov.getDetalle().equals("ALQUILER ABONADO") && !mov.getDetalle().equals("A CUENTA ALQUILER")) {
                        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea abonar el pago con fecha " + generarfechaconsultapago(fecha) + " correspondiente a: " + tblinquilinos.getValueAt(fila, 1) + "?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                        if (ax == JOptionPane.YES_OPTION) {
                            if (!txtabonoentrega.getText().equals("") && mov.getDetalle().equals("ALQUILER")) {
                                //Float totalvalorentrada = 0f;                        
                                abonoentrega = (con.guardarnumero((valorentrega1)));
                                //totalvalorentrada = mov.getEntrada() - abonoentrega;
                                if (abonoentrega < 1) {
                                    //actualizarcontrato();
                                    throw new Exception("revisar valor entrega, no puede ser igual o menor a 0");
                                }
                                mov.setEntrada(abonoentrega);
                                mov.setComision(devuelvecomision((mov.getEntrada())));
                                mov.setIva(devuelveiva(mov.getComision()));
                                mov.setIrpf(devuelveirpf(((mov.getEntrada())), fecha));
                                mov.setDetalle("SALDO ALQUILER");
                                mov.setTipo(inq.getInq_nombre());
                                mov.setIrpftipo(inq.getInq_irpf());
                                //GENERAR ALQUILER SALDO CON FECHA DE PAGO 
                                generasaldoalquiler(fila, mov.getAqp(), mov.getMqp(), importelistado, abonoentrega);
                                //actualizarcontrato();
                            }
                            if (!txtabonoentrega.getText().equals("")) {
                                mov.setDetalle("A CUENTA ALQUILER");
                                txtabonoentrega.setText("");
                            }
                            //TIPOPAGO
                            mov.setTipopago(devuelvetipopago());
                            //mov.guardarmovimientoinqpaga(mov);
                            int idmov = -1;
                            idmov = mov.guardarmovimientoinqpaga(mov);

                            con.escribirfichero("se ingresa movimiento, id prop.: " + mov.getProp_id() + " -- " + "id inq.: " + mov.getInq_casa() + " -- "
                                    + "mqp: " + mov.getMqp() + " -- " + "aqp: " + mov.getAqp() + " -- " + "detalle: " + mov.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(mov.getEntrada()) + " -- "
                                    + "salida: " + con.mostrarnumero(mov.getSalida()) + " -- " + "comision: " + con.mostrarnumero(mov.getComision()) + " -- " + "iva: " + con.mostrarnumero(mov.getIva()) + " -- " + "tipo: " + mov.getTipo() + " -- "
                                    + "fecha: " + parsefechastring(mov.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(mov.getIrpf()) + " -- " + "irpf tipo: " + mov.getIrpftipo() + " -- tipo de pago: " + mov.getTipopago());

                            guardarrecibo(idmov);
                            abonarconvenioreintegro(mov, fecha);
                            if (aplicoconvenioreintegro) {
                                actualizarconvenioreintegro(mov.getMqp(), mov.getAqp());
                                aplicoconvenioreintegro = false;
                            }

                            actualizargrupoirpf(mov.getIrpf());
                            mostrarrecibo();
                            //actualizarcontrato();
                            generarcomprobanteelectronico(idmov);
                            listamovimientos();
                            limpiarlistadeuda();
                            eliminarlistadodeuda();
                            actualizarsaldoprop();
                            //ACTUALIZAR IMPORTE ALQUILER INQUILINO
                            mov.setEntrada(importelistado);
                            //actualizarimportealquiler(inq.getProp_id(), inq.getInq_casa(), mov.getEntrada());
                            //si paga un gasto, actualizar el gasto, estado = 1
                            //JOptionPane.showMessageDialog(null, "movimiento guardado correctamente");

                            //imprimir(mov, fila);
                            /*
                            if (inq.getInq_tipoalq().equals("HABITACION")) {
                                listarimportescasahabitacion();
                            }
                            if (inq.getInq_tipoalq().equals("LOCAL")) {
                                listarimporteslocal();
                            }
                             */
                            //con.inq = null;
                        } else {
                            //actualizarsaldoprop();
                            //actualizarcontrato();
                            return false;
                        }
                    } else {
                        //actualizarcontrato();
                        JOptionPane.showMessageDialog(this, "EL ALQUILER ESTA ABONADO", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            }
            //sumarplazo();
        } catch (Exception ex) {
            //actualizarcontrato();
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        //actualizarcontrato();
        //funcbuscar();
        return true;
    }

    void guardarrecibo(int idmov) throws Exception {
        d_recibo rec = new d_recibo();
        d_movimiento mov;

        /*
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getImprimir().equals("NO")) {
            return;
        }

        if (!quiereimprimir) {
            int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea imprimir recibo?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax == JOptionPane.CANCEL_OPTION || ax == JOptionPane.NO_OPTION) {
                return;
            }
        }

        quiereimprimir = true;
         */
        mov = new d_movimiento();
        /*
        int id = mov.ultimoid();
        if (id == -1) {
            return;
        }
         */
        mov = mov.buscarmovimiento(idmov);

        /*
        if (mov.getProp_id() != prop_id) {
            throw new Exception("error al generar recibo, puede realizarlo desde ventana de movimientos");
        }
        if (mov.getInq_casa() != inq_casa) {
            throw new Exception("error al generar recibo, puede realizarlo desde ventana de movimientos");
        }
        if (mov.getMqp() != mqp) {
            throw new Exception("error al generar recibo, puede realizarlo desde ventana de movimientos");
        }
        if (mov.getAqp() != aqp) {
            throw new Exception("error al generar recibo, puede realizarlo desde ventana de movimientos");
        }
        if (!mov.getDetalle().equals(detalle)) {
            throw new Exception("error al generar recibo, puede realizarlo desde ventana de movimientos");
        }
         */
        try {
            //rec.eliminarrecibo();

            rec.setIdmovimiento(mov.getId());
            rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
            rec.setFecha(mov.getFecha());
            rec.setNombre_inq(inq.getInq_nombre());
            if (mov.getEntrada() == 0f) {
                rec.setImporte(mov.getSalida() * -1);
            } else {
                rec.setImporte(mov.getEntrada());
            }
            rec.guardarrecibo(rec, "alquiler");
            //mostrarrecibo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    String devuelvetipopago() throws Exception {
        int seleccion = JOptionPane.showOptionDialog(null,
                "MEDIO DE PAGO",
                "SELECCIONE UNA OPCIÓN",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null, // null para icono por defecto.
                new Object[]{"CAJA", "BANCO"}, // null para YES, NO y CANCEL
                "opcion 1");

        if (seleccion == -1) {
            throw new Exception("DEBE SELECCIONAR UNA OPCION DE PAGO");
        }

        if (seleccion == 0) {
            return "CAJA";
        }
        if (seleccion == 1) {
            return "BANCO";
        }
        return "";
    }

    void abonarconvenioreintegro(d_movimiento mov, Date fechapago) throws Exception {
        d_movimiento movaux = new d_movimiento();
        d_gastos_inq gas = new d_gastos_inq();

        movaux = mov;

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp((movaux.getMqp()));
        gas.setAqp((movaux.getAqp()));

        gas = devuelveconveniosreintegros(gas);

        if (gas == null) {
            return;
        }

        float numeroamostrar = gas.getImporte();
        if (gas.getImporte() < 0) {
            numeroamostrar = numeroamostrar * -1;
            mov.setSalida(numeroamostrar);
            mov.setEntrada(0f);
        } else {
            mov.setEntrada(gas.getImporte());
            mov.setSalida(0f);
        }

        movaux.setDetalle(gas.getDetalle());

        if (gas.getImporte() < 0) {
            movaux.setComision(0f);
            movaux.setIva(0f);
            movaux.setIrpf(0f);
        } else {
            movaux.setComision(devuelvecomision((gas.getImporte())));
            movaux.setIva(devuelveiva(mov.getComision()));
            movaux.setIrpf(devuelveirpf(gas.getImporte(), fechapago));
        }

        movaux.setIrpftipo(inq.getInq_irpf());

        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("el inquilino tiene un " + gas.getDetalle() + " de: $" + con.mostrarnumero(numeroamostrar) + " para la fecha de pago seleccionada \n ¿desea aplicar?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
        if (!(ax == JOptionPane.NO_OPTION || ax == JOptionPane.CANCEL_OPTION)) {
            int idmov = -1;
            idmov = movaux.guardarmovimientoinqpaga(movaux);
            con.escribirfichero("se ingresa movimiento, id prop.: " + movaux.getProp_id() + " -- " + "id inq.: " + movaux.getInq_casa() + " -- "
                    + "mqp: " + movaux.getMqp() + " -- " + "aqp: " + movaux.getAqp() + " -- " + "detalle: " + movaux.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(movaux.getEntrada()) + " -- "
                    + "salida: " + con.mostrarnumero(movaux.getSalida()) + " -- " + "comision: " + con.mostrarnumero(movaux.getComision()) + " -- " + "iva: " + con.mostrarnumero(movaux.getIva()) + " -- " + "tipo: " + movaux.getTipo() + " -- "
                    + "fecha: " + parsefechastring(movaux.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(movaux.getIrpf()) + " -- " + "irpf tipo: " + movaux.getIrpftipo() + " -- tipo de pago: " + movaux.getTipopago());
            guardarrecibo(idmov);
            aplicoconvenioreintegro = true;
        }
    }

    void actualizarconvenioreintegro(int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(mqp);
        gas.setAqp(aqp);

        gas = devuelveconveniosreintegros(gas);

        if (gas == null) {
            return;
        }

        gas.setEstado(3);

        gas.cambiarestadoconvenioreintegro(gas);

    }

    void generarcomprobanteelectronico(int idmov) throws Exception {

        d_movimiento mov = new d_movimiento();
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getCfe().equals("NO")) {
            return;
        }

        if (conf.getClave().equals("SI")) {
            d_clave cla = new d_clave();
            JPasswordField pf = new JPasswordField();
            cla = cla.buscarclave();

            int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (ax == JOptionPane.OK_OPTION) {
                String password = new String(pf.getPassword());
                if (!password.equals(cla.getClave())) {
                    throw new Exception("clave incorrecta");
                }
            } else {
                return;
            }
        }

        mov = mov.buscarmovimiento(idmov);

        if (mov == null) {
            throw new Exception("error al obtener datos de movimiento: " + idmov + "\nintente nuevamente");
        }

        if (mov.getComision() == 0f) {
            throw new Exception("MOVIMIENTO CON ID: " + mov.getId() + " NO SE PUEDE ENVIAR A DGI POR TENER COMISION IGUAL A 0");
        }

        obtenercirut(mov.getProp_id(), mov);

    }

    void obtenercirut(int prop_id, d_movimiento mov) throws Exception {
        String resultado = "";
        d_propietario prop = new d_propietario();

        prop = prop.buscarpropietario(prop_id);
        String limpiastring = prop.getProp_cirut().replace(".", "").replace("-", "");
        if (!limpiastring.equals(prop.getProp_cirut())) {
            prop.setProp_cirut(limpiastring);
            prop.guardarpropietario(prop);
        }
        if (limpiastring.length() == 8) {
            //es ci - genera e-ticket 
            CFEeticket(mov);
        } else {
            //es rut - genera e-factura
            CFEefactura(mov);
        }
    }

    void CFEeticket(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            throw new Exception("movimiento ya cuenta con factura electronica");
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlticket(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());
        //Integer id = (con.obtenerMayorNumDOCCFE(101) + 1);
        Integer id = mov.getId();
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();
        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                throw new Exception("INTENTE NUEVAMENTE DESDE VENTANA DE MOVIMIENTOS: FALLA EN CONEXION A DGI\n" + envio.getDescripcion().getValue());
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }

        //int numserie=envio.getIdCFE().getValue().getNumero();
        //throw new Exception(envio.getDescripcion().getValue());
        //JOptionPane.showMessageDialog(null,numserie);
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
    }

    void CFEefactura(d_movimiento mov) throws Exception {
        //primero chequear que id mov no este en la nueva tabla que guarda cfe
        d_cfe cfe = new d_cfe();
        d_parametroscfe pcfe = new d_parametroscfe();
        SICFERespuestaEnvioCFE envio = new SICFERespuestaEnvioCFE();
        d_generarcfe gt = new d_generarcfe();
        Integer i = -1;

        pcfe = pcfe.buscarparametroscfe();
        if (pcfe == null) {
            throw new Exception("debe ingresar parametros cfe: nombre, clave y tenant");
        }

        cfe = cfe.buscarcfe(mov.getId());

        if (cfe != null) {
            throw new Exception("movimiento ya cuenta con factura electronica");
        }

        gt = gt.ticketdefecto();
        //ver si es necesario cambiar alguna variable de ticket por defecto
        gt.setCfexml(gt.cfexmlfactura(mov));
        //gt.setReferenciaERP("56555");
        gt.setNomusuario(pcfe.getNomusuario());
        gt.setClave(pcfe.getClave());
        gt.setTenant(pcfe.getTenant());

        //Integer id = (con.obtenerMayorNumDOCCFE(111) + 1);
        Integer id = mov.getId();
        gt.setReferenciaERP(String.valueOf(id));
        envio = envioCFE(gt.getNomusuario(), gt.getClave(),
                gt.getTenant(), gt.getCliente(), gt.getCfexml(), gt.getReferenciaERP(),
                gt.getReferenciaERP2(), gt.getDevolverQR(), gt.getSizeQR(),
                gt.getImprime(), gt.getRecurso(), gt.getTemplate(), gt.getDevolverXML(),
                gt.getErpPideValidacion(), gt.getVersion());
        //i = envio.getCodigo();

        if (envio.getCodigo() != 0) {
            if (envio.getCodigo() == 100009) {
                throw new Exception("INTENTE NUEVAMENTE DESDE VENTANA DE MOVIMIENTOS: FALLA EN CONEXION A DGI\n" + envio.getDescripcion().getValue());
            }
        } else {
            guardarcfe(mov.getId(), "A", envio.getIdCFE().getValue().getNumero(),
                    envio.getIdCFE().getValue().getRucemisor().getValue(),
                    envio.getIdCFE().getValue().getTipo(), envio.getIdCFE().getValue().getObservado());
        }
        JOptionPane.showMessageDialog(this, "CFE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
    }

    private static SICFERespuestaEnvioCFE envioCFE(java.lang.String nomusuario, java.lang.String clave,
            java.lang.String tenant, java.lang.String cliente, java.lang.String cfexml, java.lang.String referenciaERP,
            java.lang.String referenciaERP2, java.lang.Boolean devolverQR, java.lang.Integer sizeQR,
            java.lang.Integer imprime, java.lang.String recurso, java.lang.String template, java.lang.Boolean devolverXML,
            java.lang.Boolean erpPideValidacion, java.lang.String version) {
        org.tempuri.ImpSICFEEmisor service = new org.tempuri.ImpSICFEEmisor();
        org.tempuri.ISICFEEmisor port = service.getBasicHttpBindingISICFEEmisor();
        return port.envioCFE(nomusuario, clave, tenant, cliente, cfexml, referenciaERP, referenciaERP2,
                devolverQR, sizeQR, imprime, recurso, template, devolverXML, erpPideValidacion, version);
    }

    void guardarcfe(Integer idmov, String serie, Integer numero, String rucemisor, Integer tipo, Integer observado) throws Exception {
        d_cfe cfe = new d_cfe();

        cfe.setIdmov(idmov);
        cfe.setSerie(serie);
        cfe.setNumero(numero);
        cfe.setRucemisor(rucemisor);
        cfe.setTipo(tipo);
        cfe.setObservado(observado);

        cfe.guardarcfe(cfe);
        con.escribirfichero("se crea documento dgi, movimiento: " + idmov + " -- serie: " + serie + " -- numero: " + numero + " -- ruc emisor: " + rucemisor + " -- tipo: " + tipo + " -- observado: " + observado);
    }

    Integer cantsaldospendientes() throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        Integer cant = 0;

        cant = gas.cantsaldospendientes(inq.getProp_id(), inq.getInq_casa());

        return cant;
    }

    void generasaldoalquiler(Integer fila, Integer aqp, Integer mqp, Float importeapagar, Float importedeentrega) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        Float importe = 0f;

        if (inq == null) {
            throw new Exception("inquilino no existe");
        }
        importe = importeapagar - importedeentrega;
        if (importe < 1) {
            throw new Exception("revise importe de la entrega, debe ser menor al importe total");
        }
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setImporte(importe);
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);
        gas.setEstado(0);
        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("se generará un nuevo saldo de alquiler con importe ($): " + con.mostrarnumero(importe)) + "\n¿DESEA CONTINUAR?", "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
        switch (ax) {
            case JOptionPane.YES_OPTION:
                gas.guardargastoinq(gas);
                if (aplicoconvenioreintegro) {
                    actualizarconvenioreintegro(mqp, aqp);
                }
                JOptionPane.showMessageDialog(this, "SALDO GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                listamovimientos();
                actualizarsaldoprop();
                break;
            case JOptionPane.NO_OPTION:
                throw new Exception("el pago seleccionado no fue ingresado");
            case JOptionPane.CANCEL_OPTION:
                throw new Exception("el pago seleccionado no fue ingresado");
            default:
                break;
        }

    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        d_recibo rec = new d_recibo();
        d_movimiento mov = null;
        d_movimiento movcr = null;
        int rows[] = tblinquilinos.getSelectedRows();
        int row = -1;
        String dia = "01/";

        try {
            rec.eliminarrecibo("alquiler");
            quiereimprimir = true;
            for (int i = 0; i < rows.length; i++) {
                row = rows[i];
                if (tblinquilinos.getValueAt(row, 1).equals("ALQUILER ABONADO") || tblinquilinos.getValueAt(row, 1).equals("A CUENTA ALQUILER")) {
                    mov = new d_movimiento();
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    if (tblinquilinos.getValueAt(row, 1).equals("ALQUILER ABONADO")) {
                        mov.setDetalle("ALQUILER ABONADO");
                    }
                    if (tblinquilinos.getValueAt(row, 1).equals("A CUENTA ALQUILER")) {
                        mov.setDetalle("A CUENTA ALQUILER");
                    }
                    String mqp = dia + tblinquilinos.getValueAt(row, 3);
                    String aqp = dia + tblinquilinos.getValueAt(row, 3);
                    mov.setAqp(devuelveaqp(aqp));
                    mov.setMqp(devuelvemqp(mqp));
                    mov = mov.buscarcuotapaga(mov);
                    if (mov != null) {
                        rec.setIdmovimiento(mov.getId());
                        rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
                        rec.setFecha(mov.getFecha());
                        rec.setNombre_inq(inq.getInq_nombre());
                        rec.setImporte(mov.getEntrada());
                        rec.guardarrecibo(rec, "alquiler");
                        movcr = buscarconvenioreintegropago(mov);
                        if (movcr != null) {
                            rec = new d_recibo();
                            rec.setIdmovimiento(movcr.getId());
                            rec.setDetalle(movcr.getDetalle() + ": " + movcr.getMqp() + "/" + movcr.getAqp());
                            rec.setFecha(movcr.getFecha());
                            rec.setNombre_inq(inq.getInq_nombre());
                            if (movcr.getEntrada() == 0f) {
                                rec.setImporte(movcr.getSalida() * -1);
                            } else {
                                rec.setImporte(movcr.getEntrada());
                            }
                            rec.guardarrecibo(rec, "alquiler");
                        }
                    } else {
                        mov = new d_movimiento();
                        mov.setProp_id(inq.getProp_id());
                        mov.setInq_casa(inq.getInq_casa());
                        mov.setAqp(devuelveaqp(aqp));
                        mov.setMqp(devuelvemqp(mqp));
                        mov = buscaralquilerpagadoconsaldo(mov);
                        if (mov != null) {
                            rec.setIdmovimiento(mov.getId());
                            rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
                            rec.setFecha(mov.getFecha());
                            rec.setNombre_inq(inq.getInq_nombre());
                            rec.setImporte(mov.getEntrada());
                            rec.guardarrecibo(rec, "alquiler");
                            movcr = buscarconvenioreintegropago(mov);
                            if (movcr != null) {
                                rec = new d_recibo();
                                rec.setIdmovimiento(movcr.getId());
                                rec.setDetalle(movcr.getDetalle() + ": " + movcr.getMqp() + "/" + movcr.getAqp());
                                rec.setFecha(movcr.getFecha());
                                rec.setNombre_inq(inq.getInq_nombre());
                                if (movcr.getEntrada() == 0f) {
                                    rec.setImporte(movcr.getSalida() * -1);
                                } else {
                                    rec.setImporte(movcr.getEntrada());
                                }
                                rec.guardarrecibo(rec, "alquiler");
                            }
                        }
                    }
                }
            }
            mostrarrecibo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    d_movimiento buscarconvenioreintegropago(d_movimiento mov) throws Exception {
        return mov.buscarconvenioreintegropago(mov);
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        d_recibo rec = new d_recibo();
        d_movimiento mov = null;
        d_movimiento movcr = null;
        int rows[] = tblinquilinos.getSelectedRows();
        int row = -1;
        String dia = "01/";

        try {
            rec.eliminarrecibo("alquiler");
            quiereimprimir = true;
            for (int i = 0; i < rows.length; i++) {
                row = rows[i];
                if (tblinquilinos.getValueAt(row, 1).equals("ALQUILER ABONADO") || tblinquilinos.getValueAt(row, 1).equals("A CUENTA ALQUILER")) {
                    mov = new d_movimiento();
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    if (tblinquilinos.getValueAt(row, 1).equals("ALQUILER ABONADO")) {
                        mov.setDetalle("ALQUILER ABONADO");
                    }
                    if (tblinquilinos.getValueAt(row, 1).equals("A CUENTA ALQUILER")) {
                        mov.setDetalle("A CUENTA ALQUILER");
                    }
                    String mqp = dia + tblinquilinos.getValueAt(row, 3);
                    String aqp = dia + tblinquilinos.getValueAt(row, 3);
                    mov.setAqp(devuelveaqp(aqp));
                    mov.setMqp(devuelvemqp(mqp));
                    mov = mov.buscarcuotapaga(mov);
                    if (mov != null) {
                        rec.setIdmovimiento(mov.getId());
                        rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
                        rec.setFecha(mov.getFecha());
                        rec.setNombre_inq(inq.getInq_nombre());
                        rec.setImporte(mov.getEntrada());
                        rec.guardarrecibo(rec, "alquiler");
                        movcr = buscarconvenioreintegropago(mov);
                        if (movcr != null) {
                            rec = new d_recibo();
                            rec.setIdmovimiento(movcr.getId());
                            rec.setDetalle(movcr.getDetalle() + ": " + movcr.getMqp() + "/" + movcr.getAqp());
                            rec.setFecha(movcr.getFecha());
                            rec.setNombre_inq(inq.getInq_nombre());
                            if (movcr.getEntrada() == 0f) {
                                rec.setImporte(movcr.getSalida() * -1);
                            } else {
                                rec.setImporte(movcr.getEntrada());
                            }
                            rec.guardarrecibo(rec, "alquiler");
                        }
                    } else {
                        //mov1 = buscaralquilerpagadoconsaldo(mov);
                        mov = new d_movimiento();
                        mov.setProp_id(inq.getProp_id());
                        mov.setInq_casa(inq.getInq_casa());
                        mov.setAqp(devuelveaqp(aqp));
                        mov.setMqp(devuelvemqp(mqp));
                        mov = buscaralquilerpagadoconsaldo(mov);
                        if (mov != null) {
                            rec.setIdmovimiento(mov.getId());
                            rec.setDetalle(mov.getDetalle() + ": " + mov.getMqp() + "/" + mov.getAqp());
                            rec.setFecha(mov.getFecha());
                            rec.setNombre_inq(inq.getInq_nombre());
                            rec.setImporte(mov.getEntrada());
                            rec.guardarrecibo(rec, "alquiler");
                            movcr = buscarconvenioreintegropago(mov);
                            if (movcr != null) {
                                rec = new d_recibo();
                                rec.setIdmovimiento(movcr.getId());
                                rec.setDetalle(movcr.getDetalle() + ": " + movcr.getMqp() + "/" + movcr.getAqp());
                                rec.setFecha(movcr.getFecha());
                                rec.setNombre_inq(inq.getInq_nombre());
                                if (movcr.getEntrada() == 0f) {
                                    rec.setImporte(movcr.getSalida() * -1);
                                } else {
                                    rec.setImporte(movcr.getEntrada());
                                }
                                rec.guardarrecibo(rec, "alquiler");
                            }
                        }
                    }
                }
            }
            mostrarrecibocopia();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            java.sql.Connection c;
            p_conexion conex = p_conexion.getInstancia();
            c = conex.crearconexion();

            //javax.swing.JOptionPane.showMessageDialog(null, "Conexion establecida");
            String template = "recibo-deuda.jasper";
            JasperReport reporte = null;
            reporte = (JasperReport) JRLoader.loadObject(template);

            //Map param = new HashMap();
            //param.put("id", 1);
            JasperPrint jasperprint = JasperFillManager.fillReport(reporte, null, c);
            //donde dice 'null' va el parametro, si es utilizado
            JasperViewer visor = new JasperViewer(jasperprint, false);
            visor.setTitle("Lista de Pagos");
            visor.setVisible(true);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, toUpperCase(e), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtprop_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtprop_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            funcbuscar();
        }
    }//GEN-LAST:event_txtprop_idKeyPressed

    private void txtinq_idKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtinq_idKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            funcbuscar();
        }
    }//GEN-LAST:event_txtinq_idKeyPressed

    private void jMenu9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu9MouseClicked
        p_listadosreintegrosconvenios lis = new p_listadosreintegrosconvenios(null, true);
        lis.setVisible(true);
    }//GEN-LAST:event_jMenu9MouseClicked

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            funcbuscar();
        }
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            //devuelvetipopago();
            sumarplazo();
            //JOptionPane.showMessageDialog(this, "PLAZO ACTUALIZADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        funcbuscar();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton6KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton6KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6KeyPressed

    private void tblinquilinosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblinquilinosMouseClicked
        int rows[] = tblinquilinos.getSelectedRows();
        int row = -1;
        try {
            for (int i = 0; i < rows.length; i++) {
                row = rows[i];
            }

            if (tblinquilinos.getValueAt(row, 1).toString().equals("ALQUILER ABONADO")) {
                return;
            }
            if (evt.getClickCount() == 2) {
                //JOptionPane.showMessageDialog(this, toUpperCase("2 clic"), "ERROR", JOptionPane.ERROR_MESSAGE);
                //desea eliminar gasto
                String fecha = (String) tblinquilinos.getValueAt(row, 3);
                String dia = "01/";
                String mqps = dia + tblinquilinos.getValueAt(row, 3);
                String aqps = fecha.substring(fecha.length() - 4);
                Integer mqp = devuelvemqp(mqps);
                Integer aqp = Integer.valueOf(aqps);
                String detalle = ((String) tblinquilinos.getValueAt(row, 1));

                String pri2 = fecha.substring(0, 2);
                String ult2 = fecha.substring(fecha.length() - 2);
                if (pri2.equals("0/")) {
                    mqp = 0;
                }
                if (ult2.equals("/0")) {
                    aqp = 0;
                }
                eliminar_gasto(mqp, aqp, detalle);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

        //if (evt.getClickCount()==2){
        //JOptionPane.showMessageDialog(this, toUpperCase("2 clic"), "ERROR", JOptionPane.ERROR_MESSAGE);
        //}
    }//GEN-LAST:event_tblinquilinosMouseClicked

    Boolean ingreso_clave() throws Exception {
        d_clave cla = new d_clave();
        JPasswordField pf = new JPasswordField();
        cla = cla.buscarclave();
        int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE CLAVE", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (ax == JOptionPane.OK_OPTION) {
            String password = new String(pf.getPassword());
            if (!password.equals(cla.getClave())) {
                throw new Exception("clave incorrecta");
            } else {
                return true;
            }
        } else if (ax != JOptionPane.OK_OPTION) {
            return false;
        }
        return false;
    }
    private void jMenu10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu10MouseClicked
        /*
        p_control con = p_control.getInstancia();
        JTextField pf = new JTextField();

        d_alquileres_info alq = new d_alquileres_info();
        //la = cla.buscarclave();
        try {
            if (inq != null) {

                int ax = JOptionPane.showConfirmDialog(null, pf, "INGRESE VALOR IMPORTE ($)", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if (ax == JOptionPane.OK_OPTION) {
                    String valor = pf.getText();
                    Float importe = con.guardarnumero(valor);
                    alq.setProp_id(inq.getProp_id());
                    alq.setInq_casa(inq.getInq_casa());
                    alq.setImporte(importe);
                    alq.guardar_alquiler_info(alq);
                    con.escribirfichero("INQ - correccion ingresada, id prop.: " + alq.getProp_id()
                            + " -- id inq.: " + alq.getInq_casa() + " -- importe: " + con.mostrarnumero(alq.getImporte()));
                    JOptionPane.showMessageDialog(this, "IMPORTE GUARDADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                    if (inq.getInq_tipoalq().equals("HABITACION")) {
                        actualizarimportealquilerhabitacion(inq);
                    }
                    if (inq.getInq_tipoalq().equals("LOCAL")) {
                        actualizarimportealquilerlocal(inq);
                    }
                    funcbuscar();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }

         */
        if (inq == null) {
            return;
        }
        p_agregar_correccion fic = null;
        con.inq = inq;
        fic = new p_agregar_correccion(null, true);
        fic.setVisible(true);
    }//GEN-LAST:event_jMenu10MouseClicked

    private void jMenu11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu11MouseClicked
        //ELIMINAR
        d_alquileres_info alq = new d_alquileres_info();
        d_inquilino inq1 = null;
        try {
            if (inq != null) {
                int ax = JOptionPane.showConfirmDialog(null, toUpperCase("ELIMINAR CORRECCION DE IMPORTE\n¿desea ejecutar la funcion?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
                    if (alq == null) {
                        JOptionPane.showMessageDialog(this, "INQUILINO NO TIENE NINGUNA CORRECCION INGRESADA", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                        return;
                    } else {
                        alq.eliminar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
                        con.escribirfichero("INQ - correccion eliminada, id prop.: " + alq.getProp_id()
                                + " -- id inq.: " + alq.getInq_casa() + " -- importe: " + con.mostrarnumero(alq.getImporte()));
                        JOptionPane.showMessageDialog(this, "IMPORTE ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                        //return;
                    }
                    //corregir, vuelve al valor de la ficha, esta mal
                    inq.reiniciarimpalquilerparticular(inq.getProp_id(), inq.getInq_casa());
                    inq1 = inq.buscarinquilino(inq.getProp_id(), inq.getInq_casa());
                    if (inq.getInq_tipoalq().equals("HABITACION")) {
                        actualizarimportealquilerhabitacion(inq1);
                    }
                    if (inq.getInq_tipoalq().equals("LOCAL")) {
                        actualizarimportealquilerlocal(inq1);
                    }
                    funcbuscar();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jMenu11MouseClicked

    private void tblinquilinosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblinquilinosMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tblinquilinosMouseEntered

    private void jMenu12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu12MouseClicked
        p_mov_inq_correccion gas = null;

        if (inq == null) {
            return;
        }
        con.inq = inq;
        gas = new p_mov_inq_correccion(null, true);
        gas.setVisible(true);
    }//GEN-LAST:event_jMenu12MouseClicked

    void eliminar_gasto(Integer mqp, Integer aqp, String detalle) throws Exception {
        int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea eliminar el pago con fecha " + mqp + "/" + aqp + " correspondiente a: " + detalle + "?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
        if (ax == JOptionPane.NO_OPTION) {
            return;
        }
        if (ax == JOptionPane.CANCEL_OPTION) {
            return;
        }
        if (ax == JOptionPane.YES_OPTION) {
            if (!ingreso_clave()) {
                return;
            }
            d_gastos_inq gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setAqp(aqp);
            gas.setMqp(mqp);
            gas.setDetalle(detalle);
            if (gas.actualizarestadoauno(gas)) {//devuelve true, borra
                JOptionPane.showMessageDialog(this, "GASTO ELIMINADO CORRECTAMENTE", "AVISO", JOptionPane.INFORMATION_MESSAGE);
                f5(inq.getProp_id(), inq.getInq_casa());
            } else {
                JOptionPane.showMessageDialog(this, "GASTO NO SE PUEDE ELIMINAR\nNO EXISTE EN LA BASE DE DATOS", "AVISO", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }

    //Integer devuelvemesfechastring(String fecha) throws Exception {
    //}
    void mostrarrecibo() throws ClassNotFoundException, SQLException, JRException, Exception {
        d_configuracion conf = new d_configuracion();

        conf = conf.buscarconfiguracion();

        if (conf.getImprimir().equals("NO")) {
            return;
        }

        if (!quiereimprimir) {
            int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea imprimir recibo?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
            if (ax == JOptionPane.CANCEL_OPTION || ax == JOptionPane.NO_OPTION) {
                return;
            }
        }

        quiereimprimir = true;

        d_recibo rec = new d_recibo();
        d_inquilino inqrec = new d_inquilino();
        int prop_id;
        int inq_casa;

        prop_id = Integer.parseInt(txtprop_id.getText());
        inq_casa = Integer.parseInt(txtinq_id.getText());
        inqrec = inqrec.buscarinquilino(prop_id, inq_casa);

        if (inqrec == null) {
            return;
        }

        java.sql.Connection c;
        p_conexion conex = p_conexion.getInstancia();
        c = conex.crearconexion();

        //javax.swing.JOptionPane.showMessageDialog(null, "Conexion establecida");
        String template = "reciboinmo.jasper";
        //List<Integer> empleados = Arrays.asList(203842, 203841);
        //Map<Integer, Object> parameters = new HashMap<Integer, Object>();
        JasperReport reporte = null;
        reporte = (JasperReport) JRLoader.loadObject(template);
        Map param = new HashMap();
        param.put("prop_id", inq.getProp_id());
        param.put("inq_casa", inq.getInq_casa());
        param.put("nombre_inq", inq.getInq_nombre());
        param.put("inq_direccion", inq.getInq_direccion());
        param.put("inq_padcasa", inq.getInq_padcasa());
        param.put("movimiento", "entrada");
        //controlarfechas();
        //fecha1 = parsefechadate(txtfecha1.getText());
        //fecha2 = parsefechadate(txtfecha2.getText());
        //Map param = new HashMap();
        //param.put("fecha1", fecha1);
        //param.put("fecha2", fecha2);
        JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
        //donde dice 'null' va el parametro, si es utilizado
        //this.setVisible(false);
        JasperViewer visor = new JasperViewer(jasperprint, false);
        visor.setTitle("Recibo");
        visor.setVisible(true);
        rec.eliminarrecibo("alquiler");
        guardarlistadodeuda();
    }

    void mostrarrecibocopia() throws ClassNotFoundException, SQLException, JRException, Exception {
        d_recibo rec = new d_recibo();
        d_inquilino inqrec = new d_inquilino();
        int prop_id = -1;
        int inq_casa = -1;

        prop_id = Integer.parseInt(txtprop_id.getText());
        inq_casa = Integer.parseInt(txtinq_id.getText());
        inqrec = inqrec.buscarinquilino(prop_id, inq_casa);
        if (inqrec == null) {
            return;
        }

        java.sql.Connection c;
        p_conexion conex = p_conexion.getInstancia();
        c = conex.crearconexion();

        //javax.swing.JOptionPane.showMessageDialog(null, "Conexion establecida");
        String template = "reciboinmocopia.jasper";
        //List<Integer> empleados = Arrays.asList(203842, 203841);
        //Map<Integer, Object> parameters = new HashMap<Integer, Object>();
        JasperReport reporte = null;
        reporte = (JasperReport) JRLoader.loadObject(template);
        Map param = new HashMap();
        param.put("prop_id", inq.getProp_id());
        param.put("inq_casa", inq.getInq_casa());
        param.put("nombre_inq", inq.getInq_nombre());
        param.put("inq_direccion", inq.getInq_direccion());
        param.put("inq_padcasa", inq.getInq_padcasa());
        param.put("movimiento", "entrada");
        //controlarfechas();
        //fecha1 = parsefechadate(txtfecha1.getText());
        //fecha2 = parsefechadate(txtfecha2.getText());
        //Map param = new HashMap();
        //param.put("fecha1", fecha1);
        //param.put("fecha2", fecha2);
        JasperPrint jasperprint = JasperFillManager.fillReport(reporte, param, c);
        //donde dice 'null' va el parametro, si es utilizado
        //this.setVisible(false);
        JasperViewer visor = new JasperViewer(jasperprint, false);
        visor.setTitle("Recibo");
        visor.setVisible(true);
        rec.eliminarrecibo("alquiler");
        guardarlistadodeuda();
    }

    void actualizargrupoirpf(Float monto) throws Exception {
        d_grupoirpf gru = new d_grupoirpf();
        d_propietario prop = new d_propietario();

        Date fechadate = null;
        String fecha = "";
        Integer mes = -1;
        Integer anio = -1;

        fechadate = fechaactual();
        //fechadate = parsefechadate(fecha);
        mes = devuelvemes(fechadate);
        anio = devuelveanio(fechadate);
        fecha = mes.toString() + anio.toString();
        Boolean guardamontoirpf = false;
        //fecha = "52017";
        //par = par.buscarparametro();
        if (inq.getInq_irpf().equals("SI")) {
            listagrupoirpf = gru.listarciporproppago(inq.getProp_id());
            //recorrer lista y actualizar montos
            //irpf = importereajustado * par.getIrpf() / 100;
            if (listagrupoirpf.size() > 0) {
                for (d_grupoirpf aux : listagrupoirpf) {
                    gru = grupoirpfdeprop(aux.getCigrupo(), inq.getProp_id());
                    if (existeciparafecha(gru.getCigrupo(), fecha, inq.getProp_id())) {//cigrupo,fecha
                        //actualizar
                        gru.setMonto(gru.getMonto() + monto * gru.getPorcentaje() / 100);
                        gru.setFecha(fecha);
                        gru.actualizarmontogrupoirpf(gru);
                        guardamontoirpf = true;
                    } else {
                        //guardarnuevogrupoirpf                        
                        gru.setMonto(monto * gru.getPorcentaje() / 100);
                        gru.setFecha(fecha);
                        gru.guardarnuevogrupoirpf(gru);
                        guardamontoirpf = true;
                    }
                }
            }
            if (guardamontoirpf == false) {
                prop = prop.buscarpropietario(inq.getProp_id());
                gru.setProp_id(prop.getProp_id());
                gru.setNombre(prop.getProp_nombre());
                gru.setCigrupo(prop.getProp_cirut());
                gru.setPorcentaje(100F);
                gru.setMonto(monto * gru.getPorcentaje() / 100);
                gru.setFecha(fecha);
                gru.guardarnuevogrupoirpf(gru);
            }
        }
    }

    Boolean existeciparafecha(String cigrupo, String fecha, Integer prop_id) throws Exception {
        d_grupoirpf aux = new d_grupoirpf();

        aux = aux.existeciparafecha(cigrupo, fecha, prop_id);
        if (aux != null) {
            return true;
        }

        return false;
    }

    d_grupoirpf grupoirpfdeprop(String cigrupo, Integer prop_id) throws Exception {
        d_grupoirpf aux = new d_grupoirpf();

        return aux.grupoirpfdeprop(cigrupo, prop_id);
    }

    void chequearmesapagarnotengasaldo(Integer row) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        String dia = "01/";

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle("SALDO ALQUILER");
        String mqp = dia + tblinquilinos.getValueAt(row, 3);
        gas.setMqp(devuelvemqp(mqp));
        String aqp = dia + tblinquilinos.getValueAt(row, 3);
        gas.setAqp(devuelveaqp(aqp));
        gas = gas.buscargastoporinqpendiente(gas);

        if (gas != null) {
            throw new Exception("debe abonar saldo correspondiente al mes seleccionado");
        }
    }

    Float chequearmesapagartengasaldopago(Integer row, Float valor) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        String dia = "01/";
        Float importe = 0f;

        importe = valor;

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle("SALDO ALQUILER");
        String mqp = dia + tblinquilinos.getValueAt(row, 3);
        gas.setMqp(devuelvemqp(mqp));
        String aqp = dia + tblinquilinos.getValueAt(row, 3);
        gas.setAqp(devuelveaqp(aqp));
        gas = gas.buscargastoporinqnopendiente(gas);

        if (gas != null) {
            importe = importe - gas.getImporte();
        }
        return importe;
    }

    Boolean esgastoinq(Integer row, Float importeflo) throws Exception {
        Boolean esgastoinq = false;
        d_movimiento mov = new d_movimiento();
        d_gastos_inq gas = new d_gastos_inq();
        Date fecha = null;
        String dia = "01/";
        //Object importe = 0f;

        //String valor2 = (String) tblinquilinos.getValueAt(row, 2); //valor de prueba
        //importeflo = con.guardarnumero(valor2);
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle((String) tblinquilinos.getValueAt(row, 1));
        gas.setImporte(importeflo);
        if (importeflo < 0) {
            throw new Exception("no se pueden abonar importes negativos");
        }
        String mqp = dia + tblinquilinos.getValueAt(row, 3);
        gas.setMqp(devuelvemqp(mqp));
        String aqp = dia + tblinquilinos.getValueAt(row, 3);
        gas.setAqp(devuelveaqp(aqp));
        gas = gas.buscargastoporinqpendiente(gas);
        //no se fija el importe

        if (gas != null) {
            //chequear si ingreso una entrega
            //chequear que sea menor a gas.importe y mayor a 0
            //actualizar el nuevo importe gas.importe-valor entrega
            //¿desea abonar una entrega para el saldo de alquiler correspondiente?
            //return
            if (!txtabonoentrega.getText().equals("")) {
                String valorentrega = (String) txtabonoentrega.getText(); //valor de prueba

                //String valorentrega2 = valorentrega.replace(".", "").replace(",", ".");
                importeflo = con.guardarnumero((valorentrega));
                if (importeflo < 0 || importeflo >= gas.getImporte()) {
                    throw new Exception("el valor de la entrega debe ser mayor a 0, y menor al saldo total correspondiente");
                }
                esgastoinq = true;
                gas.setImporte(gas.getImporte() - importeflo);
                if (gas.getDetalle().equals("ALQUILER") || gas.getDetalle().equals("SALDO ALQUILER")) {
                    gas.actualizarimporte_y_detalle_luego_de_entrega_alquiler(gas);
                } else {
                    String palabra = "SALDO";
                    String texto = gas.getDetalle();
                    String detalle = "";
                    boolean resultado = texto.contains(palabra);

                    if (resultado) {
                        //System.out.println("palabra encontrada");
                        detalle = gas.getDetalle();
                    } else {
                        //System.out.println("palabra no encontrada");
                        detalle = "SALDO " + gas.getDetalle();
                    }

                    gas.actualizarimporte_y_detalle_luego_de_entrega_distinto_alquiler(gas, detalle);
                    gas.setDetalle(detalle);
                    //gas.actualizarimporte(gas);
                }
                String fechaa = dia + tblinquilinos.getValueAt(row, 3);
                fecha = parsefechadate(fechaa);

                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setMqp(gas.getMqp());
                mov.setAqp(gas.getAqp());
                if (gas.getDetalle().equals("A CUENTA ALQUILER") || gas.getDetalle().equals("SALDO ALQUILER") || gas.getDetalle().equals("ALQUILER DIAS") || gas.getDetalle().equals("ALQUILER MES")
                        || gas.getDetalle().equals("ALQUILER")) {
                    mov.setDetalle("A CUENTA ALQUILER");
                    mov.setIrpf(devuelveirpf(((importeflo)), fecha));
                } else {
                    mov.setDetalle("A CUENTA: " + gas.getDetalle());
                    mov.setIrpf(0f);
                }
                mov.setEntrada(importeflo);
                mov.setSalida(0.0f);
                mov.setComision(devuelvecomision((mov.getEntrada())));
                mov.setIva(devuelveiva(mov.getComision()));
                //mov.setIrpf(devuelveirpf(((mov.getEntrada())), fecha));

                mov.setFecha(fechaactual());
                mov.setTipo(inq.getInq_nombre());
                mov.setIrpftipo(inq.getInq_irpf());
                mov.setTipopago(devuelvetipopago());
                int idmov = -1;
                idmov = mov.guardarmovimientoinqpaga(mov);

                con.escribirfichero("se ingresa movimiento, id prop.: " + mov.getProp_id() + " -- " + "id inq.: " + mov.getInq_casa() + " -- "
                        + "mqp: " + mov.getMqp() + " -- " + "aqp: " + mov.getAqp() + " -- " + "detalle: " + mov.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(mov.getEntrada()) + " -- "
                        + "salida: " + con.mostrarnumero(mov.getSalida()) + " -- " + "comision: " + con.mostrarnumero(mov.getComision()) + " -- " + "iva: " + con.mostrarnumero(mov.getIva()) + " -- " + "tipo: " + mov.getTipo() + " -- "
                        + "fecha: " + parsefechastring(mov.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(mov.getIrpf()) + " -- " + "irpf tipo: " + mov.getIrpftipo() + " -- tipo de pago: " + mov.getTipopago());

                guardarrecibo(idmov);
                abonarconvenioreintegro(mov, fecha);
                if (aplicoconvenioreintegro) {
                    actualizarconvenioreintegro(mov.getMqp(), mov.getAqp());
                    aplicoconvenioreintegro = false;
                }
                //ACTUALIZA EL SALDO ACTUAL DEL INQUILINO
                inq.actualizarsaldo(inq.getProp_id(), inq.getInq_casa(), (inq.getInq_saldo() - mov.getEntrada()));
                actualizarsaldoprop();
                actualizargrupoirpf(mov.getIrpf());
                mostrarrecibo();
                generarcomprobanteelectronico(idmov);
                listamovimientos();
                limpiarlistadeuda();
                eliminarlistadodeuda();
                //JOptionPane.showMessageDialog(null, "movimiento guardado correctamente");
                /*
                if (inq.getInq_tipoalq().equals("HABITACION")) {
                    listarimportescasahabitacion();
                }
                if (inq.getInq_tipoalq().equals("LOCAL")) {
                    listarimporteslocal();
                }
                 */
                //guardarmovimientoacuentaalquiler
            } else {
                esgastoinq = true;
                gas.setEstado(1);
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setMqp(gas.getMqp());
                mov.setAqp(gas.getAqp());
                mov.setDetalle(gas.getDetalle());
                mov.setEntrada((importeflo));
                mov.setSalida(0f);
                mov.setComision(devuelvecomision(importeflo));
                mov.setIva(devuelveiva(mov.getComision()));
                mov.setTipo(inq.getInq_nombre());
                mov.setIrpftipo(inq.getInq_irpf());
                if (mov.getDetalle().equals("ALQUILER") || mov.getDetalle().equals("A CUENTA ALQUILER") || mov.getDetalle().equals("SALDO ALQUILER") || mov.getDetalle().equals("ALQUILER DIAS") || mov.getDetalle().equals("ALQUILER MES")) {
                    String fechaa = dia + tblinquilinos.getValueAt(row, 3);
                    fecha = parsefechadate(fechaa);
                    mov.setIrpf(devuelveirpf(mov.getEntrada(), fecha));
                } else {
                    mov.setIrpf(0f); //no retiene irpf si es un gasto, solo retiene si es ALQUILER SALDO
                }
                String fechaa = dia + tblinquilinos.getValueAt(row, 3);
                fecha = parsefechadate(fechaa);
                mov.setFecha(fechaactual());
                int ax = JOptionPane.showConfirmDialog(null, toUpperCase("¿desea abonar el pago con fecha " + generarfechaconsultapago(fecha) + " e importe ($) " + con.mostrarnumero(gas.getImporte()) + " correspondiente a: " + gas.getDetalle() + "?"), "CONFIRMACION", JOptionPane.YES_NO_CANCEL_OPTION);
                if (ax == JOptionPane.YES_OPTION) {
                    //si paga un gasto, actualizar el gasto, estado = 1
                    //SI DETALLE = 'ALQUILER SALDO' -> DESCONTAR IRPF
                    /*
                    if (mov.getDetalle().equals("ALQUILER SALDO") || mov.getDetalle().equals("ALQUILER DIAS")) {
                        mov.setIrpf(devuelveirpf(((mov.getEntrada())), fecha));
                        actualizargrupoirpf(mov.getIrpf());
                    }*/

                    //mov.setIrpf(devuelveirpf(((mov.getEntrada())), fecha));
                    //TIPOPAGO
                    mov.setTipopago(devuelvetipopago());
                    int idmov = -1;
                    idmov = mov.guardarmovimientoinqpaga(mov);

                    con.escribirfichero("se ingresa movimiento, id prop.: " + mov.getProp_id() + " -- " + "id inq.: " + mov.getInq_casa() + " -- "
                            + "mqp: " + mov.getMqp() + " -- " + "aqp: " + mov.getAqp() + " -- " + "detalle: " + mov.getDetalle() + " -- " + "entrada: " + con.mostrarnumero(mov.getEntrada()) + " -- "
                            + "salida: " + con.mostrarnumero(mov.getSalida()) + " -- " + "comision: " + con.mostrarnumero(mov.getComision()) + " -- " + "iva: " + con.mostrarnumero(mov.getIva()) + " -- " + "tipo: " + mov.getTipo() + " -- "
                            + "fecha: " + parsefechastring(mov.getFecha()) + " -- " + "irpf: " + con.mostrarnumero(mov.getIrpf()) + " -- " + "irpf tipo: " + mov.getIrpftipo() + " -- tipo de pago: " + mov.getTipopago());

                    guardarrecibo(idmov);
                    abonarconvenioreintegro(mov, fecha);
                    if (aplicoconvenioreintegro) {
                        actualizarconvenioreintegro(mov.getMqp(), mov.getAqp());
                        aplicoconvenioreintegro = false;
                    }
                    gas.guardargastoinq(gas);

                    //ACTUALIZA EL SALDO ACTUAL DEL INQUILINO
                    inq.actualizarsaldo(inq.getProp_id(), inq.getInq_casa(), (inq.getInq_saldo() - mov.getEntrada()));
                    actualizarsaldoprop();
                    actualizargrupoirpf(mov.getIrpf());
                    mostrarrecibo();
                    generarcomprobanteelectronico(idmov);
                    listamovimientos();

                    //return true;
                } else {
                    quierecancelar = true;
                    return false;
                }
            }
        }
        return esgastoinq;
    }

    Float devuelveirpf(Float importereajustado, Date fecha) throws Exception {
        d_parametro par = new d_parametro();
        Float irpf = 0F;

        par = par.buscarparametroporfecha(fecha);

        if (par == null) {
            throw new Exception("inquilino retiene irpf\nerror al cargar datos de irpf, no existen datos para la fecha de pago solicitada: " + devuelvemes(fecha) + "/" + devuelveanio(fecha));
        }

        if (inq.getInq_irpf().equals("OTRO") || inq.getInq_irpf().equals("SI")) {
            irpf = importereajustado * par.getIrpf() / 100;
        }

        return irpf;
    }

    Integer devuelvemqp(String fecha) throws Exception {
        Integer mqp = 0;
        Date fechad;

        fechad = parsefechadate(fecha);

        mqp = devuelvemes(fechad);

        return mqp;
    }

    Integer devuelveaqp(String fecha) throws Exception {
        Integer aqp = 0;
        Date fechad;

        fechad = parsefechadate(fecha);

        aqp = devuelveanio(fechad);

        return aqp;
    }

    Float devuelvecomision(Float importereajustado) throws Exception {
        //d_parametro par = new d_parametro();
        Float comision = 0.0F;

        //par = par.buscarparametro();
        comision = importereajustado * inq.getInq_por() / 100;

        return comision;
    }

    Float devuelveiva(Float comision) throws Exception {
        d_parametro par = new d_parametro();
        Float iva = 0.0F;

        par = par.buscarparametro();

        iva = comision * par.getIva() / 100;

        return iva;
    }

    void controlarid() throws Exception {
        if (txtprop_id.getText().equals("") || txtinq_id.getText().equals("")) {
            //throw new Exception("debe ingresar un inquilino");
        }
    }

    void cleartable() {
        for (int i = 0; i < tblinquilinos.getRowCount(); i++) {
            mdltabinq.removeRow(i);
            i -= 1;
        }
    }

    void generarplazonuevo() throws Exception {
        int nuevoplazo = inq.getInq_plazo();
        nuevoplazo = nuevoplazo + con.plazoextendido;
        inq.setInq_plazo(nuevoplazo);
    }

    void listarimporteslocal() throws Exception {
        //p_control con = p_control.getInstancia();
        Vector v = null;
        int i = 1;
        d_movimiento cuotapaga = null;
        d_movimiento mov = new d_movimiento();
        Float entrega = 0f;
        fechasreajustes = new String[4];
        importereajustes = new Float[4];
        importereajuste = 0f;
        importetotal = 0f;
        Boolean sesumaimporte = false;
        Boolean debemostrarvalor = false;
        generarplazonuevo();

        //Integer prop_id = Integer.parseInt(txtprop_id.getText());
        //Integer inq_id = Integer.parseInt(txtinq_id.getText());
        //inq1 = inq1.buscarinquilino(prop_id, inq_id);
        //inq = inq1;
        //if (inq.getInq_plazo() != 0 && cmbplazo.getSelectedItem().equals("PLAZO VIGENTE")) {
        if (inq.getInq_plazo() != 0) {
            obtenerlistadogastospendientesinq();
            listamovimientos();
            sumar1mes();

            //reajustediv = par.getProcaumento();
            lbldeuda.setText("");

            fechaspagos = devuelvefechaspagosgeneral();

            fechasreajustes = devuelvemesesreajustelocal();

            importereajustes = devuelvelistadototalimporteslocal();

        } else {
            obtenerlistadogastospendientesinq();
            if (listagastos.isEmpty()) {
                return;
            }
        }
        //chequearultimosmesespagos();
        guardarmesactualcomogasto();

        mov.setProp_id(inq.getProp_id());
        mov.setInq_casa(inq.getInq_casa());
        mov.setDetalle("ALQUILER");
        cleartable();

        int mesactual = devuelvemes(new Date());
        int anioactual = devuelveanio(new Date());

        if (listagastos != null) {
            int ii = i;
            for (d_gastos_inq aux : listagastos) {
                if (aux.getEstado().equals(0)) {
                    String fechaxstr = "01/" + aux.getMqp() + "/" + aux.getAqp();

                    v = new Vector();
                    entrega = revisarentregassaldo(aux.getProp_id(), aux.getInq_casa(), aux.getMqp(), aux.getAqp());
                    if (entrega > 0.0f && (aux.getDetalle().equals("SALDO ALQUILER")
                            || aux.getDetalle().equals("ALQUILER DIAS")
                            || aux.getDetalle().equals("ALQUILER MES")
                            || aux.getDetalle().equals("A CUENTA ALQUILER")
                            || aux.getDetalle().equals("ALQUILER"))) {
                        //ver si el mes esta repetido
                        v.add(ii + " * $" + con.mostrarnumero(entrega));
                    } else {
                        entrega = revisarentregassaldo_no_alquiler(aux.getProp_id(), aux.getInq_casa(), aux.getMqp(), aux.getAqp(), aux.getDetalle());
                        if (entrega > 0.0f) {
                            v.add(ii + " * $" + con.mostrarnumero(entrega));
                        } else {
                            v.add(ii);
                        }
                    }

                    v.add(aux.getDetalle());
                    //v.add(formateador.format(aux.getImporte()));
                    v.add(con.mostrarnumero(aux.getImporte()));
                    String fechaxstr1 = aux.getMqp() + "/" + aux.getAqp();
                    v.add(fechaxstr1);
                    sesumaimporte = sesumaimporte(fechaxstr);
                    if (sesumaimporte) {
                        if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                            importetotal = importetotal + (aux.getImporte());
                        }
                        if (listadeuda != null) {
                            d_recibo rec = new d_recibo();
                            rec.setDetalle(aux.getDetalle());
                            rec.setFecha(parsefechadate(fechaxstr));
                            rec.setNombre_inq(inq.getInq_nombre());
                            rec.setImporte(aux.getImporte());
                            listadeuda.add(rec);
                        } else {
                            listadeuda = new ArrayList<>();
                            d_recibo rec = new d_recibo();
                            rec.setDetalle(aux.getDetalle());
                            rec.setFecha(parsefechadate(fechaxstr));
                            rec.setNombre_inq(inq.getInq_nombre());
                            rec.setImporte(aux.getImporte());
                            listadeuda.add(rec);
                        }
                    } else {
                        if (aux.getEstado() == 0) {
                            String fechaxstrX = "01/" + aux.getMqp() + "/" + aux.getAqp();
                            if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                                if (sesumaimporte) {
                                    importetotal = importetotal + (aux.getImporte());
                                }
                            }
                            if (listadeuda != null) {
                                if (sesumaimporte) {
                                    d_recibo rec = new d_recibo();
                                    rec.setDetalle(aux.getDetalle());
                                    rec.setFecha(parsefechadate(fechaxstrX));
                                    rec.setNombre_inq(inq.getInq_nombre());
                                    rec.setImporte(aux.getImporte());
                                    listadeuda.add(rec);
                                }
                            } else {
                                if (sesumaimporte) {
                                    listadeuda = new ArrayList<>();
                                    d_recibo rec = new d_recibo();
                                    rec.setDetalle(aux.getDetalle());
                                    rec.setFecha(parsefechadate(fechaxstrX));
                                    rec.setNombre_inq(inq.getInq_nombre());
                                    rec.setImporte(aux.getImporte());
                                    listadeuda.add(rec);
                                }
                            }
                        }
                    }
                    mdltabinq.addRow(v);
                    ii = ii + 1;
                } else {
                    if (aux.getEstado() == 0) {
                        String fechaxstrX = "01/" + aux.getMqp() + "/" + aux.getAqp();
                        importetotal = importetotal + (aux.getImporte());
                        sesumaimporte = sesumaimporte(fechaxstrX);
                        if (listadeuda != null) {
                            if (sesumaimporte) {
                                d_recibo rec = new d_recibo();
                                rec.setDetalle(aux.getDetalle());
                                rec.setFecha(parsefechadate(fechaxstrX));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(aux.getImporte());
                                listadeuda.add(rec);
                            }
                        } else {
                            if (sesumaimporte) {
                                listadeuda = new ArrayList<>();
                                d_recibo rec = new d_recibo();
                                rec.setDetalle(aux.getDetalle());
                                rec.setFecha(parsefechadate(fechaxstrX));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(aux.getImporte());
                                listadeuda.add(rec);
                            }
                        }
                    }
                }
            }
            i = ii;
        }
        //if (inq.getInq_plazo() != 0 && cmbplazo.getSelectedItem().equals("PLAZO VIGENTE")) {
        float importeactual = primerimportealquiler;
        float importeactuallistado = 0f;
        if (inq.getInq_plazo() != 0) {
            for (int x = 0; x < fechaspagos.length; x++) {
                mov = new d_movimiento();
                mov.setAqp(devuelveaqp(fechaspagos[x]));
                mov.setMqp(devuelvemqp(fechaspagos[x]));

                if (x == 0) {
                    importeactuallistado = importereajustes[x];
                    importeactual = importeactuallistado;
                    Boolean existesaldoalquiler = existesaldoalquiler(mov);
                    if (existesaldoalquiler) {
                        //ver a futuro si es necesario muestre otros meses que tienen saldo
                        continue;
                    }
                }
                cuotapaga = cuotapaga(mov);
                if (cuotapaga == null) {
                    d_gastos_inq gasaux = null;
                    gasaux = estemestienesaldo(mov.getMqp(), mov.getAqp());
                    if (gasaux != null) {
                        importeactual = gasaux.getImporte();
                        continue;
                    }
                    v = new Vector();
                    v.add(i);
                    v.add("ALQUILER");
                    importeactuallistado = importereajustes[x];
                    v.add(con.mostrarnumero(importeactuallistado));
                    importeactual = importeactuallistado;
                    Date f1 = parsefechadate(fechaspagos[x]);
                    Integer mes = devuelvemes(f1);
                    Integer anioo = devuelveanio(f1);
                    v.add(mes + "/" + anioo);
                    sesumaimporte = sesumaimporte(fechaspagos[x]);
                    if (sesumaimporte) {
                        //recorrer gastosinq y si tiene saldos no sumar importetotal                        
                        boolean sumaimporte = sumarimptotal(f1);
                        if (sumaimporte) {
                            importetotal = importetotal + importeactuallistado;

                            if (listadeuda != null) {
                                d_recibo rec = new d_recibo();
                                rec.setDetalle("ALQUILER");
                                rec.setFecha(parsefechadate(fechaspagos[x]));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(importeactuallistado);
                                listadeuda.add(rec);
                            } else {
                                listadeuda = new ArrayList<>();
                                d_recibo rec = new d_recibo();
                                rec.setDetalle("ALQUILER");
                                rec.setFecha(parsefechadate(fechaspagos[x]));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(importeactuallistado);
                                listadeuda.add(rec);
                            }
                        }
                    }
                    mdltabinq.addRow(v);
                } else {
                    mov = cuotapaga;
                    v = new Vector();
                    v.add(i);
                    v.add("ALQUILER ABONADO");
                    importeactuallistado = importereajustes[x];
                    v.add(con.mostrarnumero(importeactuallistado));
                    importeactual = importeactuallistado;
                    Date f1 = parsefechadate(fechaspagos[x]);
                    Integer mes = devuelvemes(f1);
                    Integer anioo = devuelveanio(f1);
                    v.add(mes + "/" + anioo);
                    sesumaimporte = sesumaimporte(fechaspagos[x]);
                    mdltabinq.addRow(v);
                }
                i = i + 1;
            }
        }

        Float mostrarnum = 0f;
        //guardarlistadodeuda(); //guarda un movimiento recibo con id 1, raro
        mostrarnum = (importetotal);
        lbldeuda.setText(con.mostrarnumero(mostrarnum));
    }

    d_gastos_inq estemestienesaldo(int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        gas = buscargasenlistagastos(gas);

        if (gas != null) {
            if (gas.getEstado().equals(0)) {
                return gas;
            }
        } else {
            //SI EMPIEZA ESTE MES EL CONTRATO Y TIENE UN ALQUILER DIAS, NO GENERAR SALDO ALQUILER
            if (estafechaempiezacontrato(parsefechadate("01/" + mqp + "/" + aqp), inq)) {
                gas = new d_gastos_inq();
                gas.setProp_id(inq.getProp_id());
                gas.setInq_casa(inq.getInq_casa());
                gas.setDetalle("ALQUILER DIAS");
                gas.setAqp(aqp);
                gas.setMqp(mqp);
                gas = buscargasenlistagastosalquilerdias(gas);
                if (gas != null) {
                    return gas;
                }
            }
        }
        return null;
    }

    Boolean estafechaempiezacontrato(Date fechaaconsultar, d_inquilino inq) throws Exception {
        Boolean estafechaempiezacontrato = false;

        int mesinicio = -1;
        int anioinicio = -1;
        int mesactual = -1;
        int anioactual = -1;

        Date fechaicnueva = inq.restar1mes(inq.getInq_fechaic());

        mesinicio = devuelvemes(fechaaconsultar);
        anioinicio = devuelveanio(fechaaconsultar);

        mesactual = devuelvemes(fechaicnueva);
        anioactual = devuelveanio(fechaicnueva);

        String fechaconsulta = "01/" + mesinicio + "/" + anioinicio;
        String fechainiciocontrato = "01/" + mesactual + "/" + anioactual;

        Date fechac = parsefechadate(fechaconsulta);
        Date fechaic = parsefechadate(fechainiciocontrato);

        int compara = fechac.compareTo(fechaic);
        if (compara == 0) {
            return true;
        }
        return estafechaempiezacontrato;
    }

    d_gastos_inq buscargasenlistagastosalquilerdias(d_gastos_inq gas) throws Exception {
        return gas.buscaralquilerdias(gas);
    }

    Date generarnuevafechareajustehabitacion(Date fecha) throws Exception {
        d_inquilino in = new d_inquilino();

        Date fechagenerada = (fecha);
        fechagenerada = in.sumar4meses(fechagenerada);

        return fechagenerada;
    }

    void listarimportescasahabitacion() throws Exception {
        //p_control con = p_control.getInstancia();
        Vector v = null;
        int i = 1;
        d_movimiento cuotapaga = null;
        d_movimiento mov = new d_movimiento();
        float entrega = 0f;

        fechasreajustes = new String[4];
        importereajustes = new Float[4];
        importereajuste = 0.0f;
        importetotal = 0.0f;
        Boolean sesumaimporte = false;

        generarplazonuevo();

        if (inq.getInq_plazo() != 0) {
            obtenerlistadogastospendientesinq();
            listamovimientos();
            sumar1mes();

            fechaspagos = devuelvefechaspagosgeneral();
            fechasreajustes = devuelvemesesreajustehabitacion();
            fechasreajustesparciales = devuelvemesesreajustehabitacionparciales();
            importereajustes = devuelvelistadototalimporteshab();
        } else {
            obtenerlistadogastospendientesinq();
            if (listagastos.isEmpty()) {
                return;
            }
        }
        //chequearultimosmesespagos();
        guardarmesactualcomogasto();

        lbldeuda.setText("");

        //pedir lista de fechas de reajustes generales a partir de la fecha de inicio de contrato del inq
        //recorrer lista de fechas de reajustes generales
        //pasar cada fecha aux.getFecha(); 
        mov.setProp_id(inq.getProp_id());
        mov.setInq_casa(inq.getInq_casa());
        mov.setDetalle("ALQUILER");
        cleartable();

        int mesactual = devuelvemes(new Date());
        int anioactual = devuelveanio(new Date());

        if (listagastos != null) {
            int ii = i;
            for (d_gastos_inq aux : listagastos) {
                if (aux.getEstado().equals(0)) {
                    String fechaxstr = "01/" + aux.getMqp() + "/" + aux.getAqp();
                    v = new Vector();
                    //detalle='A CUENTA ALQUILER' or detalle='A CUENTA: ALQUILER' or detalle='SALDO ALQUILER' or detalle='ALQUILER'

                    entrega = revisarentregassaldo(aux.getProp_id(), aux.getInq_casa(), aux.getMqp(), aux.getAqp());
                    if (entrega > 0.0f && (aux.getDetalle().equals("SALDO ALQUILER")
                            || aux.getDetalle().equals("ALQUILER DIAS")
                            || aux.getDetalle().equals("ALQUILER MES")
                            || aux.getDetalle().equals("A CUENTA ALQUILER")
                            || aux.getDetalle().equals("ALQUILER"))) {
                        //if (entrega == aux.getImporte()) {
                        //actualizar saldo alquiler pago
                        //continue;
                        //}
                        v.add(ii + " * $" + con.mostrarnumero(entrega));
                    } else {
                        entrega = revisarentregassaldo_no_alquiler(aux.getProp_id(), aux.getInq_casa(), aux.getMqp(), aux.getAqp(), aux.getDetalle());
                        if (entrega > 0.0f) {
                            v.add(ii + " * $" + con.mostrarnumero(entrega));
                        } else {
                            v.add(ii);
                        }
                    }

                    v.add(aux.getDetalle());
                    v.add(con.mostrarnumero(aux.getImporte()));
                    String fechaxstr1 = aux.getMqp() + "/" + aux.getAqp();
                    v.add(fechaxstr1);
                    sesumaimporte = sesumaimporte(fechaxstr);
                    if (sesumaimporte) {
                        if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                            importetotal = importetotal + (aux.getImporte());
                        }
                        if (listadeuda != null) {
                            if (sesumaimporte) {
                                d_recibo rec = new d_recibo();
                                rec.setDetalle(aux.getDetalle());
                                rec.setFecha(parsefechadate(fechaxstr));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(aux.getImporte());
                                listadeuda.add(rec);
                            }
                        } else {
                            if (sesumaimporte) {
                                listadeuda = new ArrayList<>();
                                d_recibo rec = new d_recibo();
                                rec.setDetalle(aux.getDetalle());
                                rec.setFecha(parsefechadate(fechaxstr));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(aux.getImporte());
                                listadeuda.add(rec);
                            }
                        }
                    } else {
                        if (aux.getEstado() == 0) {
                            String fechaxstrX = "01/" + aux.getMqp() + "/" + aux.getAqp();
                            if (aux.getMqp() != mesactual || aux.getAqp() != anioactual) {
                                if (sesumaimporte) {
                                    importetotal = importetotal + (aux.getImporte());
                                }
                            }
                            if (listadeuda != null) {
                                if (sesumaimporte) {
                                    d_recibo rec = new d_recibo();
                                    rec.setDetalle(aux.getDetalle());
                                    rec.setFecha(parsefechadate(fechaxstrX));
                                    rec.setNombre_inq(inq.getInq_nombre());
                                    rec.setImporte(aux.getImporte());
                                    listadeuda.add(rec);
                                }
                            } else {
                                if (sesumaimporte) {
                                    listadeuda = new ArrayList<>();
                                    d_recibo rec = new d_recibo();
                                    rec.setDetalle(aux.getDetalle());
                                    rec.setFecha(parsefechadate(fechaxstrX));
                                    rec.setNombre_inq(inq.getInq_nombre());
                                    rec.setImporte(aux.getImporte());
                                    listadeuda.add(rec);
                                }
                            }
                        }
                    }
                    mdltabinq.addRow(v);
                    ii = ii + 1;
                }
            }
            i = ii;
        }
        //if (inq.getInq_plazo() != 0 && cmbplazo.getSelectedItem().equals("PLAZO VIGENTE")) {
        float importeactual = primerimportealquiler;
        float importeactuallistado = 0f;
        if (inq.getInq_plazo() != 0) {
            for (int x = 0; x < fechaspagos.length; x++) {
                mov = new d_movimiento();
                mov.setAqp(devuelveaqp(fechaspagos[x]));
                mov.setMqp(devuelvemqp(fechaspagos[x]));

                if (x == 0) {
                    importeactuallistado = importereajustes[x];
                    importeactual = importeactuallistado;
                    //inq.setInq_impalq(primerimportealquiler);
                    Boolean existesaldoalquiler = existesaldoalquiler(mov);
                    if (existesaldoalquiler) {
                        //ver a futuro si es necesario muestre otros meses que tienen saldo
                        continue;
                    }
                }
                cuotapaga = cuotapaga(mov);
                if (cuotapaga == null) {
                    d_gastos_inq gasaux = null;
                    gasaux = estemestienesaldo(mov.getMqp(), mov.getAqp());
                    if (gasaux != null) {
                        importeactual = gasaux.getImporte();
                        continue;
                    }
                    v = new Vector();
                    v.add(i);
                    v.add("ALQUILER");
                    importeactuallistado = importereajustes[x];
                    v.add(con.mostrarnumero(importeactuallistado));
                    importeactual = importeactuallistado;
                    Date f1 = parsefechadate(fechaspagos[x]);
                    Integer mes = devuelvemes(f1);
                    Integer anioo = devuelveanio(f1);
                    v.add(mes + "/" + anioo);
                    sesumaimporte = sesumaimporte(fechaspagos[x]);
                    if (sesumaimporte) {
                        //recorrer gastosinq y si tiene saldos no sumar importetotal                        
                        boolean sumaimporte = sumarimptotal(f1);
                        if (sumaimporte) {
                            importetotal = importetotal + importeactuallistado;

                            if (listadeuda != null) {
                                d_recibo rec = new d_recibo();
                                rec.setDetalle("ALQUILER");
                                rec.setFecha(parsefechadate(fechaspagos[x]));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(importeactuallistado);
                                listadeuda.add(rec);
                            } else {
                                listadeuda = new ArrayList<>();
                                d_recibo rec = new d_recibo();
                                rec.setDetalle("ALQUILER");
                                rec.setFecha(parsefechadate(fechaspagos[x]));
                                rec.setNombre_inq(inq.getInq_nombre());
                                rec.setImporte(importeactuallistado);
                                listadeuda.add(rec);
                            }
                        }
                    }
                    mdltabinq.addRow(v);
                } else {
                    mov = cuotapaga;
                    v = new Vector();
                    v.add(i);
                    v.add("ALQUILER ABONADO");
                    importeactuallistado = importereajustes[x];
                    v.add(con.mostrarnumero(importeactuallistado));
                    importeactual = importeactuallistado;
                    Date f1 = parsefechadate(fechaspagos[x]);
                    Integer mes = devuelvemes(f1);
                    Integer anioo = devuelveanio(f1);
                    v.add(mes + "/" + anioo);
                    sesumaimporte = sesumaimporte(fechaspagos[x]);
                    mdltabinq.addRow(v);
                }
                i = i + 1;
            }
        }
        //inq=con.inq;
        Float mostrarnum = 0f;
        mostrarnum = (importetotal);
        //guardarlistadodeuda();
        lbldeuda.setText(con.mostrarnumero(mostrarnum));
    }

    Float revisarentregassaldo_no_alquiler(int prop_id, int inq_casa, int mqp, int aqp, String detalle) throws Exception {

        d_movimiento mov = new d_movimiento();
        float montoentregas = 0f;

        montoentregas = mov.totalentregassaldo_no_alquiler(prop_id, inq_casa, mqp, aqp, detalle);

        return montoentregas;
        //return 0f; PORQUE ESTABA COMENTADA LA FUNCION
    }

    Float revisarentregassaldo(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_movimiento mov = new d_movimiento();
        float montoentregas = 0f;

        montoentregas = mov.totalentregassaldo(prop_id, inq_casa, mqp, aqp);

        return montoentregas;
    }

    Boolean existesaldoalquiler(d_movimiento mov) {
        if (listagastos == null) {
            return false;
        }
        for (d_gastos_inq aux : listagastos) {
            if (mov.getMqp().equals(aux.getMqp())) {
                if (mov.getAqp().equals(aux.getAqp())) {
                    if (aux.getDetalle().equals("SALDO ALQUILER")) {
                        if (aux.getEstado().equals(0)) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    void guardarmesactualcomogasto() throws Exception {
        d_movimiento aux = new d_movimiento();
        float importe = 0f;
        int mqplistado = -1;
        int aqplistado = -1;

        aux = new d_movimiento();
        aux.setMqp(devuelvemes(new Date()));
        aux.setAqp(devuelveanio(new Date()));
        mqplistado = aux.getMqp();
        aqplistado = aux.getAqp();

        String fecha = "01/" + mqplistado + "/" + aqplistado;
        Date fechad = parsefechadate(fecha);
        if (estafechaesantesdeempezarcontrato(fechad)) {
            return;
        }

        aux = cuotapaga(aux);
        if (aux != null) {
            return;
        }
        d_gastos_inq gas = estemestienesaldo(mqplistado, aqplistado);
        if (gas != null) {
            return;
        }
        //String fecha = "01/" + mqplistado + "/" + aqplistado;

        importe = primerimportealquiler;
        if (importe == 0) {
            return;
        }

        //importe = agregarimportereajuste(primerimportealquiler, fecha); //ESTABA COMENTADO 10-07
        guardaralquilermesactual(importe, mqplistado, aqplistado);
        obtenerlistadogastospendientesinq();
    }

    int devuelveposicionfechaspagos(String fechaparametro) throws Exception {
        for (int i = 0; i < fechaspagos.length; i++) {
            String fechalistado = fechaspagos[i];
            if (fechalistado.equals(fechaparametro)) {
                return i;
            }
        }
        return -1;
    }

    Boolean sumarimptotal(Date fecha) {
        int mes = devuelvemes(fecha);
        int anio = devuelveanio(fecha);
        Boolean suma = true;

        for (d_gastos_inq aux : listagastos) {
            int mes1 = aux.getMqp();
            int anio1 = aux.getAqp();
            if (aux.getEstado() == 0) {
                if (mes == mes1 && anio == anio1) {
                    suma = false;
                    break;
                }
            }
        }
        return suma;
    }

    void guardarlistadodeuda() throws Exception {
        d_recibo rec = new d_recibo();
        if (listadeuda == null) {
            return;
        }
        rec.guardarlistadodeuda(listadeuda, "alquiler");
    }

    void eliminarlistadodeuda() throws Exception {
        d_recibo rec = new d_recibo();

        rec.eliminarrecibo("alquiler");
    }

    List<d_movimiento> listamovimientos() throws Exception {
        d_movimiento mov = new d_movimiento();
        listamovimientos = mov.listarmovimientosdeinq(inq.getProp_id(), inq.getInq_casa());
        return listamovimientos;
    }

    d_movimiento buscarmovenlistasoloalquiler(d_movimiento mov) {
        if (listamovimientos != null) {
            for (d_movimiento aux : listamovimientos) {
                if (aux.getAqp().equals(mov.getAqp())
                        && aux.getMqp().equals(mov.getMqp())
                        && (aux.getDetalle().equals("ALQUILER") || aux.getDetalle().equals("ALQUILER MES"))) {
                    return aux;
                }
            }
        }
        mov = null;
        return mov;
    }

    d_movimiento buscaralquilerpagadoconsaldo(d_movimiento mov) {
        if (listamovimientos != null) {
            for (d_movimiento aux : listamovimientos) {
                if (aux.getAqp().equals(mov.getAqp()) && aux.getMqp().equals(mov.getMqp()) && aux.getDetalle().equals("SALDO ALQUILER")) {
                    //float a = (aux.getEntrada());
                    //aux.setEntrada(a);
                    //revisarentregassaldo() devuelve total de entregas de ese mes y anio
                    return aux;
                }
            }
        }
        mov = null;
        return mov;
    }

    Float importealquilerpagadoacuenta(d_movimiento mov) {
        float a = 0f;
        if (listamovimientos != null) {
            for (d_movimiento aux : listamovimientos) {
                if (aux.getAqp().equals(mov.getAqp())
                        && aux.getMqp().equals(mov.getMqp())
                        && aux.getDetalle().equals("A CUENTA ALQUILER")) {
                    a = a + (aux.getEntrada());
                    //aux.setEntrada(a);
                }
            }
        }
        return a;
    }

    d_movimiento buscarcuotaacuenta(d_movimiento mov) {
        d_movimiento aux1 = null;
        Float importe = 0f;

        for (d_movimiento aux : listamovimientos) {
            if (aux.getAqp().equals(mov.getAqp())
                    && aux.getMqp().equals(mov.getMqp())
                    && aux.getDetalle().equals("A CUENTA ALQUILER")) {
                //sumarimporte
                aux1 = aux;
                importe = aux1.getEntrada();
            }
        }
        if (aux1 != null) {
            aux1.setEntrada(importe);
            return aux1;
        }
        mov = null;
        return mov;
    }

    d_gastos_inq buscargasenlistagastos(d_gastos_inq gas) throws Exception {
        //d_gastos_inq aux1 = null;

        /*for (d_gastos_inq aux : listagastos) {
            if (aux.getAqp().equals(gas.getAqp()) && aux.getMqp().equals(gas.getMqp())
                    && (aux.getDetalle().equals(gas.getDetalle()) || aux.getDetalle().equals("ALQUILER"))) {
                return aux;
            }
        }*/
        return gas.buscaralquilermes(gas);

        //return null;
    }

    String generarfechaconsultapago(Date fecha) throws Exception {
        String fechalistadosrt;

        int mesfechalistado = devuelvemes(fecha);
        int aniofechalistado = devuelveanio(fecha);

        fechalistadosrt = mesfechalistado + "/" + aniofechalistado;

        return fechalistadosrt;
    }

    void obtenerlistadogastospendientesinq() throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        listagastos = gas.listargastosporinq(inq.getProp_id(), inq.getInq_casa());
    }

    List<d_gastos_inq> existegastoapagar(String fecha) throws Exception {
        List<d_gastos_inq> lista = new ArrayList<d_gastos_inq>();
        d_gastos_inq gas = null;
        Date fechalistado = null;
        Date fechagasto = null;
        int compara = 0;

        if (listagastos == null) {
            return null;
        }

        fechalistado = parsefechadate(fecha);

        int mesfechalistado = devuelvemes(fechalistado);
        int aniofechalistado = devuelveanio(fechalistado);

        String fechalistadosrt = "01/" + mesfechalistado + "/" + aniofechalistado;
        fechalistado = parsefechadate(fechalistadosrt);

        for (d_gastos_inq aux : listagastos) {
            String fechaxstr = "01/" + aux.getMqp() + "/" + aux.getAqp();
            fechagasto = parsefechadate(fechaxstr);
            compara = fechagasto.compareTo(fechalistado);
            if (compara == 0) {
                //lista = new ArrayList<d_gastos_inq>();
                gas = new d_gastos_inq();
                gas.setProp_id(aux.getProp_id());
                gas.setInq_casa(aux.getInq_casa());
                gas.setImporte(aux.getImporte());
                gas.setDetalle(aux.getDetalle());
                gas.setAqp(aux.getAqp());
                gas.setMqp(aux.getMqp());
                gas.setEstado(aux.getEstado());
                lista.add(gas);

                //
            }

        }

        if (lista.size() <= 0) {
            lista = null;
        }

        return lista;
    }

    Boolean sesumaimporte(String fecha) throws Exception {
        Boolean sesumaimporte = false;
        Date fechalistado = null;
        Date fechaactual = null;

        //BUSCAR SI EN ESA FECHA NO TIENE UNA ENTREGA PAGA, NO SUMAR EL TOTAL DEL MES A LA DEUDA TOTAL
        fechalistado = parsefechadate(fecha);
        fechaactual = fechaactual();

        int mesfechalistado = devuelvemes(fechalistado);
        int aniofechalistado = devuelveanio(fechalistado);

        int mesfechaactual = devuelvemes(fechaactual);
        int aniofechaactual = devuelveanio(fechaactual);

        String fechalistadosrt = "01/" + mesfechalistado + "/" + aniofechalistado;
        String aniofechaactualsrt = "01/" + mesfechaactual + "/" + aniofechaactual;

        fechalistado = parsefechadate(fechalistadosrt);
        fechaactual = parsefechadate(aniofechaactualsrt);

        int compara = fechalistado.compareTo(fechaactual);

        if (compara == -1) {
            sesumaimporte = true;
        }

        return sesumaimporte;
    }

    Float agregarimportereajuste(Float importeactual, String fecha) throws Exception {
        Float importe = 0f;
        Float importeconvenioreintegro = 0f;
        Date fechaparametro = null;
        Boolean reajusta = false;
        int i = 0;

        fechaparametro = parsefechadate(fecha);
        importe = importeactual;

        //PRIMERO SABER SI ESA FECHA REAJUSTA
        for (i = 0; i < fechasreajustes.length; i++) {
            if (fechasreajustes[i] != null) {
                Date fechareajustelistado = parsefechadate(fechasreajustes[i]);
                int compara = fechaparametro.compareTo(fechareajustelistado);
                if (compara == 0) {
                    importe = importereajustes[i];
                    reajusta = true;
                }
                if (compara == 1) {
                    break;
                }
            }
        }

        if (reajusta == false) {
            if (i > 0) {

                importe = importereajustes[i - 1];
            }
        }

        /*
        for (i = 0; i < fechasreajustes.length; i++) {
            if (fechasreajustes[i] != null) {
                Date fechareajustelistado = parsefechadate(fechasreajustes[i]);
                int compara = fechaparametro.compareTo(fechareajustelistado);
                if (compara == 0) {
                    importe = importereajustes[i];
                    break;
                }
                if (compara == 1) {
                    if (i > 0) {
                        importe = importereajustes[i];
                        break;
                    }
                }
            }
        }
         */
        //CONVENIO - REINTEGRO
        /*
        d_gastos_inq gas = new d_gastos_inq();
        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(devuelvemes(fecha1));
        gas.setAqp(devuelveanio(fecha1));
        gas = devuelveconveniosreintegros(gas);
        if (gas != null) {
            importeconvenioreintegro = gas.getImporte();
            if (gas.getDetalle().equals("REINTEGRO")) {
                if (importeconvenioreintegro > importe) {
                    throw new Exception("debe eliminar el " + gas.getDetalle() + " de fecha " + gas.getMqp() + "/" + gas.getAqp() + " ya que es mayor al importe de alquiler");
                }
                importeconvenioreintegro = importeconvenioreintegro * -1;
                importe = importe + importeconvenioreintegro;
            }
            if (gas.getDetalle().equals("CONVENIO")) {
                importe = importe + importeconvenioreintegro;
            }
        }
         */
        return importe;
    }

    String[] devuelvemesesreajustelocal() throws Exception {
        fechasreajustes = new String[fechaspagos.length / inq.getInq_plazo()];
        Date fechareajusteinquilino = null;

        fechareajusteinquilino = (inq.getArlmrl());

        int mesreajusteinq = devuelvemes(fechareajusteinquilino);

        int anioreajusteinq = devuelveanio(fechareajusteinquilino);

        for (int i = 0; i < fechasreajustes.length; i++) {
            fechasreajustes[i] = "01/" + mesreajusteinq + "/" + anioreajusteinq;
            anioreajusteinq = anioreajusteinq + 1;
        }

        return fechasreajustes;
    }

    String[] devuelvemesesreajustehabitacion() throws Exception {
        fechasreajustes = new String[4 * inq.getInq_plazo()];
        Date fechareajusteinquilino = null;

        fechareajusteinquilino = (inq.getArlmrl());

        int mesreajusteinq = devuelvemes(fechareajusteinquilino);

        int anioreajusteinq = devuelveanio(fechareajusteinquilino);

        for (int i = 0; i < fechasreajustes.length; i++) {
            fechasreajustes[i] = "01/" + mesreajusteinq + "/" + anioreajusteinq;
            Date fecha = parsefechadate(fechasreajustes[i]);
            fechareajusteinquilino = generarnuevafechareajustehabitacion(fecha);
            mesreajusteinq = devuelvemes(fechareajusteinquilino);
            anioreajusteinq = devuelveanio(fechareajusteinquilino);
        }
        return fechasreajustes;
    }

    String[] devuelvemesesreajustehabitacionparciales() throws Exception {
        //revisar cuando el reajuste del año anterior choca con la fecha inicio contrato

        if (!reajustaesteanio()) {
            return null;
        }
        Date fecha = null;
        sumarimportereajusteanterior = 0f;
        int y = 0;
        String fechas;

        Date fechaanteriorreajusteinquilino;
        fechaanteriorreajusteinquilino = restarmesesaunafecha(inq.getArlmrl(), -12);
        //al restar los 12 meses, cuidar que esa fecha no sea menor a la fecha original de reajuste
        int compara = fechaanteriorreajusteinquilino.compareTo(fechaoriginalreajuste());
        if (compara == -1) {
            fechaanteriorreajusteinquilino = inq.getArlmrl();
        }

        Date fechaactualreajusteinquilino;
        fechaactualreajusteinquilino = inq.getArlmrl();

        d_parametro par = new d_parametro();
        par = par.buscarparametroporfecha(fechaanteriorreajusteinquilino);
        if (par == null) {
            throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechaanteriorreajusteinquilino) + "/" + devuelveanio(fechaanteriorreajusteinquilino));
        }
        sumarimportereajusteanterior = (primerimportealquiler * par.getProcaumento()) / 100;
        sumarimportereajusteanterior = sumarimportereajusteanterior / 3;

        int mesreajusteinq = devuelvemes(fechaanteriorreajusteinquilino);

        int anioreajusteinq = devuelveanio(fechaanteriorreajusteinquilino);

        fechas = "01/" + mesreajusteinq + "/" + anioreajusteinq;
        //fechasreajustesparciales[i] = "01/" + mesreajusteinq + "/" + anioreajusteinq;
        fecha = parsefechadate(fechas);

        while (!sonfechasigualesolaprimeraesmayor(fecha, fechaactualreajusteinquilino)) {
            fecha = generarnuevafechareajustehabitacion(fecha);
            //mesreajusteinq = devuelvemes(fecha);
            //anioreajusteinq = devuelveanio(fecha);
            y = y + 1;
        }

        fechasreajustesparciales = new String[y];

        for (int i = 0; i < fechasreajustesparciales.length; i++) {
            fechas = "01/" + mesreajusteinq + "/" + anioreajusteinq;
            //fechasreajustesparciales[i] = "01/" + mesreajusteinq + "/" + anioreajusteinq;
            fecha = parsefechadate(fechas);
            //y = fecha.compareTo(fechaactualreajusteinquilino);
            //if (y == 0 || y == 1) {
            //break;
            //}
            fechasreajustesparciales[i] = fechas;
            fechaanteriorreajusteinquilino = generarnuevafechareajustehabitacion(fecha);
            mesreajusteinq = devuelvemes(fechaanteriorreajusteinquilino);
            anioreajusteinq = devuelveanio(fechaanteriorreajusteinquilino);
        }

        return fechasreajustesparciales;
    }

    Date fechaoriginalreajuste() throws Exception {
        return inq.buscarfechareajusteoriginal(inq.getProp_id(), inq.getInq_casa());
    }

    Boolean isEmpty(String string) {
        return (string != null && string.isEmpty());
    }

    Date sumarunmes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 1);
        return calendario.getTime();
    }

    Boolean sonfechasiguales(Date fechar1, Date fecha2) throws Exception {
        int compara = fechar1.compareTo(fecha2);
        if (compara == 0) {
            return true;
        }
        return false;
    }

    Boolean sonfechasigualesolaprimeraesmayor(Date fechar1, Date fecha2) throws Exception {
        int compara = fechar1.compareTo(fecha2);
        if (compara == 0 || compara == 1) {
            return true;
        }
        return false;
    }

    String[] devuelvefechaspagosgeneral() throws Exception {
        Date primerimporte = null;

        int mesesimportes = inq.getInq_plazo() * 12;
        fechaspagos = new String[mesesimportes];

        primerimporte = inq.getInq_fechaic();
        int mesimporte = devuelvemes(primerimporte);
        int anioimporte = devuelveanio(primerimporte);

        for (int i = 0; i < mesesimportes; i++) {
            if (mesimporte > 12) {
                mesimporte = mesimporte - 12;
                anioimporte = anioimporte + 1;
                fechaspagos[i] = "01/" + mesimporte + "/" + anioimporte;
                mesimporte = mesimporte + 1;
            } else {
                fechaspagos[i] = "01/" + mesimporte + "/" + anioimporte;
                mesimporte = mesimporte + 1;
            }
        }
        return fechaspagos;
    }

    d_movimiento cuotapaga(d_movimiento mov) throws Exception {
        d_movimiento mov1 = new d_movimiento();
        d_gastos_inq gas = new d_gastos_inq();

        //mov1 = mov1.buscarcuotapaga(mov);
        mov1 = buscarmovenlistasoloalquiler(mov);
        //buscar en la lista de mov generada
        if (mov1 == null) {
            gas = new d_gastos_inq();
            gas.setProp_id(inq.getProp_id());
            gas.setInq_casa(inq.getInq_casa());
            gas.setDetalle("SALDO ALQUILER");
            gas.setAqp(mov.getAqp());
            gas.setMqp(mov.getMqp());
            gas = buscargasenlistagastos(gas);

            //buscar en la lista de gastos 
            if (gas != null) {
                if (gas.getEstado().equals(1)) {
                    //buscaralquilerpagadoconsaldo
                    //mov1 = new d_movimiento();
                    mov1 = buscaralquilerpagadoconsaldo(mov);
                    //mov1.setEntrada(gas.getImporte() + importealquilerpagadoacuenta(mov));
                    return mov1;
                    //esta pago el mes, ver la forma que devuelva el movimiento correspondiente
                    //esta devolviendo vacio, porque lo pago a traves de un saldo y no como alquiler comun
                } else {
                    return null;
                }
            }
        }
        return mov1;
    }

    Integer controlarpagocuota(d_movimiento mov) throws Exception {
        d_movimiento mov1 = new d_movimiento();
        Integer idultimacuotapaga = -1;
        Integer i = -1;

        idultimacuotapaga = ultimacuotapaga(mov);
        if (idultimacuotapaga == 0 || idultimacuotapaga == -1) {
            //CHEQUEAR QUE LA FECHA QUE DESEA ABONAR SEA IGUAL A LA DEL INICIO DEL CONTRATO.
            //comparar fechas
            i = chequeafechasiguales(devuelvemes(inq.getInq_fechaic()), devuelveanio(inq.getInq_fechaic()), mov.getMqp(), mov.getAqp(), mov);
        } else {
            mov1 = mov1.buscarmovimiento(idultimacuotapaga);

            //comparar fechas
            Integer mes = mov1.getMqp();

            i = chequeafechasiguales(mes, mov1.getAqp(), mov.getMqp(), mov.getAqp(), mov);
        }
        return i;
    }

    Integer chequeafechasiguales(Integer mes1, Integer anio1, Integer mes2, Integer anio2, d_movimiento mov) throws Exception {
        d_movimiento mov1 = new d_movimiento();
        String f1 = "";
        String f2 = "";
        Date fecha1;
        Date fecha2;
        f1 = "01/" + mes1 + "/" + anio1;
        f2 = "01/" + mes2 + "/" + anio2;
        fecha1 = parsefechadate(f1);
        fecha2 = parsefechadate(f2);

        int i = fecha1.compareTo(fecha2);

        if (i == -1) {
            d_inquilino d = new d_inquilino();
            fecha2 = d.restar1mes(fecha2);
            i = fecha1.compareTo(fecha2);
            if (i == 0) {
                return i;
            }
        }

        return i;
    }

    Integer ultimacuotapaga(d_movimiento mov) throws Exception {
        Integer idmov = -1;
        d_movimiento mov1 = new d_movimiento();
        //d_inquilino inq1=new d_inquilino();

        idmov = mov1.buscarultimacuotapagaalq(mov);

        return idmov;
    }

    Float[] devuelvelistadototalimporteslocal() throws Exception {
        importereajustes = new Float[fechaspagos.length];
        Date fechareajuste = null;
        float axreajustediv = 0f;
        int i = 0;
        Float importe = 0.0F;
        d_parametro par = new d_parametro();

        importe = primerimportealquiler;
        fechareajuste = inq.getArlmrl();

        par = par.buscarparametroporfecha(fechareajuste);
        if (par == null) {
            throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechareajuste) + "/" + devuelveanio(fechareajuste));
        }

        axreajustediv = par.getProcaumento();

        Date fechareajustealanio = sumaraniosunafecha(fechareajuste, 1);

        for (String fechapagolista : fechaspagos) {
            if (estafechareajusta(fechapagolista)) {
                Date fechapagodate = parsefechadate(fechapagolista);
                int compara = fechapagodate.compareTo(fechareajustealanio);
                if (compara == 0) {
                    par = par.buscarparametroporfecha(fechapagodate);
                    if (par == null) {
                        throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechapagodate) + "/" + devuelveanio(fechapagodate));
                    }
                    axreajustediv = par.getProcaumento();
                    fechareajustealanio = sumaraniosunafecha(fechareajustealanio, 1);
                }
                importe = importe + (importe * axreajustediv / 100);
                if (i == 0) {
                    importe = primerimportealquiler;
                }
                importereajustes[i] = importe;
                i = i + 1;
            } else {
                importereajustes[i] = importe;
                i = i + 1;
            }
        }
        return importereajustes;
    }

    Float[] devuelvelistadototalimporteshab() throws Exception {
        importereajustes = new Float[fechaspagos.length];
        Date fechareajusteactual = null;
        float sumarimportereajuste = 0f;
        int i = 0;
        Float importe = 0.0F;
        d_parametro par = new d_parametro();

        importe = primerimportealquiler;
        fechareajusteactual = inq.getArlmrl();

        par = par.buscarparametroporfecha(fechareajusteactual);
        if (par == null) {
            throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteactual) + "/" + devuelveanio(fechareajusteactual));
        }
        sumarimportereajuste = (importe * par.getProcaumento()) / 100;
        sumarimportereajuste = sumarimportereajuste / 3;

        Date fechareajustealanio = sumaraniosunafecha(fechareajusteactual, 1);

        for (String fechapagolista : fechaspagos) {
            Date fechapagodate = parsefechadate(fechapagolista);
            if (estafechareajusta(fechapagolista)) {
                int compara = fechapagodate.compareTo(fechareajustealanio);
                if (compara == 0) {
                    par = par.buscarparametroporfecha(fechapagodate);
                    if (par == null) {
                        throw new Exception("Error de sistema, no existen datos de reajuste para fecha: " + devuelvemes(fechapagodate) + "/" + devuelveanio(fechapagodate));
                    }
                    //axreajustediv = importe + (importe * axreajustediv / 100);
                    sumarimportereajuste = importe * par.getProcaumento() / 100;
                    sumarimportereajuste = sumarimportereajuste / 3;
                    //axreajustediv = axreajustediv * 100;
                    fechareajustealanio = sumaraniosunafecha(fechareajustealanio, 1);
                }
                importe = importe + (sumarimportereajuste);
                if (i == 0) {
                    importe = primerimportealquiler;
                }
                importereajustes[i] = importe;
                i = i + 1;
            } else {
                if (estafechareajustaparcial(fechapagolista)) {
                    if (i > 0) {
                        importe = importe + sumarimportereajusteanterior;
                    }
                    importereajustes[i] = importe;
                    i = i + 1;
                } else {
                    importereajustes[i] = importe;
                    i = i + 1;
                }
            }
        }
        return importereajustes;
    }

    Float devuelveimporteconvenioreintegro(Date fecha) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(inq.getProp_id());
        gas.setInq_casa(inq.getInq_casa());
        gas.setMqp(devuelvemes(fecha));
        gas.setAqp(devuelveanio(fecha));
        gas = devuelveconveniosreintegros(gas);

        if (gas == null) {
            return 0f;
        }

        return gas.getImporte();
    }

    Boolean estafechareajusta(String fechaparametro) throws Exception {
        for (String fechareajustelista : fechasreajustes) {
            if (fechaparametro.equals(fechareajustelista)) {
                return true;
            }
        }
        return false;
    }

    Boolean estafechareajustaparcial(String fechaparametro) throws Exception {
        if (fechasreajustesparciales == null) {
            return false;
        }
        for (String fechareajustelista : fechasreajustesparciales) {
            if (fechaparametro.equals(fechareajustelista)) {
                return true;
            }
        }
        return false;
    }

    Integer devuelvedia(Date fecha) {
        String formato = "dd";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelvemes(Date fecha) {
        String formato = "MM";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Integer devuelveanio(Date fecha) {
        String formato = "yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(formato);
        return Integer.parseInt(dateFormat.format(fecha));
    }

    Date parsefechadate(String fecha) throws Exception {
        SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
        Date fechaDate = null;

        try {
            fechaDate = formato.parse(fecha);
        } catch (ParseException ex) {
            throw new Exception("revise formato de año");
        }
        return fechaDate;
    }

    Date fechaactual() throws Exception {
        Date fechadate = null;
        SimpleDateFormat formateador = new SimpleDateFormat("dd/MM/yyyy", new Locale("es_ES"));
        String fechastr = (formateador.format(new Date()));

        return fechadate = parsefechadate(fechastr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(p_inqpaga.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(p_inqpaga.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(p_inqpaga.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(p_inqpaga.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                p_inqpaga dialog = new p_inqpaga(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });

    }

    void actualizarimportealquilerhabitacion(d_inquilino inq) throws Exception {
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        int anioactual;
        int anioic;
        float axreajustediv = 0f;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Date fechareajustecomun = inq.getArlmrl();
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);
        Boolean esCN = false;

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            fechareajustecomun = fechareajusteanual;
        } else {
            //ingresarimporteamano(inq);
        }

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            //mostrar label, si no hay datos, borrar label
            total = alq.getImporte();
            if (alq.getDetalle().equals("CN")) {
                esCN = true;
                mov = null;
            }
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        if (alq != null && esCN && mov == null) {
            fecharecorridadate = alq.getFecha();
            fechareajustecomun = sumar4meses(fecharecorridadate);//CHEQUEAR QUE ESTA FECHA NO SEA ANTES DE FECHA INICIO DE CONTRATO
            fechareajusteanual = sumaraniosunafecha(fecharecorridadate, 1); //(15-06)NO SE LE SUMA 1 MES, PORQUE GUARDA MES DE REAJUSTE DIRECTO - DEBERIA SUMAR 1 AÑO
            par = par.buscarparametroporfecha(fecharecorridadate);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fecharecorridadate) + "/" + devuelveanio(fecharecorridadate));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
        }
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = total * par.getProcaumento() / 100;
                axreajustediv = axreajustediv / 3;
                total += (axreajustediv);
                fechareajustecomun = sumar4meses(fechareajustecomun);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
                if (!estafechaestadentrodelperiodonoreajustable(fecharecorridadate, inq.getInq_fechaic())) {
                    total += (axreajustediv);
                }
                fechareajustecomun = sumar4meses(fechareajustecomun);
            }
            if (esCN) {
                if (alq != null) {
                    if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                        total = alq.getImporte();
                    }
                }
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }

        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = total * par.getProcaumento() / 100;
            axreajustediv = axreajustediv / 3;
            total += (axreajustediv);
        } else if (sonfechasiguales(fecharecorridadate, fechareajustecomun)) {
            total += (axreajustediv);
        }
        if (esCN) {
            if (alq != null) {
                if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                    total = alq.getImporte();
                }
            }
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    Boolean estafechaestadentrodelperiodonoreajustable(Date fecha_recibida, Date fecha_inicio_contrato) {
        //PERIODO = 1 AÑO
        Date fecha_fin_periodo = sumaraniosunafecha(fecha_inicio_contrato, 1);

        int compara_fecha_inicio = fecha_recibida.compareTo(fecha_inicio_contrato);
        int compara_fecha_fin = fecha_recibida.compareTo(fecha_fin_periodo);

        if (compara_fecha_inicio >= 0 && compara_fecha_fin <= 0) {
            //FECHA RECIBIDA ESTA DENTRO DEL PERIODO NO REAJUSTABLE
            return true;
        }

        return false;
    }

    void actualizarimportealquilerlocal(d_inquilino inq) throws Exception {
        int anioactual;
        int anioic;
        d_parametro par = new d_parametro();
        d_alquileres_info alq = new d_alquileres_info();
        float axreajustediv;
        float total = inq.getInq_impalq_aux();
        d_movimiento mov = null;
        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));
        Date fechareajusteanual = inq.getArlmrl();
        Boolean importeingresado = false;
        Boolean esCN = false;
        //if (inq.getProp_id() == 221 && inq.getInq_casa() == 17) {
        //float a = 5f;
        //}
        String fecharecorrida = "01/01/" + devuelveanio(new Date());
        Date fecharecorridadate = parsefechadate(fecharecorrida);

        anioactual = devuelveanio(new Date());
        anioic = devuelveanio(inq.getInq_fechaic());

        if (anioactual == anioic) {
            //return;
        }

        mov = buscarultimoimporteantesdelreajuste(inq);

        if (mov != null) {
            total = mov.getEntrada();
            fecharecorrida = "01/" + mov.getMqp() + "/" + mov.getAqp();
            fecharecorridadate = parsefechadate(fecharecorrida);
            fechareajusteanual = sumar1mes(fecharecorridadate);
            //NUEVA FECHA REAJUSTE
            inq.setArlmrl(fechareajusteanual);
            //inq.setArlmrl(chequearreajusteanteriorafechaactualsololocales(inq.getArlmrl()));
            //fechareajusteanual = inq.getArlmrl();
        } //else {
        //ingresarimporteamano(inq);
        //}

        alq = alq.buscar_alquiler_info(inq.getProp_id(), inq.getInq_casa());
        if (alq != null) {
            importeingresado = true;
            total = alq.getImporte();
            if (alq.getDetalle().equals("CN")) {
                esCN = true;
                mov = null;
            }
        }

        if (mov == null && !importeingresado) {
            //ingresarimporteamano(inq);
        }

        String fechaactual = "01/" + devuelvemes(new Date()) + "/" + devuelveanio(new Date());
        Date fechaactualdate = parsefechadate(fechaactual);
        //VA HASTA UN MES ANTES DEL MES ACTUAL, YA QUE PARA CONTROLAR MES ACTUAL, ESTA LA FUNCION MENSUAL

        //A VECES LLEGA fecharecorridadate >(MAYOR) fechaactualdate  
        if (alq != null && esCN && mov == null) {
            fecharecorridadate = alq.getFecha();
            fechareajusteanual = fecharecorridadate; //NO SE LE SUMA 1 MES, PORQUE GUARDA MES DE REAJUSTE DIRECTO
        }

        //CONTROLAR QUE fecharecorridadate NO SEA PREVIA A FECHA IC 
        while (!sonfechasiguales(fecharecorridadate, fechaactualdate)) {
            if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
                par = par.buscarparametroporfecha(fechareajusteanual);
                if (par == null) {
                    throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
                }
                axreajustediv = par.getProcaumento();
                total += (total * axreajustediv / 100);
                fechareajusteanual = sumaraniosunafecha(fechareajusteanual, 1);
            }
            if (esCN) {
                if (alq != null) {
                    if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                        total = alq.getImporte();
                    }
                }
            }
            corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
            fecharecorridadate = sumar1mes(fecharecorridadate);
        }
        if (sonfechasiguales(fecharecorridadate, fechareajusteanual)) {
            par = par.buscarparametroporfecha(fechareajusteanual);
            if (par == null) {
                throw new Exception("Error de sistema, inquilino: " + inq.getProp_id() + " - " + inq.getInq_casa() + " \n no existen datos de reajuste para fecha: " + devuelvemes(fechareajusteanual) + "/" + devuelveanio(fechareajusteanual));
            }
            axreajustediv = par.getProcaumento();
            total += (total * axreajustediv / 100);
        }
        if (esCN) {
            if (alq != null) {
                if (sonfechasiguales(alq.getFecha(), fecharecorridadate)) {
                    total = alq.getImporte();
                }
            }
        }
        inq.actualizarimporteaux(inq.getProp_id(), inq.getInq_casa(), total);
        corregirsaldoalquiler(total, inq.getProp_id(), inq.getInq_casa(), devuelvemes(fecharecorridadate), devuelveanio(fecharecorridadate));
        //TOTAL = IMP ALQUILER AL DIA DE HOY
        //ACTUALIZAR EN BDD
    }

    void corregirsaldoalquiler(float total, int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_gastos_inq gas = new d_gastos_inq();

        gas.setProp_id(prop_id);
        gas.setInq_casa(inq_casa);
        gas.setDetalle("SALDO ALQUILER");
        gas.setAqp(aqp);
        gas.setMqp(mqp);

        if ((mqp >= 5 && aqp == 2020) || (aqp > 2020)) {
            gas = buscargasenlistagastos(gas);
            if (gas != null) {
                if (gas.getEstado().equals(0)) {
                    //revisar entregas
                    total = gas.getImporte();
                    //total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp)); se saco 29/10/23
                    gas.setImporte(total);
                    if (gas.getDetalle().equals("SALDO ALQUILER")
                            || gas.getDetalle().equals("ALQUILER")
                            || gas.getDetalle().equals("ALQUILER MES")
                            || gas.getDetalle().equals("SALDO ALQUILER DIAS")) {
                        //revisar entregas
                        gas.actualizarimporte(gas);
                    }
                }
            } else { //29-04
                //BUSCAR EN MOVIMIENTOS
                //ESTA RECORRIENDO LA FUNCION MENSUAL, SI NO ENCUENTRA TENDRIA QUE INGRESAR UN GASTO TIPO 'alquiler' CON ESA FECHA
                d_movimiento x = new d_movimiento();
                x.setProp_id(prop_id);
                x.setInq_casa(inq_casa);
                x.setAqp(aqp);
                x.setMqp(mqp);
                x = buscarmovenlistasoloalquiler(x);
                if (x == null) {
                    //CHEQUEAR QUE NO SEA MES Y AÑO ACTUAL
                    if (!es_mes_y_anio_actual(mqp, aqp)) {
                        //CHEQUEAR FECHA RECORRIDA SEA POSTERIOR A INICIO CONTRATO
                        if (!es_anterior_a_inicio_contrato(prop_id, inq_casa, mqp, aqp)) {
                            gas = new d_gastos_inq();
                            gas.setProp_id(prop_id);
                            gas.setInq_casa(inq_casa);
                            gas.setDetalle("SALDO ALQUILER");
                            gas.setAqp(aqp);
                            gas.setMqp(mqp);
                            gas.setImporte(total);
                            gas.setEstado(0);
                            d_gastos_inq gas_1 = new d_gastos_inq();
                            gas_1 = gas;
                            gas_1 = gas_1.buscargastoalquiler(gas_1);
                            if (gas_1 == null) {
                                total = total - (revisarentregassaldo(prop_id, inq_casa, mqp, aqp));
                                gas.setImporte(total);
                                if (total > 10f) {
                                    gas.guardargastoinq(gas);
                                    con.escribirfichero("SE INGRESA 'ALQUILER' DESDE FUNCION MENSUAL (INQ_PAGA) - id prop.: " + gas.getProp_id() + " -- " + "id inq.: " + gas.getInq_casa() + " -- "
                                            + "mqp: " + gas.getMqp() + " -- " + "aqp: " + gas.getAqp() + " -- " + "detalle: " + gas.getDetalle() + " -- " + "total: " + con.mostrarnumero(gas.getImporte()));
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Boolean es_anterior_a_inicio_contrato(int prop_id, int inq_casa, int mqp, int aqp) throws Exception {
        d_inquilino i = new d_inquilino();
        Date fecha_ic = i.devuelve_fecha_ic(prop_id, inq_casa);
        String fecha_ic_string = "01/" + devuelvemes(fecha_ic) + "/" + devuelveanio(fecha_ic);
        fecha_ic = parsefechadate(fecha_ic_string);
        String fecha_listado_string = "01/" + mqp + "/" + aqp;
        Date fecha_listado = parsefechadate(fecha_listado_string);
        return fechaesanterioracomienzodecontrato(fecha_ic, fecha_listado);
    }

    Boolean es_mes_y_anio_actual(int mqp, int aqp) {
        int mes_actual = devuelvemes(new Date());
        int anio_actual = devuelveanio(new Date());

        if (mqp == mes_actual && aqp == anio_actual) {
            return true;
        }
        return false;
    }

    d_movimiento buscarultimoimporteantesdelreajuste(d_inquilino inq) throws Exception {
        d_movimiento mov = null;
        Date fecha;
        int i = 0;
        //si es movimientosviejos buscar el año anterior (2019 y años anteriores)
        String tabla = "movimientosviejos";

        //se agrega 07-01, buscar inq
        inq = inq.buscarinquilino(inq.getProp_id(), inq.getInq_casa());

        inq.setArlmrl(ajustarreajuste(inq.getArlmrl()));

        fecha = restar1mes(inq.getArlmrl());

        while (mov == null && i < 10) {
            //tabla = "movimientosviejos";//tabla = "movimientosviejos";
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                mov = null;
                break;
            }
            mov = new d_movimiento();
            mov.setProp_id(inq.getProp_id());
            mov.setInq_casa(inq.getInq_casa());
            int aqp = devuelveanio(fecha);
            if (aqp == 2020) {
                aqp = aqp - 1;
                fecha = sumaraniosunafecha(fecha, -1);
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    mov = null;
                    break;
                }
            }
            mov.setAqp(aqp);
            mov.setMqp(devuelvemes(fecha));
            mov = mov.buscaralquilermesoalquiler(mov, tabla);
            //buscarcuotapaga
            if (mov == null) {
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(aqp);
                mov.setMqp(devuelvemes(fecha));
                mov = cuotapaga(mov);
            }
            fecha = sumaraniosunafecha(fecha, -1);
            i = i + 1;
        }

        fecha = restar1mes(inq.getArlmrl());

        if (mov == null) {
            if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                return null;
            }
            //fecha = restar1mes(inq.getArlmrl());
            tabla = "movimientos";//tabla = "movimientosviejos";
            while (mov == null && i < 10) {
                if (fechaesanterioracomienzodecontrato(inq.getInq_fechaic(), fecha)) {
                    return null;
                }
                mov = new d_movimiento();
                mov.setProp_id(inq.getProp_id());
                mov.setInq_casa(inq.getInq_casa());
                mov.setAqp(devuelveanio(fecha));
                mov.setMqp(devuelvemes(fecha));
                mov = mov.buscaralquilermesoalquiler(mov, tabla);
                //buscarcuotapaga
                if (mov == null) {
                    mov = new d_movimiento();
                    mov.setProp_id(inq.getProp_id());
                    mov.setInq_casa(inq.getInq_casa());
                    mov.setAqp(devuelveanio(fecha));
                    mov.setMqp(devuelvemes(fecha));
                    mov = cuotapaga(mov);
                }
                fecha = sumaraniosunafecha(fecha, -1);
                i = i + 1;
            }
        }

        return mov;
    }

    int obtenercantAnios(Date first, Date last) {
        Calendar a = getCalendar(first);
        Calendar b = getCalendar(last);
        int diff = b.get(Calendar.YEAR) - a.get(Calendar.YEAR);
        if (a.get(Calendar.MONTH) > b.get(Calendar.MONTH)
                || (a.get(Calendar.MONTH) == b.get(Calendar.MONTH)
                && a.get(Calendar.DATE) > b.get(Calendar.DATE))) {
            diff--;
        }
        return diff;
    }

    public static Calendar getCalendar(Date date) {
        Calendar cal = Calendar.getInstance(Locale.getDefault());
        cal.setTime(date);
        return cal;
    }

    Boolean fechaesanterioracomienzodecontrato(Date fechaic, Date fecha) {
        int i = fechaic.compareTo(fecha);
        if (i == -1) {
            return false;
        }
        return true;
    }

    Date restar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, -1);
        return calendario.getTime();
    }

    Date sumar1mes(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 1);
        return calendario.getTime();
    }

    public Date sumar4meses(Date fecha) {
        Calendar calendario = Calendar.getInstance();
        calendario.setTime(fecha);
        calendario.add(Calendar.MONTH, 4);
        return calendario.getTime();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbplazo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblcorreccion;
    private javax.swing.JLabel lbldeuda;
    private javax.swing.JLabel lblnombreinq;
    private javax.swing.JTable tblinquilinos;
    private javax.swing.JTextField txtabonoentrega;
    private javax.swing.JTextField txtinq_id;
    private javax.swing.JTextArea txtobservaciones;
    private javax.swing.JTextField txtprop_id;
    // End of variables declaration//GEN-END:variables

    void cargarobservador() {
        p_control con = p_control.getInstancia();
        con.registrarobservador_mov(this);
        con.registrarobservador_inq_paga(this);
    }

    @Override
    public void actualizar_mov() {
        funcbuscar();
    }

    @Override
    public void actualizar_listado() {
        try {
            inq.reiniciarimpalquilerparticular(inq.getProp_id(), inq.getInq_casa());
            inq = inq.buscarinquilino(inq.getProp_id(), inq.getInq_casa());
            if (inq.getInq_tipoalq().equals("HABITACION")) {
                actualizarimportealquilerhabitacion(inq);
            }
            if (inq.getInq_tipoalq().equals("LOCAL")) {
                actualizarimportealquilerlocal(inq);
            }
            funcbuscar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, toUpperCase(ex.getMessage()), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

}
